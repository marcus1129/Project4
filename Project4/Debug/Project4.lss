
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000442  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000900  00800210  00800210  000004e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001162  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9e  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042f  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e8  00000000  00000000  00002ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000032df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e4       	ldi	r30, 0x42	; 66
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2b e0       	ldi	r18, 0x0B	; 11
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	33 d0       	rcall	.+102    	; 0x186 <main>
 120:	8e c1       	rjmp	.+796    	; 0x43e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <importRegs>:
#include "define.h"
#include <avr/io.h>

void importRegs(){
	int UARTBaudRateRegList[9][4][3] = {{{UBRR0L, UBRR0H},{UBRR1L, UBRR1H},{UBRR2L, UBRR2H},{UBRR3L, UBRR3H}},
 124:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 128:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 12c:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 130:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 134:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
 138:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 13c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
 140:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	{{UCSR0A}, {UCSR1A}, {UCSR2A}, {UCSR3A}},
 144:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 148:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 14c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 150:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
	{{UCSR0B}, {UCSR1B}, {UCSR2B}, {UCSR3B}},
 154:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 158:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 15c:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 160:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
	{{UCSR0C}, {UCSR1C}, {UCSR2C}, {UCSR3C}},
 164:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 168:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 16c:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
 170:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
	{{TXEN0}, {TXEN1}, {TXEN2}, {TXEN3}},
	{{RXEN0}, {RXEN1}, {RXEN2}, {RXEN3}},
	{{UCSZ00, UCSZ01, UCSZ02}, {UCSZ10, UCSZ11, UCSZ12}, {UCSZ20 ,UCSZ21 ,UCSZ22}},
	{{UDR0}, {UDR1}, {UDR2}, {UDR3}},
 174:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 178:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 17c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 180:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 184:	08 95       	ret

00000186 <main>:
#include "UARTLib.h"


int main(void)
{
	UART.init(ASYNC, 19200, 0);
 186:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__DATA_REGION_ORIGIN__+0x4>
 18a:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__DATA_REGION_ORIGIN__+0x5>
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	7b e4       	ldi	r23, 0x4B	; 75
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	19 95       	eicall
    while (1){
		UART.transmit('s');
 19c:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
 1a0:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
 1a4:	83 e7       	ldi	r24, 0x73	; 115
 1a6:	19 95       	eicall
 1a8:	f9 cf       	rjmp	.-14     	; 0x19c <main+0x16>

000001aa <initASYNC>:
#include <stdio.h>
#include <stdlib.h>
#include "UARTLib.h"
#include "define.h"

int initASYNC(int rate, int UARTReg, int UARTBaudRegList[9][4][3]){ //UARTBaudRegList is a list of register, see define.c and define.h
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	eb 01       	movw	r28, r22
 1b4:	8a 01       	movw	r16, r20
	UART.ubrr = F_CPU/(16*rate)-1;
 1b6:	82 95       	swap	r24
 1b8:	92 95       	swap	r25
 1ba:	90 7f       	andi	r25, 0xF0	; 240
 1bc:	98 27       	eor	r25, r24
 1be:	80 7f       	andi	r24, 0xF0	; 240
 1c0:	98 27       	eor	r25, r24
 1c2:	9c 01       	movw	r18, r24
 1c4:	99 0f       	add	r25, r25
 1c6:	44 0b       	sbc	r20, r20
 1c8:	55 0b       	sbc	r21, r21
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	74 e2       	ldi	r23, 0x24	; 36
 1ce:	84 ef       	ldi	r24, 0xF4	; 244
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	13 d1       	rcall	.+550    	; 0x3fa <__udivmodsi4>
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	31 09       	sbc	r19, r1
 1d8:	a0 e0       	ldi	r26, 0x00	; 0
 1da:	b2 e0       	ldi	r27, 0x02	; 2
 1dc:	11 96       	adiw	r26, 0x01	; 1
 1de:	3c 93       	st	X, r19
 1e0:	2e 93       	st	-X, r18
	UARTBaudRegList[UBBR][UARTReg][L] = (unsigned char)(UART.ubrr>>8); 
 1e2:	ae 01       	movw	r20, r28
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	fa 01       	movw	r30, r20
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	e0 0f       	add	r30, r16
 1f4:	f1 1f       	adc	r31, r17
 1f6:	30 83       	st	Z, r19
 1f8:	11 82       	std	Z+1, r1	; 0x01
	UARTBaudRegList[UBBR][UARTReg][H] = (unsigned char)UART.ubrr; // Sets baud rate
 1fa:	8d 91       	ld	r24, X+
 1fc:	9c 91       	ld	r25, X
 1fe:	99 27       	eor	r25, r25
 200:	93 83       	std	Z+3, r25	; 0x03
 202:	82 83       	std	Z+2, r24	; 0x02
	UARTBaudRegList[UCSRB][UARTReg][0] = (1<<UARTBaudRegList[TXEN][UARTReg][0])|(1<<UARTBaudRegList[RXEN][UARTReg][0]); //Enables transmit and recieve bit in register
 204:	c8 01       	movw	r24, r16
 206:	80 5a       	subi	r24, 0xA0	; 160
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	da 01       	movw	r26, r20
 20c:	ac 0f       	add	r26, r28
 20e:	bd 1f       	adc	r27, r29
 210:	aa 0f       	add	r26, r26
 212:	bb 1f       	adc	r27, r27
 214:	a8 0f       	add	r26, r24
 216:	b9 1f       	adc	r27, r25
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	bc 01       	movw	r22, r24
 21e:	0c 90       	ld	r0, X
 220:	02 c0       	rjmp	.+4      	; 0x226 <initASYNC+0x7c>
 222:	66 0f       	add	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <initASYNC+0x78>
 22a:	98 01       	movw	r18, r16
 22c:	28 58       	subi	r18, 0x88	; 136
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
 230:	da 01       	movw	r26, r20
 232:	ac 0f       	add	r26, r28
 234:	bd 1f       	adc	r27, r29
 236:	aa 0f       	add	r26, r26
 238:	bb 1f       	adc	r27, r27
 23a:	a2 0f       	add	r26, r18
 23c:	b3 1f       	adc	r27, r19
 23e:	9c 01       	movw	r18, r24
 240:	0c 90       	ld	r0, X
 242:	02 c0       	rjmp	.+4      	; 0x248 <initASYNC+0x9e>
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <initASYNC+0x9a>
 24c:	26 2b       	or	r18, r22
 24e:	37 2b       	or	r19, r23
 250:	31 ab       	std	Z+49, r19	; 0x31
 252:	20 ab       	std	Z+48, r18	; 0x30
	UARTBaudRegList[UCSRC][UARTReg][0] = (1<<UARTBaudRegList[UCSZ][UARTReg][0])|(1<<UARTBaudRegList[UCSZ][UARTReg][1])|(1<<UARTBaudRegList[UCSZ][UARTReg][2]); //Sets data length
 254:	98 01       	movw	r18, r16
 256:	20 57       	subi	r18, 0x70	; 112
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	fa 01       	movw	r30, r20
 25c:	ec 0f       	add	r30, r28
 25e:	fd 1f       	adc	r31, r29
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	e2 0f       	add	r30, r18
 266:	f3 1f       	adc	r31, r19
 268:	bc 01       	movw	r22, r24
 26a:	00 80       	ld	r0, Z
 26c:	02 c0       	rjmp	.+4      	; 0x272 <initASYNC+0xc8>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <initASYNC+0xc4>
 276:	9c 01       	movw	r18, r24
 278:	02 80       	ldd	r0, Z+2	; 0x02
 27a:	02 c0       	rjmp	.+4      	; 0x280 <initASYNC+0xd6>
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <initASYNC+0xd2>
 284:	26 2b       	or	r18, r22
 286:	37 2b       	or	r19, r23
 288:	04 80       	ldd	r0, Z+4	; 0x04
 28a:	02 c0       	rjmp	.+4      	; 0x290 <initASYNC+0xe6>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <initASYNC+0xe2>
 294:	82 2b       	or	r24, r18
 296:	93 2b       	or	r25, r19
 298:	08 5b       	subi	r16, 0xB8	; 184
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
 29c:	c4 0f       	add	r28, r20
 29e:	d5 1f       	adc	r29, r21
 2a0:	cc 0f       	add	r28, r28
 2a2:	dd 1f       	adc	r29, r29
 2a4:	c0 0f       	add	r28, r16
 2a6:	d1 1f       	adc	r29, r17
 2a8:	99 83       	std	Y+1, r25	; 0x01
 2aa:	88 83       	st	Y, r24
	return 1;
};
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

000002ba <initASYNC2X>:

int initASYNC2X(int rate, int UARTReg, int UARTBaudRegList[9][4][3]){
	UART.ubrr = F_CPU/(8*rate)-1;
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	9c 01       	movw	r18, r24
 2c8:	99 0f       	add	r25, r25
 2ca:	44 0b       	sbc	r20, r20
 2cc:	55 0b       	sbc	r21, r21
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	74 e2       	ldi	r23, 0x24	; 36
 2d2:	84 ef       	ldi	r24, 0xF4	; 244
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	91 d0       	rcall	.+290    	; 0x3fa <__udivmodsi4>
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	31 09       	sbc	r19, r1
 2dc:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2e0:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
	return 1;
};
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	08 95       	ret

000002ea <initMASTER>:

int initMASTER(int rate, int UARTReg, int UARTBaudRegList[9][4][3]){
	return 1;
};
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret

000002f0 <initSLAVE>:

int initSLAVE(int rate, int UARTReg, int UARTBaudRegList[9][4][3]){
	return 1;
};
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <transmit>:
	}
	return 1;
}

void transmit(char TransmitionData){
	while(!(UARTBaudRateRegList[UCSRA][UART.UARTReg][0] & 0b00100000)){} //Waits for transmition end
 2f6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 2fa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 2fe:	f9 01       	movw	r30, r18
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	e2 0f       	add	r30, r18
 306:	f3 1f       	adc	r31, r19
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	e0 5f       	subi	r30, 0xF0	; 240
 30e:	fd 4f       	sbci	r31, 0xFD	; 253
 310:	90 8d       	ldd	r25, Z+24	; 0x18
 312:	95 ff       	sbrs	r25, 5
 314:	f0 cf       	rjmp	.-32     	; 0x2f6 <transmit>
	UARTBaudRateRegList[UCSRB][UART.UARTReg][0] &= ~(1<<UARTBaudRateRegList[TXB8][UART.UARTReg][0]);
 316:	f9 01       	movw	r30, r18
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	e2 0f       	add	r30, r18
 31e:	f3 1f       	adc	r31, r19
 320:	ee 0f       	add	r30, r30
 322:	ff 1f       	adc	r31, r31
 324:	e0 5f       	subi	r30, 0xF0	; 240
 326:	fd 4f       	sbci	r31, 0xFD	; 253
 328:	df 01       	movw	r26, r30
 32a:	a0 54       	subi	r26, 0x40	; 64
 32c:	bf 4f       	sbci	r27, 0xFF	; 255
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0c 90       	ld	r0, X
 334:	02 c0       	rjmp	.+4      	; 0x33a <transmit+0x44>
 336:	44 0f       	add	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	0a 94       	dec	r0
 33c:	e2 f7       	brpl	.-8      	; 0x336 <transmit+0x40>
 33e:	40 95       	com	r20
 340:	50 95       	com	r21
 342:	60 a9       	ldd	r22, Z+48	; 0x30
 344:	71 a9       	ldd	r23, Z+49	; 0x31
 346:	46 23       	and	r20, r22
 348:	57 23       	and	r21, r23
 34a:	51 ab       	std	Z+49, r21	; 0x31
 34c:	40 ab       	std	Z+48, r20	; 0x30
	if(TransmitionData & 0x0100){
 34e:	90 e0       	ldi	r25, 0x00	; 0
		UARTBaudRateRegList[UCSRB][UART.UARTReg][0] |= (1<<UARTBaudRateRegList[TXB8][UART.UARTReg][0]);
	}
	UARTBaudRateRegList[UDR][UART.UARTReg][0] = TransmitionData;
 350:	f9 01       	movw	r30, r18
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	e2 0f       	add	r30, r18
 358:	f3 1f       	adc	r31, r19
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	e8 54       	subi	r30, 0x48	; 72
 360:	fd 4f       	sbci	r31, 0xFD	; 253
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
 366:	08 95       	ret

00000368 <init>:

int initSLAVE(int rate, int UARTReg, int UARTBaudRegList[9][4][3]){
	return 1;
};

int init(int mode, int baudRate, int UARTId){
 368:	cf 92       	push	r12
 36a:	df 92       	push	r13
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	28 97       	sbiw	r28, 0x08	; 8
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	de bf       	out	0x3e, r29	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	cd bf       	out	0x3d, r28	; 61
	if(UARTId > 3){
 388:	44 30       	cpi	r20, 0x04	; 4
 38a:	51 05       	cpc	r21, r1
 38c:	2c f5       	brge	.+74     	; 0x3d8 <init+0x70>
 38e:	7a 01       	movw	r14, r20
 390:	6b 01       	movw	r12, r22
 392:	8c 01       	movw	r16, r24
		return 0;
	}
	importRegs();
 394:	c7 de       	rcall	.-626    	; 0x124 <importRegs>
	UART.UARTReg = UARTId;
 396:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 39a:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
	int (*initFuncs[4])(int rate, int UARTReg, int UARTBaudRegList[9][4][3]) = {initASYNC, initASYNC2X, initMASTER, initSLAVE};
 39e:	88 e0       	ldi	r24, 0x08	; 8
 3a0:	e8 e0       	ldi	r30, 0x08	; 8
 3a2:	f2 e0       	ldi	r31, 0x02	; 2
 3a4:	de 01       	movw	r26, r28
 3a6:	11 96       	adiw	r26, 0x01	; 1
 3a8:	01 90       	ld	r0, Z+
 3aa:	0d 92       	st	X+, r0
 3ac:	8a 95       	dec	r24
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <init+0x40>
	if((*initFuncs[mode])(baudRate, UARTId, UARTBaudRateRegList)){
 3b0:	c8 01       	movw	r24, r16
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	e1 e0       	ldi	r30, 0x01	; 1
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	ec 0f       	add	r30, r28
 3bc:	fd 1f       	adc	r31, r29
 3be:	e8 0f       	add	r30, r24
 3c0:	f9 1f       	adc	r31, r25
 3c2:	01 90       	ld	r0, Z+
 3c4:	f0 81       	ld	r31, Z
 3c6:	e0 2d       	mov	r30, r0
 3c8:	40 e1       	ldi	r20, 0x10	; 16
 3ca:	52 e0       	ldi	r21, 0x02	; 2
 3cc:	b7 01       	movw	r22, r14
 3ce:	c6 01       	movw	r24, r12
 3d0:	19 95       	eicall
		
	}
	return 1;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <init+0x74>
	return 1;
};

int init(int mode, int baudRate, int UARTId){
	if(UARTId > 3){
		return 0;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
	int (*initFuncs[4])(int rate, int UARTReg, int UARTBaudRegList[9][4][3]) = {initASYNC, initASYNC2X, initMASTER, initSLAVE};
	if((*initFuncs[mode])(baudRate, UARTId, UARTBaudRateRegList)){
		
	}
	return 1;
}
 3dc:	28 96       	adiw	r28, 0x08	; 8
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	cf 90       	pop	r12
 3f8:	08 95       	ret

000003fa <__udivmodsi4>:
 3fa:	a1 e2       	ldi	r26, 0x21	; 33
 3fc:	1a 2e       	mov	r1, r26
 3fe:	aa 1b       	sub	r26, r26
 400:	bb 1b       	sub	r27, r27
 402:	fd 01       	movw	r30, r26
 404:	0d c0       	rjmp	.+26     	; 0x420 <__udivmodsi4_ep>

00000406 <__udivmodsi4_loop>:
 406:	aa 1f       	adc	r26, r26
 408:	bb 1f       	adc	r27, r27
 40a:	ee 1f       	adc	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	a2 17       	cp	r26, r18
 410:	b3 07       	cpc	r27, r19
 412:	e4 07       	cpc	r30, r20
 414:	f5 07       	cpc	r31, r21
 416:	20 f0       	brcs	.+8      	; 0x420 <__udivmodsi4_ep>
 418:	a2 1b       	sub	r26, r18
 41a:	b3 0b       	sbc	r27, r19
 41c:	e4 0b       	sbc	r30, r20
 41e:	f5 0b       	sbc	r31, r21

00000420 <__udivmodsi4_ep>:
 420:	66 1f       	adc	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	1a 94       	dec	r1
 42a:	69 f7       	brne	.-38     	; 0x406 <__udivmodsi4_loop>
 42c:	60 95       	com	r22
 42e:	70 95       	com	r23
 430:	80 95       	com	r24
 432:	90 95       	com	r25
 434:	9b 01       	movw	r18, r22
 436:	ac 01       	movw	r20, r24
 438:	bd 01       	movw	r22, r26
 43a:	cf 01       	movw	r24, r30
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
