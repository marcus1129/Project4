
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800200  00001548  000015dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800252  00800252  0000162e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c6d  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ee  00000000  00000000  0000459d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015fa  00000000  00000000  0000588b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000970  00000000  00000000  00006e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4b  00000000  00000000  000077f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d89  00000000  00000000  00008343  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
       2:	00 00       	nop
       4:	0f c2       	rjmp	.+1054   	; 0x424 <__bad_interrupt>
       6:	00 00       	nop
       8:	0d c2       	rjmp	.+1050   	; 0x424 <__bad_interrupt>
       a:	00 00       	nop
       c:	0b c2       	rjmp	.+1046   	; 0x424 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c2       	rjmp	.+1042   	; 0x424 <__bad_interrupt>
      12:	00 00       	nop
      14:	44 c5       	rjmp	.+2696   	; 0xa9e <__vector_5>
      16:	00 00       	nop
      18:	05 c2       	rjmp	.+1034   	; 0x424 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c2       	rjmp	.+1030   	; 0x424 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c2       	rjmp	.+1026   	; 0x424 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c1       	rjmp	.+1022   	; 0x424 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c1       	rjmp	.+1018   	; 0x424 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c1       	rjmp	.+1014   	; 0x424 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c1       	rjmp	.+1010   	; 0x424 <__bad_interrupt>
      32:	00 00       	nop
      34:	c0 c3       	rjmp	.+1920   	; 0x7b6 <__vector_13>
      36:	00 00       	nop
      38:	f5 c1       	rjmp	.+1002   	; 0x424 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c1       	rjmp	.+998    	; 0x424 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c1       	rjmp	.+994    	; 0x424 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c3       	rjmp	.+1774   	; 0x734 <__vector_17>
      46:	00 00       	nop
      48:	ed c1       	rjmp	.+986    	; 0x424 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	eb c1       	rjmp	.+982    	; 0x424 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e9 c1       	rjmp	.+978    	; 0x424 <__bad_interrupt>
      52:	00 00       	nop
      54:	2e c3       	rjmp	.+1628   	; 0x6b2 <__vector_21>
      56:	00 00       	nop
      58:	e5 c1       	rjmp	.+970    	; 0x424 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e3 c1       	rjmp	.+966    	; 0x424 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e1 c1       	rjmp	.+962    	; 0x424 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_25>
      68:	dd c1       	rjmp	.+954    	; 0x424 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c1       	rjmp	.+950    	; 0x424 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d9 c1       	rjmp	.+946    	; 0x424 <__bad_interrupt>
      72:	00 00       	nop
      74:	d7 c1       	rjmp	.+942    	; 0x424 <__bad_interrupt>
      76:	00 00       	nop
      78:	d5 c1       	rjmp	.+938    	; 0x424 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d3 c1       	rjmp	.+934    	; 0x424 <__bad_interrupt>
      7e:	00 00       	nop
      80:	db c3       	rjmp	.+1974   	; 0x838 <__vector_32>
      82:	00 00       	nop
      84:	cf c1       	rjmp	.+926    	; 0x424 <__bad_interrupt>
      86:	00 00       	nop
      88:	cd c1       	rjmp	.+922    	; 0x424 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cb c1       	rjmp	.+918    	; 0x424 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_36>
      94:	c7 c1       	rjmp	.+910    	; 0x424 <__bad_interrupt>
      96:	00 00       	nop
      98:	c5 c1       	rjmp	.+906    	; 0x424 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c3 c1       	rjmp	.+902    	; 0x424 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c1 c1       	rjmp	.+898    	; 0x424 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bf c1       	rjmp	.+894    	; 0x424 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	08 c4       	rjmp	.+2064   	; 0x8ba <__vector_42>
      aa:	00 00       	nop
      ac:	bb c1       	rjmp	.+886    	; 0x424 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b9 c1       	rjmp	.+882    	; 0x424 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b7 c1       	rjmp	.+878    	; 0x424 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b5 c1       	rjmp	.+874    	; 0x424 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b3 c1       	rjmp	.+870    	; 0x424 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b1 c1       	rjmp	.+866    	; 0x424 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	af c1       	rjmp	.+862    	; 0x424 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ad c1       	rjmp	.+858    	; 0x424 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_51>
      d0:	a9 c1       	rjmp	.+850    	; 0x424 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a7 c1       	rjmp	.+846    	; 0x424 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_54>
      dc:	a3 c1       	rjmp	.+838    	; 0x424 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a1 c1       	rjmp	.+834    	; 0x424 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
      ec:	00 00       	nop
      ee:	5f 00       	.word	0x005f	; ????
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	07 00       	.word	0x0007	; ????
      f8:	07 00       	.word	0x0007	; ????
      fa:	00 00       	nop
      fc:	00 14       	cp	r0, r0
      fe:	7f 14       	cp	r7, r15
     100:	7f 14       	cp	r7, r15
     102:	00 00       	nop
     104:	00 24       	eor	r0, r0
     106:	2a 7f       	andi	r18, 0xFA	; 250
     108:	2a 12       	cpse	r2, r26
     10a:	00 00       	nop
     10c:	00 23       	and	r16, r16
     10e:	13 08       	sbc	r1, r3
     110:	64 62       	ori	r22, 0x24	; 36
     112:	00 00       	nop
     114:	00 36       	cpi	r16, 0x60	; 96
     116:	49 55       	subi	r20, 0x59	; 89
     118:	22 50       	subi	r18, 0x02	; 2
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	05 03       	mulsu	r16, r21
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 1c       	adc	r0, r0
     126:	22 41       	sbci	r18, 0x12	; 18
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 41       	sbci	r16, 0x10	; 16
     12e:	22 1c       	adc	r2, r2
     130:	00 00       	nop
     132:	00 00       	nop
     134:	00 08       	sbc	r0, r0
     136:	2a 1c       	adc	r2, r10
     138:	2a 08       	sbc	r2, r10
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	08 3e       	cpi	r16, 0xE8	; 232
     140:	08 08       	sbc	r0, r8
     142:	00 00       	nop
     144:	00 a0       	ldd	r0, Z+32	; 0x20
     146:	60 00       	.word	0x0060	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 08       	sbc	r0, r0
     14e:	08 08       	sbc	r0, r8
     150:	08 08       	sbc	r0, r8
     152:	00 00       	nop
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 20       	and	r0, r0
     15e:	10 08       	sbc	r1, r0
     160:	04 02       	muls	r16, r20
     162:	00 00       	nop
     164:	00 3e       	cpi	r16, 0xE0	; 224
     166:	51 49       	sbci	r21, 0x91	; 145
     168:	45 3e       	cpi	r20, 0xE5	; 229
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	42 7f       	andi	r20, 0xF2	; 242
     170:	40 00       	.word	0x0040	; ????
     172:	00 00       	nop
     174:	00 62       	ori	r16, 0x20	; 32
     176:	51 49       	sbci	r21, 0x91	; 145
     178:	49 46       	sbci	r20, 0x69	; 105
     17a:	00 00       	nop
     17c:	00 22       	and	r0, r16
     17e:	41 49       	sbci	r20, 0x91	; 145
     180:	49 36       	cpi	r20, 0x69	; 105
     182:	00 00       	nop
     184:	00 18       	sub	r0, r0
     186:	14 12       	cpse	r1, r20
     188:	7f 10       	cpse	r7, r15
     18a:	00 00       	nop
     18c:	00 27       	eor	r16, r16
     18e:	45 45       	sbci	r20, 0x55	; 85
     190:	45 39       	cpi	r20, 0x95	; 149
     192:	00 00       	nop
     194:	00 3c       	cpi	r16, 0xC0	; 192
     196:	4a 49       	sbci	r20, 0x9A	; 154
     198:	49 30       	cpi	r20, 0x09	; 9
     19a:	00 00       	nop
     19c:	00 01       	movw	r0, r0
     19e:	71 09       	sbc	r23, r1
     1a0:	05 03       	mulsu	r16, r21
     1a2:	00 00       	nop
     1a4:	00 36       	cpi	r16, 0x60	; 96
     1a6:	49 49       	sbci	r20, 0x99	; 153
     1a8:	49 36       	cpi	r20, 0x69	; 105
     1aa:	00 00       	nop
     1ac:	00 06       	cpc	r0, r16
     1ae:	49 49       	sbci	r20, 0x99	; 153
     1b0:	29 1e       	adc	r2, r25
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	36 36       	cpi	r19, 0x66	; 102
     1b8:	00 00       	nop
     1ba:	00 00       	nop
     1bc:	00 00       	nop
     1be:	ac 6c       	ori	r26, 0xCC	; 204
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 00       	.word	0x0041	; ????
     1ca:	00 00       	nop
     1cc:	00 14       	cp	r0, r0
     1ce:	14 14       	cp	r1, r4
     1d0:	14 14       	cp	r1, r4
     1d2:	00 00       	nop
     1d4:	00 41       	sbci	r16, 0x10	; 16
     1d6:	22 14       	cp	r2, r2
     1d8:	08 00       	.word	0x0008	; ????
     1da:	00 00       	nop
     1dc:	00 02       	muls	r16, r16
     1de:	01 51       	subi	r16, 0x11	; 17
     1e0:	09 06       	cpc	r0, r25
     1e2:	00 00       	nop
     1e4:	00 32       	cpi	r16, 0x20	; 32
     1e6:	49 79       	andi	r20, 0x99	; 153
     1e8:	41 3e       	cpi	r20, 0xE1	; 225
     1ea:	00 00       	nop
     1ec:	00 7e       	andi	r16, 0xE0	; 224
     1ee:	09 09       	sbc	r16, r9
     1f0:	09 7e       	andi	r16, 0xE9	; 233
     1f2:	00 00       	nop
     1f4:	00 7f       	andi	r16, 0xF0	; 240
     1f6:	49 49       	sbci	r20, 0x99	; 153
     1f8:	49 36       	cpi	r20, 0x69	; 105
     1fa:	00 00       	nop
     1fc:	00 3e       	cpi	r16, 0xE0	; 224
     1fe:	41 41       	sbci	r20, 0x11	; 17
     200:	41 22       	and	r4, r17
     202:	00 00       	nop
     204:	00 7f       	andi	r16, 0xF0	; 240
     206:	41 41       	sbci	r20, 0x11	; 17
     208:	22 1c       	adc	r2, r2
     20a:	00 00       	nop
     20c:	00 7f       	andi	r16, 0xF0	; 240
     20e:	49 49       	sbci	r20, 0x99	; 153
     210:	49 41       	sbci	r20, 0x19	; 25
     212:	00 00       	nop
     214:	00 7f       	andi	r16, 0xF0	; 240
     216:	09 09       	sbc	r16, r9
     218:	09 01       	movw	r0, r18
     21a:	00 00       	nop
     21c:	00 3e       	cpi	r16, 0xE0	; 224
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	51 72       	andi	r21, 0x21	; 33
     222:	00 00       	nop
     224:	00 7f       	andi	r16, 0xF0	; 240
     226:	08 08       	sbc	r0, r8
     228:	08 7f       	andi	r16, 0xF8	; 248
     22a:	00 00       	nop
     22c:	00 41       	sbci	r16, 0x10	; 16
     22e:	7f 41       	sbci	r23, 0x1F	; 31
     230:	00 00       	nop
     232:	00 00       	nop
     234:	00 20       	and	r0, r0
     236:	40 41       	sbci	r20, 0x10	; 16
     238:	3f 01       	movw	r6, r30
     23a:	00 00       	nop
     23c:	00 7f       	andi	r16, 0xF0	; 240
     23e:	08 14       	cp	r0, r8
     240:	22 41       	sbci	r18, 0x12	; 18
     242:	00 00       	nop
     244:	00 7f       	andi	r16, 0xF0	; 240
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	00 00       	nop
     24c:	00 7f       	andi	r16, 0xF0	; 240
     24e:	02 0c       	add	r0, r2
     250:	02 7f       	andi	r16, 0xF2	; 242
     252:	00 00       	nop
     254:	00 7f       	andi	r16, 0xF0	; 240
     256:	04 08       	sbc	r0, r4
     258:	10 7f       	andi	r17, 0xF0	; 240
     25a:	00 00       	nop
     25c:	00 3e       	cpi	r16, 0xE0	; 224
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	41 3e       	cpi	r20, 0xE1	; 225
     262:	00 00       	nop
     264:	00 7f       	andi	r16, 0xF0	; 240
     266:	09 09       	sbc	r16, r9
     268:	09 06       	cpc	r0, r25
     26a:	00 00       	nop
     26c:	00 3e       	cpi	r16, 0xE0	; 224
     26e:	41 51       	subi	r20, 0x11	; 17
     270:	21 5e       	subi	r18, 0xE1	; 225
     272:	00 00       	nop
     274:	00 7f       	andi	r16, 0xF0	; 240
     276:	09 19       	sub	r16, r9
     278:	29 46       	sbci	r18, 0x69	; 105
     27a:	00 00       	nop
     27c:	00 26       	eor	r0, r16
     27e:	49 49       	sbci	r20, 0x99	; 153
     280:	49 32       	cpi	r20, 0x29	; 41
     282:	00 00       	nop
     284:	00 01       	movw	r0, r0
     286:	01 7f       	andi	r16, 0xF1	; 241
     288:	01 01       	movw	r0, r2
     28a:	00 00       	nop
     28c:	00 3f       	cpi	r16, 0xF0	; 240
     28e:	40 40       	sbci	r20, 0x00	; 0
     290:	40 3f       	cpi	r20, 0xF0	; 240
     292:	00 00       	nop
     294:	00 1f       	adc	r16, r16
     296:	20 40       	sbci	r18, 0x00	; 0
     298:	20 1f       	adc	r18, r16
     29a:	00 00       	nop
     29c:	00 3f       	cpi	r16, 0xF0	; 240
     29e:	40 38       	cpi	r20, 0x80	; 128
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 63       	ori	r16, 0x30	; 48
     2a6:	14 08       	sbc	r1, r4
     2a8:	14 63       	ori	r17, 0x34	; 52
     2aa:	00 00       	nop
     2ac:	00 03       	mulsu	r16, r16
     2ae:	04 78       	andi	r16, 0x84	; 132
     2b0:	04 03       	mulsu	r16, r20
     2b2:	00 00       	nop
     2b4:	00 61       	ori	r16, 0x10	; 16
     2b6:	51 49       	sbci	r21, 0x91	; 145
     2b8:	45 43       	sbci	r20, 0x35	; 53
     2ba:	00 00       	nop
     2bc:	00 7f       	andi	r16, 0xF0	; 240
     2be:	41 41       	sbci	r20, 0x11	; 17
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 02       	muls	r16, r16
     2c6:	04 08       	sbc	r0, r4
     2c8:	10 20       	and	r1, r0
     2ca:	00 00       	nop
     2cc:	00 41       	sbci	r16, 0x10	; 16
     2ce:	41 7f       	andi	r20, 0xF1	; 241
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 04       	cpc	r0, r0
     2d6:	02 01       	movw	r0, r4
     2d8:	02 04       	cpc	r0, r2
     2da:	00 00       	nop
     2dc:	00 80       	ld	r0, Z
     2de:	80 80       	ld	r8, Z
     2e0:	80 80       	ld	r8, Z
     2e2:	00 00       	nop
     2e4:	00 01       	movw	r0, r0
     2e6:	02 04       	cpc	r0, r2
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	00 20       	and	r0, r0
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	54 78       	andi	r21, 0x84	; 132
     2f2:	00 00       	nop
     2f4:	00 7f       	andi	r16, 0xF0	; 240
     2f6:	48 44       	sbci	r20, 0x48	; 72
     2f8:	44 38       	cpi	r20, 0x84	; 132
     2fa:	00 00       	nop
     2fc:	00 38       	cpi	r16, 0x80	; 128
     2fe:	44 44       	sbci	r20, 0x44	; 68
     300:	28 00       	.word	0x0028	; ????
     302:	00 00       	nop
     304:	00 38       	cpi	r16, 0x80	; 128
     306:	44 44       	sbci	r20, 0x44	; 68
     308:	48 7f       	andi	r20, 0xF8	; 248
     30a:	00 00       	nop
     30c:	00 38       	cpi	r16, 0x80	; 128
     30e:	54 54       	subi	r21, 0x44	; 68
     310:	54 18       	sub	r5, r4
     312:	00 00       	nop
     314:	00 08       	sbc	r0, r0
     316:	7e 09       	sbc	r23, r14
     318:	02 00       	.word	0x0002	; ????
     31a:	00 00       	nop
     31c:	00 18       	sub	r0, r0
     31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     320:	a4 7c       	andi	r26, 0xC4	; 196
     322:	00 00       	nop
     324:	00 7f       	andi	r16, 0xF0	; 240
     326:	08 04       	cpc	r0, r8
     328:	04 78       	andi	r16, 0x84	; 132
     32a:	00 00       	nop
     32c:	00 00       	nop
     32e:	7d 00       	.word	0x007d	; ????
     330:	00 00       	nop
     332:	00 00       	nop
     334:	00 80       	ld	r0, Z
     336:	84 7d       	andi	r24, 0xD4	; 212
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	00 7f       	andi	r16, 0xF0	; 240
     33e:	10 28       	or	r1, r0
     340:	44 00       	.word	0x0044	; ????
     342:	00 00       	nop
     344:	00 41       	sbci	r16, 0x10	; 16
     346:	7f 40       	sbci	r23, 0x0F	; 15
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	00 7c       	andi	r16, 0xC0	; 192
     34e:	04 18       	sub	r0, r4
     350:	04 78       	andi	r16, 0x84	; 132
     352:	00 00       	nop
     354:	00 7c       	andi	r16, 0xC0	; 192
     356:	08 04       	cpc	r0, r8
     358:	7c 00       	.word	0x007c	; ????
     35a:	00 00       	nop
     35c:	00 38       	cpi	r16, 0x80	; 128
     35e:	44 44       	sbci	r20, 0x44	; 68
     360:	38 00       	.word	0x0038	; ????
     362:	00 00       	nop
     364:	00 fc       	sbrc	r0, 0
     366:	24 24       	eor	r2, r4
     368:	18 00       	.word	0x0018	; ????
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	24 24       	eor	r2, r4
     370:	fc 00       	.word	0x00fc	; ????
     372:	00 00       	nop
     374:	00 00       	nop
     376:	7c 08       	sbc	r7, r12
     378:	04 00       	.word	0x0004	; ????
     37a:	00 00       	nop
     37c:	00 48       	sbci	r16, 0x80	; 128
     37e:	54 54       	subi	r21, 0x44	; 68
     380:	24 00       	.word	0x0024	; ????
     382:	00 00       	nop
     384:	00 04       	cpc	r0, r0
     386:	7f 44       	sbci	r23, 0x4F	; 79
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 3c       	cpi	r16, 0xC0	; 192
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	7c 00       	.word	0x007c	; ????
     392:	00 00       	nop
     394:	00 1c       	adc	r0, r0
     396:	20 40       	sbci	r18, 0x00	; 0
     398:	20 1c       	adc	r2, r0
     39a:	00 00       	nop
     39c:	00 3c       	cpi	r16, 0xC0	; 192
     39e:	40 30       	cpi	r20, 0x00	; 0
     3a0:	40 3c       	cpi	r20, 0xC0	; 192
     3a2:	00 00       	nop
     3a4:	00 44       	sbci	r16, 0x40	; 64
     3a6:	28 10       	cpse	r2, r8
     3a8:	28 44       	sbci	r18, 0x48	; 72
     3aa:	00 00       	nop
     3ac:	00 1c       	adc	r0, r0
     3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
     3b0:	7c 00       	.word	0x007c	; ????
     3b2:	00 00       	nop
     3b4:	00 44       	sbci	r16, 0x40	; 64
     3b6:	64 54       	subi	r22, 0x44	; 68
     3b8:	4c 44       	sbci	r20, 0x4C	; 76
     3ba:	00 00       	nop
     3bc:	00 08       	sbc	r0, r0
     3be:	36 41       	sbci	r19, 0x16	; 22
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 00       	nop
     3c6:	7f 00       	.word	0x007f	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	00 41       	sbci	r16, 0x10	; 16
     3ce:	36 08       	sbc	r3, r6
     3d0:	00 00       	nop
     3d2:	00 00       	nop
     3d4:	00 02       	muls	r16, r16
     3d6:	01 01       	movw	r0, r2
     3d8:	02 01       	movw	r0, r4
     3da:	00 00       	nop
     3dc:	00 02       	muls	r16, r16
     3de:	05 05       	cpc	r16, r5
     3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d1 e2       	ldi	r29, 0x21	; 33
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
     3f4:	12 e0       	ldi	r17, 0x02	; 2
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	e8 e4       	ldi	r30, 0x48	; 72
     3fc:	f5 e1       	ldi	r31, 0x15	; 21
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0b bf       	out	0x3b, r16	; 59
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	07 90       	elpm	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	a2 35       	cpi	r26, 0x52	; 82
     40a:	b1 07       	cpc	r27, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	a2 e5       	ldi	r26, 0x52	; 82
     412:	b2 e0       	ldi	r27, 0x02	; 2
     414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
     416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
     418:	a6 35       	cpi	r26, 0x56	; 86
     41a:	b2 07       	cpc	r27, r18
     41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
     41e:	f5 d2       	rcall	.+1514   	; 0xa0a <main>
     420:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <_exit>

00000424 <__bad_interrupt>:
     424:	ed cd       	rjmp	.-1062   	; 0x0 <__vectors>

00000426 <clock_init>:
#include <avr/interrupt.h>
#include "clock.h"


int clock_init(){
	CLOCK.second = 0;
     426:	e6 e0       	ldi	r30, 0x06	; 6
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	17 82       	std	Z+7, r1	; 0x07
     42c:	16 82       	std	Z+6, r1	; 0x06
	CLOCK.minute = 0;
     42e:	11 86       	std	Z+9, r1	; 0x09
     430:	10 86       	std	Z+8, r1	; 0x08
	CLOCK.hour = 0;
     432:	13 86       	std	Z+11, r1	; 0x0b
     434:	12 86       	std	Z+10, r1	; 0x0a
	CLOCK.counter = 0;
     436:	11 82       	std	Z+1, r1	; 0x01
     438:	10 82       	st	Z, r1
	CLOCK.interruptFlag = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	93 83       	std	Z+3, r25	; 0x03
     440:	82 83       	std	Z+2, r24	; 0x02
	CLOCK.clock_makeTimeStr();
     442:	02 88       	ldd	r0, Z+18	; 0x12
     444:	f3 89       	ldd	r31, Z+19	; 0x13
     446:	e0 2d       	mov	r30, r0
     448:	19 95       	eicall
	return 1;
}
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 95       	ret

00000450 <clock_increment>:

int clock_increment(){
	if(CLOCK.second == 59){
     450:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <CLOCK+0x6>
     454:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <CLOCK+0x7>
     458:	8b 33       	cpi	r24, 0x3B	; 59
     45a:	91 05       	cpc	r25, r1
     45c:	39 f5       	brne	.+78     	; 0x4ac <clock_increment+0x5c>
		if(CLOCK.minute == 59){
     45e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CLOCK+0x8>
     462:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CLOCK+0x9>
     466:	8b 33       	cpi	r24, 0x3B	; 59
     468:	91 05       	cpc	r25, r1
     46a:	b1 f4       	brne	.+44     	; 0x498 <clock_increment+0x48>
			if(CLOCK.hour == 23){
     46c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <CLOCK+0xa>
     470:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <CLOCK+0xb>
     474:	87 31       	cpi	r24, 0x17	; 23
     476:	91 05       	cpc	r25, r1
     478:	29 f4       	brne	.+10     	; 0x484 <clock_increment+0x34>
				CLOCK.hour = 0;
     47a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CLOCK+0xb>
     47e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <CLOCK+0xa>
     482:	05 c0       	rjmp	.+10     	; 0x48e <clock_increment+0x3e>
			}
			else{
				CLOCK.hour += 1;
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <CLOCK+0xb>
     48a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <CLOCK+0xa>
			}
			CLOCK.minute = 0;
     48e:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <CLOCK+0x9>
     492:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <CLOCK+0x8>
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <clock_increment+0x52>
		}
		else{
			CLOCK.minute += 1;
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <CLOCK+0x9>
     49e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CLOCK+0x8>
		}
		CLOCK.second = 0;
     4a2:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <CLOCK+0x7>
     4a6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <CLOCK+0x6>
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <clock_increment+0x66>
	}
	else{
		CLOCK.second += 1;
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <CLOCK+0x7>
     4b2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <CLOCK+0x6>
	}
	CLOCK.clock_makeTimeStr();
     4b6:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <CLOCK+0x12>
     4ba:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <CLOCK+0x13>
     4be:	19 95       	eicall
	return 1;
}
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	08 95       	ret

000004c6 <initTimer0>:
	CLOCK.timeStr[9] = '\r';
	return 1;
}

int initTimer0(){
	TCCR0A = (1<<WGM01);	     //Sets mode to CTC
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);		//Sets prescaler to 1024
     4ca:	93 e0       	ldi	r25, 0x03	; 3
     4cc:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0xF9;				//Sets compare value to 249
     4ce:	99 ef       	ldi	r25, 0xF9	; 249
     4d0:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0xF9;
     4d2:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
     4d4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
     4d8:	85 bb       	out	0x15, r24	; 21
	return 1;
};
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	08 95       	ret

000004e0 <clock_enableTimerInterrupt>:
	TIMSK4 = (1<<OCIE4A);
	TIFR4 = (1<<OCF4A);
	return 1;
};*/

int clock_enableTimerInterrupt(int timerId){
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	2a 97       	sbiw	r28, 0x0a	; 10
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
	sei();
     4f4:	78 94       	sei
	int (*clock_interruptInitFuncs[5])() = {initTimer0/*, initTimer1, initTimer2, initTimer3, initTimer4*/};
     4f6:	fe 01       	movw	r30, r28
     4f8:	31 96       	adiw	r30, 0x01	; 1
     4fa:	2a e0       	ldi	r18, 0x0A	; 10
     4fc:	df 01       	movw	r26, r30
     4fe:	1d 92       	st	X+, r1
     500:	2a 95       	dec	r18
     502:	e9 f7       	brne	.-6      	; 0x4fe <clock_enableTimerInterrupt+0x1e>
     504:	23 e6       	ldi	r18, 0x63	; 99
     506:	32 e0       	ldi	r19, 0x02	; 2
     508:	3a 83       	std	Y+2, r19	; 0x02
     50a:	29 83       	std	Y+1, r18	; 0x01
	(*clock_interruptInitFuncs[timerId])();
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	e8 0f       	add	r30, r24
     512:	f9 1f       	adc	r31, r25
     514:	01 90       	ld	r0, Z+
     516:	f0 81       	ld	r31, Z
     518:	e0 2d       	mov	r30, r0
     51a:	19 95       	eicall
	return 1;
}
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	2a 96       	adiw	r28, 0x0a	; 10
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <clock_makeTimeStr>:
	}
	CLOCK.clock_makeTimeStr();
	return 1;
}

int clock_makeTimeStr(){
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
	if(CLOCK.timeStr == NULL){
     536:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <CLOCK+0x4>
     53a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <CLOCK+0x5>
     53e:	89 2b       	or	r24, r25
     540:	49 f4       	brne	.+18     	; 0x554 <clock_makeTimeStr+0x22>
		CLOCK.timeStr = (char*)calloc(10, sizeof(char));
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	8a e0       	ldi	r24, 0x0A	; 10
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	95 d6       	rcall	.+3370   	; 0x1276 <calloc>
     54c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <CLOCK+0x5>
     550:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <CLOCK+0x4>
	}
	char tempHour[2];
	char tempMinute[2];
	char tempSecond[2];
	if(CLOCK.hour >= 10){
     554:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <CLOCK+0xa>
     558:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <CLOCK+0xb>
     55c:	8a 30       	cpi	r24, 0x0A	; 10
     55e:	91 05       	cpc	r25, r1
     560:	64 f0       	brlt	.+24     	; 0x57a <clock_makeTimeStr+0x48>
		tempHour[1] = CLOCK.hour%10 + '0';
     562:	2a e0       	ldi	r18, 0x0A	; 10
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	b9 01       	movw	r22, r18
     568:	3d d6       	rcall	.+3194   	; 0x11e4 <__divmodhi4>
     56a:	40 e3       	ldi	r20, 0x30	; 48
     56c:	48 0f       	add	r20, r24
		tempHour[0] = (CLOCK.hour/10)%10 + '0';
     56e:	cb 01       	movw	r24, r22
     570:	b9 01       	movw	r22, r18
     572:	38 d6       	rcall	.+3184   	; 0x11e4 <__divmodhi4>
     574:	d0 e3       	ldi	r29, 0x30	; 48
     576:	d8 0f       	add	r29, r24
     578:	06 c0       	rjmp	.+12     	; 0x586 <clock_makeTimeStr+0x54>
	} else{
		tempHour[1] = CLOCK.hour%10 + '0';
     57a:	6a e0       	ldi	r22, 0x0A	; 10
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	32 d6       	rcall	.+3172   	; 0x11e4 <__divmodhi4>
     580:	40 e3       	ldi	r20, 0x30	; 48
     582:	48 0f       	add	r20, r24
     584:	d0 e3       	ldi	r29, 0x30	; 48
		tempHour[0] = '0';
     586:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CLOCK+0x8>
	}
	if(CLOCK.minute >= 10){
     58a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CLOCK+0x9>
     58e:	8a 30       	cpi	r24, 0x0A	; 10
     590:	91 05       	cpc	r25, r1
     592:	64 f0       	brlt	.+24     	; 0x5ac <clock_makeTimeStr+0x7a>
		tempMinute[1] = CLOCK.minute%10 + '0';
     594:	ea e0       	ldi	r30, 0x0A	; 10
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	bf 01       	movw	r22, r30
     59a:	24 d6       	rcall	.+3144   	; 0x11e4 <__divmodhi4>
     59c:	30 e3       	ldi	r19, 0x30	; 48
     59e:	38 0f       	add	r19, r24
		tempMinute[0] = (CLOCK.minute/10)%10 + '0';
     5a0:	cb 01       	movw	r24, r22
     5a2:	bf 01       	movw	r22, r30
     5a4:	1f d6       	rcall	.+3134   	; 0x11e4 <__divmodhi4>
     5a6:	c0 e3       	ldi	r28, 0x30	; 48
     5a8:	c8 0f       	add	r28, r24
     5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <clock_makeTimeStr+0x86>
		} else{
		tempMinute[1] = CLOCK.minute%10 + '0';
     5ac:	6a e0       	ldi	r22, 0x0A	; 10
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	19 d6       	rcall	.+3122   	; 0x11e4 <__divmodhi4>
     5b2:	30 e3       	ldi	r19, 0x30	; 48
     5b4:	38 0f       	add	r19, r24
     5b6:	c0 e3       	ldi	r28, 0x30	; 48
		tempMinute[0] = '0';
     5b8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <CLOCK+0x6>
	}
	if(CLOCK.second >= 10){
     5bc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <CLOCK+0x7>
     5c0:	8a 30       	cpi	r24, 0x0A	; 10
     5c2:	91 05       	cpc	r25, r1
     5c4:	5c f0       	brlt	.+22     	; 0x5dc <clock_makeTimeStr+0xaa>
		tempSecond[1] = CLOCK.second%10 + '0';
     5c6:	ea e0       	ldi	r30, 0x0A	; 10
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	bf 01       	movw	r22, r30
     5cc:	0b d6       	rcall	.+3094   	; 0x11e4 <__divmodhi4>
     5ce:	20 e3       	ldi	r18, 0x30	; 48
     5d0:	28 0f       	add	r18, r24
		tempSecond[0] = (CLOCK.second/10)%10 + '0';
     5d2:	cb 01       	movw	r24, r22
     5d4:	bf 01       	movw	r22, r30
     5d6:	06 d6       	rcall	.+3084   	; 0x11e4 <__divmodhi4>
     5d8:	80 5d       	subi	r24, 0xD0	; 208
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <clock_makeTimeStr+0xb6>
     5dc:	6a e0       	ldi	r22, 0x0A	; 10
		} else{
		tempSecond[1] = CLOCK.second%10 + '0';
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	01 d6       	rcall	.+3074   	; 0x11e4 <__divmodhi4>
     5e2:	20 e3       	ldi	r18, 0x30	; 48
     5e4:	28 0f       	add	r18, r24
     5e6:	80 e3       	ldi	r24, 0x30	; 48
     5e8:	e6 e0       	ldi	r30, 0x06	; 6
		tempSecond[0] = '0';
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
	}
	CLOCK.timeStr[0] = tempHour[0];
     5ec:	a4 81       	ldd	r26, Z+4	; 0x04
     5ee:	b5 81       	ldd	r27, Z+5	; 0x05
     5f0:	dc 93       	st	X, r29
     5f2:	a4 81       	ldd	r26, Z+4	; 0x04
     5f4:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[1] = tempHour[1];
     5f6:	11 96       	adiw	r26, 0x01	; 1
     5f8:	4c 93       	st	X, r20
     5fa:	a4 81       	ldd	r26, Z+4	; 0x04
     5fc:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[2] = ':';
     5fe:	9a e3       	ldi	r25, 0x3A	; 58
     600:	12 96       	adiw	r26, 0x02	; 2
     602:	9c 93       	st	X, r25
     604:	a4 81       	ldd	r26, Z+4	; 0x04
     606:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[3] = tempMinute[0];
     608:	13 96       	adiw	r26, 0x03	; 3
     60a:	cc 93       	st	X, r28
     60c:	a4 81       	ldd	r26, Z+4	; 0x04
     60e:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[4] = tempMinute[1];
     610:	14 96       	adiw	r26, 0x04	; 4
     612:	3c 93       	st	X, r19
     614:	a4 81       	ldd	r26, Z+4	; 0x04
     616:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[5] = ':';
     618:	15 96       	adiw	r26, 0x05	; 5
     61a:	9c 93       	st	X, r25
     61c:	04 80       	ldd	r0, Z+4	; 0x04
     61e:	f5 81       	ldd	r31, Z+5	; 0x05
	CLOCK.timeStr[6] = tempSecond[0];
     620:	e0 2d       	mov	r30, r0
     622:	86 83       	std	Z+6, r24	; 0x06
     624:	27 83       	std	Z+7, r18	; 0x07
     626:	8a e0       	ldi	r24, 0x0A	; 10
	CLOCK.timeStr[7] = tempSecond[1];
     628:	80 87       	std	Z+8, r24	; 0x08
	CLOCK.timeStr[8] = '\n';
     62a:	8d e0       	ldi	r24, 0x0D	; 13
     62c:	81 87       	std	Z+9, r24	; 0x09
	CLOCK.timeStr[9] = '\r';
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <clock_updateClock>:
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
	int (*clock_interruptInitFuncs[5])() = {initTimer0/*, initTimer1, initTimer2, initTimer3, initTimer4*/};
	(*clock_interruptInitFuncs[timerId])();
	return 1;
}

int clock_updateClock(char* clockVal){
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	1f 92       	push	r1
     646:	1f 92       	push	r1
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	8c 01       	movw	r16, r24
	char buffer[2];
	buffer[0] = clockVal[0];
     64e:	fc 01       	movw	r30, r24
     650:	80 81       	ld	r24, Z
     652:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[1];
     654:	81 81       	ldd	r24, Z+1	; 0x01
     656:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.hour = atoi(buffer);
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	47 d7       	rcall	.+3726   	; 0x14ec <atoi>
     65e:	0f 2e       	mov	r0, r31
     660:	f6 e0       	ldi	r31, 0x06	; 6
     662:	ef 2e       	mov	r14, r31
     664:	f2 e0       	ldi	r31, 0x02	; 2
     666:	ff 2e       	mov	r15, r31
     668:	f0 2d       	mov	r31, r0
     66a:	f7 01       	movw	r30, r14
     66c:	93 87       	std	Z+11, r25	; 0x0b
     66e:	82 87       	std	Z+10, r24	; 0x0a
	buffer[0] = clockVal[3];
     670:	f8 01       	movw	r30, r16
     672:	83 81       	ldd	r24, Z+3	; 0x03
     674:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[4];
     676:	84 81       	ldd	r24, Z+4	; 0x04
     678:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.minute = atoi(buffer);
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	36 d7       	rcall	.+3692   	; 0x14ec <atoi>
     680:	f7 01       	movw	r30, r14
     682:	91 87       	std	Z+9, r25	; 0x09
     684:	80 87       	std	Z+8, r24	; 0x08
	buffer[0] = clockVal[6];
     686:	f8 01       	movw	r30, r16
     688:	86 81       	ldd	r24, Z+6	; 0x06
     68a:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[7];
     68c:	87 81       	ldd	r24, Z+7	; 0x07
     68e:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.second = atoi(buffer);
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	2b d7       	rcall	.+3670   	; 0x14ec <atoi>
     696:	f7 01       	movw	r30, r14
     698:	97 83       	std	Z+7, r25	; 0x07
     69a:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	08 95       	ret

000006b2 <__vector_21>:
	.clock_makeTimeStr = clock_makeTimeStr,
	.clock_updateClock = clock_updateClock
};


ISR(TIMER0_COMPA_vect){
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	0b b6       	in	r0, 0x3b	; 59
     6be:	0f 92       	push	r0
     6c0:	2f 93       	push	r18
     6c2:	3f 93       	push	r19
     6c4:	4f 93       	push	r20
     6c6:	5f 93       	push	r21
     6c8:	6f 93       	push	r22
     6ca:	7f 93       	push	r23
     6cc:	8f 93       	push	r24
     6ce:	9f 93       	push	r25
     6d0:	af 93       	push	r26
     6d2:	bf 93       	push	r27
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
	CLOCK.counter += 1;
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	f2 e0       	ldi	r31, 0x02	; 2
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	91 83       	std	Z+1, r25	; 0x01
     6e8:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     6ea:	80 81       	ld	r24, Z
     6ec:	91 81       	ldd	r25, Z+1	; 0x01
     6ee:	88 3e       	cpi	r24, 0xE8	; 232
     6f0:	93 40       	sbci	r25, 0x03	; 3
     6f2:	59 f4       	brne	.+22     	; 0x70a <__vector_21+0x58>
		CLOCK.clock_increment();
     6f4:	ef 01       	movw	r28, r30
     6f6:	00 88       	ldd	r0, Z+16	; 0x10
     6f8:	f1 89       	ldd	r31, Z+17	; 0x11
     6fa:	e0 2d       	mov	r30, r0
     6fc:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	9b 83       	std	Y+3, r25	; 0x03
     704:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     706:	19 82       	std	Y+1, r1	; 0x01
     708:	18 82       	st	Y, r1
	}
}
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	7f 91       	pop	r23
     71c:	6f 91       	pop	r22
     71e:	5f 91       	pop	r21
     720:	4f 91       	pop	r20
     722:	3f 91       	pop	r19
     724:	2f 91       	pop	r18
     726:	0f 90       	pop	r0
     728:	0b be       	out	0x3b, r0	; 59
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <__vector_17>:

ISR(TIMER1_COMPA_vect){
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	0b b6       	in	r0, 0x3b	; 59
     740:	0f 92       	push	r0
     742:	2f 93       	push	r18
     744:	3f 93       	push	r19
     746:	4f 93       	push	r20
     748:	5f 93       	push	r21
     74a:	6f 93       	push	r22
     74c:	7f 93       	push	r23
     74e:	8f 93       	push	r24
     750:	9f 93       	push	r25
     752:	af 93       	push	r26
     754:	bf 93       	push	r27
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
	CLOCK.counter += 1;
     75e:	e6 e0       	ldi	r30, 0x06	; 6
     760:	f2 e0       	ldi	r31, 0x02	; 2
     762:	80 81       	ld	r24, Z
     764:	91 81       	ldd	r25, Z+1	; 0x01
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	91 83       	std	Z+1, r25	; 0x01
     76a:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	88 3e       	cpi	r24, 0xE8	; 232
     772:	93 40       	sbci	r25, 0x03	; 3
     774:	59 f4       	brne	.+22     	; 0x78c <__vector_17+0x58>
		CLOCK.clock_increment();
     776:	ef 01       	movw	r28, r30
     778:	00 88       	ldd	r0, Z+16	; 0x10
     77a:	f1 89       	ldd	r31, Z+17	; 0x11
     77c:	e0 2d       	mov	r30, r0
     77e:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	9b 83       	std	Y+3, r25	; 0x03
     786:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     788:	19 82       	std	Y+1, r1	; 0x01
     78a:	18 82       	st	Y, r1
	}
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	bf 91       	pop	r27
     796:	af 91       	pop	r26
     798:	9f 91       	pop	r25
     79a:	8f 91       	pop	r24
     79c:	7f 91       	pop	r23
     79e:	6f 91       	pop	r22
     7a0:	5f 91       	pop	r21
     7a2:	4f 91       	pop	r20
     7a4:	3f 91       	pop	r19
     7a6:	2f 91       	pop	r18
     7a8:	0f 90       	pop	r0
     7aa:	0b be       	out	0x3b, r0	; 59
     7ac:	0f 90       	pop	r0
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	0f 90       	pop	r0
     7b2:	1f 90       	pop	r1
     7b4:	18 95       	reti

000007b6 <__vector_13>:

ISR(TIMER2_COMPA_vect){
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	0b b6       	in	r0, 0x3b	; 59
     7c2:	0f 92       	push	r0
     7c4:	2f 93       	push	r18
     7c6:	3f 93       	push	r19
     7c8:	4f 93       	push	r20
     7ca:	5f 93       	push	r21
     7cc:	6f 93       	push	r22
     7ce:	7f 93       	push	r23
     7d0:	8f 93       	push	r24
     7d2:	9f 93       	push	r25
     7d4:	af 93       	push	r26
     7d6:	bf 93       	push	r27
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
	CLOCK.counter += 1;
     7e0:	e6 e0       	ldi	r30, 0x06	; 6
     7e2:	f2 e0       	ldi	r31, 0x02	; 2
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	91 83       	std	Z+1, r25	; 0x01
     7ec:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	88 3e       	cpi	r24, 0xE8	; 232
     7f4:	93 40       	sbci	r25, 0x03	; 3
     7f6:	59 f4       	brne	.+22     	; 0x80e <__vector_13+0x58>
		CLOCK.clock_increment();
     7f8:	ef 01       	movw	r28, r30
     7fa:	00 88       	ldd	r0, Z+16	; 0x10
     7fc:	f1 89       	ldd	r31, Z+17	; 0x11
     7fe:	e0 2d       	mov	r30, r0
     800:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	9b 83       	std	Y+3, r25	; 0x03
     808:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     80a:	19 82       	std	Y+1, r1	; 0x01
     80c:	18 82       	st	Y, r1
	}
}
     80e:	ff 91       	pop	r31
     810:	ef 91       	pop	r30
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0b be       	out	0x3b, r0	; 59
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <__vector_32>:

ISR(TIMER3_COMPA_vect){
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1
     842:	0b b6       	in	r0, 0x3b	; 59
     844:	0f 92       	push	r0
     846:	2f 93       	push	r18
     848:	3f 93       	push	r19
     84a:	4f 93       	push	r20
     84c:	5f 93       	push	r21
     84e:	6f 93       	push	r22
     850:	7f 93       	push	r23
     852:	8f 93       	push	r24
     854:	9f 93       	push	r25
     856:	af 93       	push	r26
     858:	bf 93       	push	r27
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
	CLOCK.counter += 1;
     862:	e6 e0       	ldi	r30, 0x06	; 6
     864:	f2 e0       	ldi	r31, 0x02	; 2
     866:	80 81       	ld	r24, Z
     868:	91 81       	ldd	r25, Z+1	; 0x01
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	91 83       	std	Z+1, r25	; 0x01
     86e:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	88 3e       	cpi	r24, 0xE8	; 232
     876:	93 40       	sbci	r25, 0x03	; 3
     878:	59 f4       	brne	.+22     	; 0x890 <__vector_32+0x58>
		CLOCK.clock_increment();
     87a:	ef 01       	movw	r28, r30
     87c:	00 88       	ldd	r0, Z+16	; 0x10
     87e:	f1 89       	ldd	r31, Z+17	; 0x11
     880:	e0 2d       	mov	r30, r0
     882:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     88c:	19 82       	std	Y+1, r1	; 0x01
     88e:	18 82       	st	Y, r1
	}
}
     890:	ff 91       	pop	r31
     892:	ef 91       	pop	r30
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	bf 91       	pop	r27
     89a:	af 91       	pop	r26
     89c:	9f 91       	pop	r25
     89e:	8f 91       	pop	r24
     8a0:	7f 91       	pop	r23
     8a2:	6f 91       	pop	r22
     8a4:	5f 91       	pop	r21
     8a6:	4f 91       	pop	r20
     8a8:	3f 91       	pop	r19
     8aa:	2f 91       	pop	r18
     8ac:	0f 90       	pop	r0
     8ae:	0b be       	out	0x3b, r0	; 59
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <__vector_42>:

ISR(TIMER4_COMPA_vect){
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	0b b6       	in	r0, 0x3b	; 59
     8c6:	0f 92       	push	r0
     8c8:	2f 93       	push	r18
     8ca:	3f 93       	push	r19
     8cc:	4f 93       	push	r20
     8ce:	5f 93       	push	r21
     8d0:	6f 93       	push	r22
     8d2:	7f 93       	push	r23
     8d4:	8f 93       	push	r24
     8d6:	9f 93       	push	r25
     8d8:	af 93       	push	r26
     8da:	bf 93       	push	r27
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	ef 93       	push	r30
     8e2:	ff 93       	push	r31
	CLOCK.counter += 1;
     8e4:	e6 e0       	ldi	r30, 0x06	; 6
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     8f2:	80 81       	ld	r24, Z
     8f4:	91 81       	ldd	r25, Z+1	; 0x01
     8f6:	88 3e       	cpi	r24, 0xE8	; 232
     8f8:	93 40       	sbci	r25, 0x03	; 3
     8fa:	59 f4       	brne	.+22     	; 0x912 <__vector_42+0x58>
		CLOCK.clock_increment();
     8fc:	ef 01       	movw	r28, r30
     8fe:	00 88       	ldd	r0, Z+16	; 0x10
     900:	f1 89       	ldd	r31, Z+17	; 0x11
     902:	e0 2d       	mov	r30, r0
     904:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	9b 83       	std	Y+3, r25	; 0x03
     90c:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     90e:	19 82       	std	Y+1, r1	; 0x01
     910:	18 82       	st	Y, r1
	}
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	bf 91       	pop	r27
     91c:	af 91       	pop	r26
     91e:	9f 91       	pop	r25
     920:	8f 91       	pop	r24
     922:	7f 91       	pop	r23
     924:	6f 91       	pop	r22
     926:	5f 91       	pop	r21
     928:	4f 91       	pop	r20
     92a:	3f 91       	pop	r19
     92c:	2f 91       	pop	r18
     92e:	0f 90       	pop	r0
     930:	0b be       	out	0x3b, r0	; 59
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
     93c:	81 b1       	in	r24, 0x01	; 1
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	81 b9       	out	0x01, r24	; 1
     942:	82 b1       	in	r24, 0x02	; 2
     944:	81 60       	ori	r24, 0x01	; 1
     946:	82 b9       	out	0x02, r24	; 2
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	83 ed       	ldi	r24, 0xD3	; 211
     94c:	90 e3       	ldi	r25, 0x30	; 48
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	80 40       	sbci	r24, 0x00	; 0
     952:	90 40       	sbci	r25, 0x00	; 0
     954:	e1 f7       	brne	.-8      	; 0x94e <I2C_Init+0x12>
     956:	00 c0       	rjmp	.+0      	; 0x958 <I2C_Init+0x1c>
     958:	00 00       	nop
     95a:	82 e1       	ldi	r24, 0x12	; 18
     95c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     960:	e9 eb       	ldi	r30, 0xB9	; 185
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	8c 7f       	andi	r24, 0xFC	; 252
     968:	80 83       	st	Z, r24
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     970:	08 95       	ret

00000972 <I2C_Start>:
     972:	94 ea       	ldi	r25, 0xA4	; 164
     974:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     978:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     97c:	99 23       	and	r25, r25
     97e:	e4 f7       	brge	.-8      	; 0x978 <I2C_Start+0x6>
     980:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     984:	98 7f       	andi	r25, 0xF8	; 248
     986:	98 30       	cpi	r25, 0x08	; 8
     988:	91 f4       	brne	.+36     	; 0x9ae <I2C_Start+0x3c>
     98a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     98e:	84 e8       	ldi	r24, 0x84	; 132
     990:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     994:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     998:	88 23       	and	r24, r24
     99a:	e4 f7       	brge	.-8      	; 0x994 <I2C_Start+0x22>
     99c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     9a0:	88 7f       	andi	r24, 0xF8	; 248
     9a2:	88 31       	cpi	r24, 0x18	; 24
     9a4:	31 f0       	breq	.+12     	; 0x9b2 <I2C_Start+0x40>
     9a6:	80 32       	cpi	r24, 0x20	; 32
     9a8:	31 f4       	brne	.+12     	; 0x9b6 <I2C_Start+0x44>
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	08 95       	ret
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	08 95       	ret
     9b6:	83 e0       	ldi	r24, 0x03	; 3
     9b8:	08 95       	ret

000009ba <I2C_Write>:
     9ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     9be:	84 e8       	ldi	r24, 0x84	; 132
     9c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9c8:	88 23       	and	r24, r24
     9ca:	e4 f7       	brge	.-8      	; 0x9c4 <I2C_Write+0xa>
     9cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     9d0:	88 7f       	andi	r24, 0xF8	; 248
     9d2:	88 32       	cpi	r24, 0x28	; 40
     9d4:	21 f0       	breq	.+8      	; 0x9de <I2C_Write+0x24>
     9d6:	80 33       	cpi	r24, 0x30	; 48
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <I2C_Write+0x28>
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	08 95       	ret
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	08 95       	ret
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	08 95       	ret

000009e6 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     9e6:	84 e9       	ldi	r24, 0x94	; 148
     9e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     9ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9f0:	84 fd       	sbrc	r24, 4
     9f2:	fc cf       	rjmp	.-8      	; 0x9ec <I2C_Stop+0x6>
     9f4:	08 95       	ret

000009f6 <initExternalInterrupt>:
#include "UARTLib.h"
#include "clock.h"
#include <util/delay.h>

void initExternalInterrupt(){
	DDRE = 0x00; //E4
     9f6:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0xFF;
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	8e b9       	out	0x0e, r24	; 14
	EICRB = 0b00000010;
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
	EIMSK = 0b00010000;
     a02:	80 e1       	ldi	r24, 0x10	; 16
     a04:	8d bb       	out	0x1d, r24	; 29
	sei();
     a06:	78 94       	sei
     a08:	08 95       	ret

00000a0a <main>:
}

int main(void){
	_i2c_address = 0X78;
     a0a:	88 e7       	ldi	r24, 0x78	; 120
     a0c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_i2c_address>
	I2C_Init();
     a10:	95 df       	rcall	.-214    	; 0x93c <I2C_Init>
	InitializeDisplay();
     a12:	80 d0       	rcall	.+256    	; 0xb14 <InitializeDisplay>
	print_fonts();
     a14:	0c d1       	rcall	.+536    	; 0xc2e <print_fonts>
     a16:	d0 d0       	rcall	.+416    	; 0xbb8 <clear_display>
	clear_display();
     a18:	c6 e0       	ldi	r28, 0x06	; 6
     a1a:	d2 e0       	ldi	r29, 0x02	; 2
	
	CLOCK.clock_init();
     a1c:	8e 85       	ldd	r24, Y+14	; 0x0e
     a1e:	9f 85       	ldd	r25, Y+15	; 0x0f
     a20:	fc 01       	movw	r30, r24
     a22:	19 95       	eicall
     a24:	ec 85       	ldd	r30, Y+12	; 0x0c
     a26:	fd 85       	ldd	r31, Y+13	; 0x0d
	CLOCK.clock_enableTimerInterrupt(0);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	19 95       	eicall
     a2e:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <UART+0xd>
	UART.UART_init(ASYNC, 19200, 1);
     a32:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <UART+0xe>
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	7b e4       	ldi	r23, 0x4B	; 75
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	19 95       	eicall
     a44:	d8 df       	rcall	.-80     	; 0x9f6 <initExternalInterrupt>
	initExternalInterrupt();
     a46:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <CLOCK+0x12>
	
    while (1){
		CLOCK.clock_makeTimeStr();
     a4a:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <CLOCK+0x13>
     a4e:	19 95       	eicall
     a50:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <UART+0x11>
		UART.UART_transmitStr(/*CLOCK.timeStr*/"01:10:20", 10);
     a54:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <UART+0x12>
     a58:	6a e0       	ldi	r22, 0x0A	; 10
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	88 e4       	ldi	r24, 0x48	; 72
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	19 95       	eicall
     a62:	c0 e0       	ldi	r28, 0x00	; 0
     a64:	d0 e0       	ldi	r29, 0x00	; 0
		
		for(int i = 0; i < 8; i++){
     a66:	0c c0       	rjmp	.+24     	; 0xa80 <main+0x76>
     a68:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <CLOCK+0x4>
			sendCharXY(CLOCK.timeStr[i], 0, i);
     a6c:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <CLOCK+0x5>
     a70:	ec 0f       	add	r30, r28
     a72:	fd 1f       	adc	r31, r29
     a74:	ae 01       	movw	r20, r28
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	b1 d0       	rcall	.+354    	; 0xbe0 <sendCharXY>
     a7e:	21 96       	adiw	r28, 0x01	; 1
     a80:	c8 30       	cpi	r28, 0x08	; 8
	
    while (1){
		CLOCK.clock_makeTimeStr();
		UART.UART_transmitStr(/*CLOCK.timeStr*/"01:10:20", 10);
		
		for(int i = 0; i < 8; i++){
     a82:	d1 05       	cpc	r29, r1
     a84:	8c f3       	brlt	.-30     	; 0xa68 <main+0x5e>
     a86:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <CLOCK+0x2>
			sendCharXY(CLOCK.timeStr[i], 0, i);
		}
		if(CLOCK.interruptFlag){
     a8a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <CLOCK+0x3>
     a8e:	89 2b       	or	r24, r25
     a90:	d1 f2       	breq	.-76     	; 0xa46 <main+0x3c>
     a92:	92 d0       	rcall	.+292    	; 0xbb8 <clear_display>
			clear_display();
     a94:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <CLOCK+0x3>
			CLOCK.interruptFlag = 0;
     a98:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <CLOCK+0x2>
     a9c:	d4 cf       	rjmp	.-88     	; 0xa46 <main+0x3c>

00000a9e <__vector_5>:
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
		}
    }
}

ISR(INT4_vect){
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	0b b6       	in	r0, 0x3b	; 59
     aaa:	0f 92       	push	r0
     aac:	2f 93       	push	r18
     aae:	3f 93       	push	r19
     ab0:	4f 93       	push	r20
     ab2:	5f 93       	push	r21
     ab4:	6f 93       	push	r22
     ab6:	7f 93       	push	r23
     ab8:	8f 93       	push	r24
     aba:	9f 93       	push	r25
     abc:	af 93       	push	r26
     abe:	bf 93       	push	r27
     ac0:	ef 93       	push	r30
     ac2:	ff 93       	push	r31
	CLOCK.clock_updateClock(UART.timeVal);
     ac4:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <CLOCK+0x14>
     ac8:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <CLOCK+0x15>
     acc:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <UART+0x8>
     ad0:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <UART+0x9>
     ad4:	19 95       	eicall
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	bf 91       	pop	r27
     adc:	af 91       	pop	r26
     ade:	9f 91       	pop	r25
     ae0:	8f 91       	pop	r24
     ae2:	7f 91       	pop	r23
     ae4:	6f 91       	pop	r22
     ae6:	5f 91       	pop	r21
     ae8:	4f 91       	pop	r20
     aea:	3f 91       	pop	r19
     aec:	2f 91       	pop	r18
     aee:	0f 90       	pop	r0
     af0:	0b be       	out	0x3b, r0	; 59
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti

00000afc <ssd1306_command>:

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
     afc:	cf 93       	push	r28
     afe:	c8 2f       	mov	r28, r24
     b00:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_i2c_address>
     b04:	36 df       	rcall	.-404    	; 0x972 <I2C_Start>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	58 df       	rcall	.-336    	; 0x9ba <I2C_Write>
     b0a:	8c 2f       	mov	r24, r28
     b0c:	56 df       	rcall	.-340    	; 0x9ba <I2C_Write>
     b0e:	6b df       	rcall	.-298    	; 0x9e6 <I2C_Stop>
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <InitializeDisplay>:
     b14:	8e ea       	ldi	r24, 0xAE	; 174
     b16:	f2 df       	rcall	.-28     	; 0xafc <ssd1306_command>
     b18:	85 ed       	ldi	r24, 0xD5	; 213
     b1a:	f0 df       	rcall	.-32     	; 0xafc <ssd1306_command>
     b1c:	80 e8       	ldi	r24, 0x80	; 128
     b1e:	ee df       	rcall	.-36     	; 0xafc <ssd1306_command>
     b20:	88 ea       	ldi	r24, 0xA8	; 168
     b22:	ec df       	rcall	.-40     	; 0xafc <ssd1306_command>
     b24:	8f e3       	ldi	r24, 0x3F	; 63
     b26:	ea df       	rcall	.-44     	; 0xafc <ssd1306_command>
     b28:	83 ed       	ldi	r24, 0xD3	; 211
     b2a:	e8 df       	rcall	.-48     	; 0xafc <ssd1306_command>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	e6 df       	rcall	.-52     	; 0xafc <ssd1306_command>
     b30:	80 e4       	ldi	r24, 0x40	; 64
     b32:	e4 df       	rcall	.-56     	; 0xafc <ssd1306_command>
     b34:	8d e8       	ldi	r24, 0x8D	; 141
     b36:	e2 df       	rcall	.-60     	; 0xafc <ssd1306_command>
     b38:	84 e1       	ldi	r24, 0x14	; 20
     b3a:	e0 df       	rcall	.-64     	; 0xafc <ssd1306_command>
     b3c:	80 e2       	ldi	r24, 0x20	; 32
     b3e:	de df       	rcall	.-68     	; 0xafc <ssd1306_command>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	dc df       	rcall	.-72     	; 0xafc <ssd1306_command>
     b44:	81 ea       	ldi	r24, 0xA1	; 161
     b46:	da df       	rcall	.-76     	; 0xafc <ssd1306_command>
     b48:	88 ec       	ldi	r24, 0xC8	; 200
     b4a:	d8 df       	rcall	.-80     	; 0xafc <ssd1306_command>
     b4c:	8a ed       	ldi	r24, 0xDA	; 218
     b4e:	d6 df       	rcall	.-84     	; 0xafc <ssd1306_command>
     b50:	82 e1       	ldi	r24, 0x12	; 18
     b52:	d4 df       	rcall	.-88     	; 0xafc <ssd1306_command>
     b54:	81 e8       	ldi	r24, 0x81	; 129
     b56:	d2 df       	rcall	.-92     	; 0xafc <ssd1306_command>
     b58:	8f ec       	ldi	r24, 0xCF	; 207
     b5a:	d0 df       	rcall	.-96     	; 0xafc <ssd1306_command>
     b5c:	89 ed       	ldi	r24, 0xD9	; 217
     b5e:	ce df       	rcall	.-100    	; 0xafc <ssd1306_command>
     b60:	81 ef       	ldi	r24, 0xF1	; 241
     b62:	cc df       	rcall	.-104    	; 0xafc <ssd1306_command>
     b64:	8b ed       	ldi	r24, 0xDB	; 219
     b66:	ca df       	rcall	.-108    	; 0xafc <ssd1306_command>
     b68:	80 e4       	ldi	r24, 0x40	; 64
     b6a:	c8 df       	rcall	.-112    	; 0xafc <ssd1306_command>
     b6c:	84 ea       	ldi	r24, 0xA4	; 164
     b6e:	c6 df       	rcall	.-116    	; 0xafc <ssd1306_command>
     b70:	86 ea       	ldi	r24, 0xA6	; 166
     b72:	c4 df       	rcall	.-120    	; 0xafc <ssd1306_command>
     b74:	8f ea       	ldi	r24, 0xAF	; 175
     b76:	c2 cf       	rjmp	.-124    	; 0xafc <ssd1306_command>
     b78:	08 95       	ret

00000b7a <SendChar>:
     b7a:	cf 93       	push	r28
     b7c:	c8 2f       	mov	r28, r24
     b7e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_i2c_address>
     b82:	f7 de       	rcall	.-530    	; 0x972 <I2C_Start>
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	19 df       	rcall	.-462    	; 0x9ba <I2C_Write>
     b88:	8c 2f       	mov	r24, r28
     b8a:	17 df       	rcall	.-466    	; 0x9ba <I2C_Write>
     b8c:	2c df       	rcall	.-424    	; 0x9e6 <I2C_Stop>
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <setXY>:
     b92:	cf 93       	push	r28
     b94:	c6 2f       	mov	r28, r22
     b96:	80 55       	subi	r24, 0x50	; 80
     b98:	b1 df       	rcall	.-158    	; 0xafc <ssd1306_command>
     b9a:	8c 2f       	mov	r24, r28
     b9c:	88 0f       	add	r24, r24
     b9e:	88 0f       	add	r24, r24
     ba0:	88 0f       	add	r24, r24
     ba2:	88 70       	andi	r24, 0x08	; 8
     ba4:	ab df       	rcall	.-170    	; 0xafc <ssd1306_command>
     ba6:	8c 2f       	mov	r24, r28
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	96 95       	lsr	r25
     bac:	87 95       	ror	r24
     bae:	8f 70       	andi	r24, 0x0F	; 15
     bb0:	80 5f       	subi	r24, 0xF0	; 240
     bb2:	a4 df       	rcall	.-184    	; 0xafc <ssd1306_command>
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <clear_display>:
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
     bbe:	0b c0       	rjmp	.+22     	; 0xbd6 <clear_display+0x1e>
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	8d 2f       	mov	r24, r29
     bc4:	e6 df       	rcall	.-52     	; 0xb92 <setXY>
     bc6:	c0 e0       	ldi	r28, 0x00	; 0
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <clear_display+0x18>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	d6 df       	rcall	.-84     	; 0xb7a <SendChar>
     bce:	cf 5f       	subi	r28, 0xFF	; 255
     bd0:	cc 23       	and	r28, r28
     bd2:	dc f7       	brge	.-10     	; 0xbca <clear_display+0x12>
     bd4:	df 5f       	subi	r29, 0xFF	; 255
     bd6:	d8 30       	cpi	r29, 0x08	; 8
     bd8:	98 f3       	brcs	.-26     	; 0xbc0 <clear_display+0x8>
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <sendCharXY>:
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	18 2f       	mov	r17, r24
     be8:	86 2f       	mov	r24, r22
     bea:	64 2f       	mov	r22, r20
     bec:	d2 df       	rcall	.-92     	; 0xb92 <setXY>
     bee:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_i2c_address>
     bf2:	bf de       	rcall	.-642    	; 0x972 <I2C_Start>
     bf4:	80 e4       	ldi	r24, 0x40	; 64
     bf6:	e1 de       	rcall	.-574    	; 0x9ba <I2C_Write>
     bf8:	c0 e0       	ldi	r28, 0x00	; 0
     bfa:	d0 e0       	ldi	r29, 0x00	; 0
     bfc:	10 c0       	rjmp	.+32     	; 0xc1e <sendCharXY+0x3e>
     bfe:	e1 2f       	mov	r30, r17
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	b0 97       	sbiw	r30, 0x20	; 32
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	ec 51       	subi	r30, 0x1C	; 28
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	84 91       	lpm	r24, Z
     c1a:	cf de       	rcall	.-610    	; 0x9ba <I2C_Write>
     c1c:	21 96       	adiw	r28, 0x01	; 1
     c1e:	c8 30       	cpi	r28, 0x08	; 8
     c20:	d1 05       	cpc	r29, r1
     c22:	6c f3       	brlt	.-38     	; 0xbfe <sendCharXY+0x1e>
     c24:	e0 de       	rcall	.-576    	; 0x9e6 <I2C_Stop>
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	08 95       	ret

00000c2e <print_fonts>:
void print_fonts(){
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
	clear_display();
     c3c:	bd df       	rcall	.-134    	; 0xbb8 <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
     c3e:	e1 2c       	mov	r14, r1
     c40:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
     c42:	68 94       	set
     c44:	dd 24       	eor	r13, r13
     c46:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
     c48:	27 c0       	rjmp	.+78     	; 0xc98 <print_fonts+0x6a>
		setXY(k,0);
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	8e 2d       	mov	r24, r14
     c4e:	a1 df       	rcall	.-190    	; 0xb92 <setXY>

		for (int j=0;j<16;j++)
     c50:	00 e0       	ldi	r16, 0x00	; 0
     c52:	10 e0       	ldi	r17, 0x00	; 0
     c54:	19 c0       	rjmp	.+50     	; 0xc88 <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
     c56:	f8 01       	movw	r30, r16
     c58:	ed 0d       	add	r30, r13
     c5a:	f1 1d       	adc	r31, r1
     c5c:	b0 97       	sbiw	r30, 0x20	; 32
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	ee 0f       	add	r30, r30
     c64:	ff 1f       	adc	r31, r31
     c66:	ee 0f       	add	r30, r30
     c68:	ff 1f       	adc	r31, r31
     c6a:	ec 51       	subi	r30, 0x1C	; 28
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	ec 0f       	add	r30, r28
     c70:	fd 1f       	adc	r31, r29
     c72:	84 91       	lpm	r24, Z
     c74:	82 df       	rcall	.-252    	; 0xb7a <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
     c76:	21 96       	adiw	r28, 0x01	; 1
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <print_fonts+0x50>
     c7a:	c0 e0       	ldi	r28, 0x00	; 0
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
     c7e:	c8 30       	cpi	r28, 0x08	; 8
     c80:	d1 05       	cpc	r29, r1
     c82:	4c f3       	brlt	.-46     	; 0xc56 <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
     c84:	0f 5f       	subi	r16, 0xFF	; 255
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	00 31       	cpi	r16, 0x10	; 16
     c8a:	11 05       	cpc	r17, r1
     c8c:	b4 f3       	brlt	.-20     	; 0xc7a <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
     c8e:	80 e1       	ldi	r24, 0x10	; 16
     c90:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	e8 1a       	sub	r14, r24
     c96:	f8 0a       	sbc	r15, r24
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	e8 16       	cp	r14, r24
     c9c:	f1 04       	cpc	r15, r1
     c9e:	ac f2       	brlt	.-86     	; 0xc4a <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	08 95       	ret

00000cb0 <UART_initASYNC0>:
#include "I2C.h"  //include library for i2c driver
#include "ssd1306.h" //include display driver
#include <util/delay.h>

int UART_initASYNC0(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     cb0:	82 95       	swap	r24
     cb2:	92 95       	swap	r25
     cb4:	90 7f       	andi	r25, 0xF0	; 240
     cb6:	98 27       	eor	r25, r24
     cb8:	80 7f       	andi	r24, 0xF0	; 240
     cba:	98 27       	eor	r25, r24
     cbc:	9c 01       	movw	r18, r24
     cbe:	99 0f       	add	r25, r25
     cc0:	44 0b       	sbc	r20, r20
     cc2:	55 0b       	sbc	r21, r21
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	74 e2       	ldi	r23, 0x24	; 36
     cc8:	84 ef       	ldi	r24, 0xF4	; 244
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9e d2       	rcall	.+1340   	; 0x120a <__udivmodsi4>
     cce:	21 50       	subi	r18, 0x01	; 1
     cd0:	31 09       	sbc	r19, r1
     cd2:	ed e1       	ldi	r30, 0x1D	; 29
     cd4:	f2 e0       	ldi	r31, 0x02	; 2
     cd6:	31 83       	std	Z+1, r19	; 0x01
     cd8:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)(UART.ubrr>>8);
     cda:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H = (unsigned char)UART.ubrr;
     cde:	80 81       	ld	r24, Z
     ce0:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UCSR0A |= (1<<RXC0);
     ce4:	e0 ec       	ldi	r30, 0xC0	; 192
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	80 68       	ori	r24, 0x80	; 128
     cec:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(1<<UCSZ02);
     cee:	e1 ec       	ldi	r30, 0xC1	; 193
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8c 69       	ori	r24, 0x9C	; 156
     cf6:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     cf8:	e2 ec       	ldi	r30, 0xC2	; 194
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	86 60       	ori	r24, 0x06	; 6
     d00:	80 83       	st	Z, r24
	return 1;
};
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	08 95       	ret

00000d08 <UART_initASYNC1>:

int UART_initASYNC1(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     d08:	82 95       	swap	r24
     d0a:	92 95       	swap	r25
     d0c:	90 7f       	andi	r25, 0xF0	; 240
     d0e:	98 27       	eor	r25, r24
     d10:	80 7f       	andi	r24, 0xF0	; 240
     d12:	98 27       	eor	r25, r24
     d14:	9c 01       	movw	r18, r24
     d16:	99 0f       	add	r25, r25
     d18:	44 0b       	sbc	r20, r20
     d1a:	55 0b       	sbc	r21, r21
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	74 e2       	ldi	r23, 0x24	; 36
     d20:	84 ef       	ldi	r24, 0xF4	; 244
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	72 d2       	rcall	.+1252   	; 0x120a <__udivmodsi4>
     d26:	21 50       	subi	r18, 0x01	; 1
     d28:	31 09       	sbc	r19, r1
     d2a:	ed e1       	ldi	r30, 0x1D	; 29
     d2c:	f2 e0       	ldi	r31, 0x02	; 2
     d2e:	31 83       	std	Z+1, r19	; 0x01
     d30:	20 83       	st	Z, r18
	UBRR1L = (unsigned char)(UART.ubrr>>8);
     d32:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	UBRR1H = (unsigned char)UART.ubrr;
     d36:	80 81       	ld	r24, Z
     d38:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UCSR1A |= (1<<RXC1);
     d3c:	e8 ec       	ldi	r30, 0xC8	; 200
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 68       	ori	r24, 0x80	; 128
     d44:	80 83       	st	Z, r24
	UCSR1B |= (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1)|(1<<UCSZ12);
     d46:	e9 ec       	ldi	r30, 0xC9	; 201
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8c 69       	ori	r24, 0x9C	; 156
     d4e:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
     d50:	ea ec       	ldi	r30, 0xCA	; 202
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	86 60       	ori	r24, 0x06	; 6
     d58:	80 83       	st	Z, r24
	return 1;
};
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	08 95       	ret

00000d60 <UART_initASYNC2>:

int UART_initASYNC2(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     d60:	82 95       	swap	r24
     d62:	92 95       	swap	r25
     d64:	90 7f       	andi	r25, 0xF0	; 240
     d66:	98 27       	eor	r25, r24
     d68:	80 7f       	andi	r24, 0xF0	; 240
     d6a:	98 27       	eor	r25, r24
     d6c:	9c 01       	movw	r18, r24
     d6e:	99 0f       	add	r25, r25
     d70:	44 0b       	sbc	r20, r20
     d72:	55 0b       	sbc	r21, r21
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	74 e2       	ldi	r23, 0x24	; 36
     d78:	84 ef       	ldi	r24, 0xF4	; 244
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	46 d2       	rcall	.+1164   	; 0x120a <__udivmodsi4>
     d7e:	21 50       	subi	r18, 0x01	; 1
     d80:	31 09       	sbc	r19, r1
     d82:	ed e1       	ldi	r30, 0x1D	; 29
     d84:	f2 e0       	ldi	r31, 0x02	; 2
     d86:	31 83       	std	Z+1, r19	; 0x01
     d88:	20 83       	st	Z, r18
	UBRR2L = (unsigned char)(UART.ubrr>>8);
     d8a:	30 93 d4 00 	sts	0x00D4, r19	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UBRR2H = (unsigned char)UART.ubrr;
     d8e:	80 81       	ld	r24, Z
     d90:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
	UCSR2A |= (1<<RXC2);
     d94:	e0 ed       	ldi	r30, 0xD0	; 208
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	80 83       	st	Z, r24
	UCSR2B |= (1<<RXCIE2)|(1<<RXEN2)|(1<<TXEN2)|(1<<UCSZ22);
     d9e:	e1 ed       	ldi	r30, 0xD1	; 209
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8c 69       	ori	r24, 0x9C	; 156
     da6:	80 83       	st	Z, r24
	UCSR2C |= (1<<UCSZ21)|(1<<UCSZ20);
     da8:	e2 ed       	ldi	r30, 0xD2	; 210
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	86 60       	ori	r24, 0x06	; 6
     db0:	80 83       	st	Z, r24
	return 1;
};
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	08 95       	ret

00000db8 <UART_initASYNC3>:

int UART_initASYNC3(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     db8:	82 95       	swap	r24
     dba:	92 95       	swap	r25
     dbc:	90 7f       	andi	r25, 0xF0	; 240
     dbe:	98 27       	eor	r25, r24
     dc0:	80 7f       	andi	r24, 0xF0	; 240
     dc2:	98 27       	eor	r25, r24
     dc4:	9c 01       	movw	r18, r24
     dc6:	99 0f       	add	r25, r25
     dc8:	44 0b       	sbc	r20, r20
     dca:	55 0b       	sbc	r21, r21
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	74 e2       	ldi	r23, 0x24	; 36
     dd0:	84 ef       	ldi	r24, 0xF4	; 244
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	1a d2       	rcall	.+1076   	; 0x120a <__udivmodsi4>
     dd6:	21 50       	subi	r18, 0x01	; 1
     dd8:	31 09       	sbc	r19, r1
     dda:	ed e1       	ldi	r30, 0x1D	; 29
     ddc:	f2 e0       	ldi	r31, 0x02	; 2
     dde:	31 83       	std	Z+1, r19	; 0x01
     de0:	20 83       	st	Z, r18
	UBRR3L = (unsigned char)(UART.ubrr>>8);
     de2:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	UBRR3H = (unsigned char)UART.ubrr;
     de6:	80 81       	ld	r24, Z
     de8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	UCSR3A |= (1<<RXC1);
     dec:	e0 e3       	ldi	r30, 0x30	; 48
     dee:	f1 e0       	ldi	r31, 0x01	; 1
     df0:	80 81       	ld	r24, Z
     df2:	80 68       	ori	r24, 0x80	; 128
     df4:	80 83       	st	Z, r24
	UCSR3B |= (1<<RXCIE3)|(1<<RXEN3)|(1<<TXEN3)|(1<<UCSZ32);
     df6:	e1 e3       	ldi	r30, 0x31	; 49
     df8:	f1 e0       	ldi	r31, 0x01	; 1
     dfa:	80 81       	ld	r24, Z
     dfc:	8c 69       	ori	r24, 0x9C	; 156
     dfe:	80 83       	st	Z, r24
	UCSR3C |= (1<<UCSZ31)|(1<<UCSZ30);
     e00:	e2 e3       	ldi	r30, 0x32	; 50
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	80 81       	ld	r24, Z
     e06:	86 60       	ori	r24, 0x06	; 6
     e08:	80 83       	st	Z, r24
	return 1;
};
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	08 95       	ret

00000e10 <UART_init>:

int initSLAVE(int rate, int UARTReg, int UARTBaudRegList[13][4][3]){
	return 1;
};*/

int UART_init(int mode, int baudRate, int UARTId){
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	28 97       	sbiw	r28, 0x08	; 8
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
	if(UARTId > 3){
     e28:	44 30       	cpi	r20, 0x04	; 4
     e2a:	51 05       	cpc	r21, r1
     e2c:	34 f5       	brge	.+76     	; 0xe7a <UART_init+0x6a>
     e2e:	cb 01       	movw	r24, r22
		return 0;
	}
	sei();
     e30:	78 94       	sei
	UART.UARTReg = UARTId;
     e32:	0d e1       	ldi	r16, 0x1D	; 29
     e34:	12 e0       	ldi	r17, 0x02	; 2
     e36:	f8 01       	movw	r30, r16
     e38:	53 83       	std	Z+3, r21	; 0x03
     e3a:	42 83       	std	Z+2, r20	; 0x02
	int (*UART_initAsyncFuncs[4])(int rate) = {UART_initASYNC0, UART_initASYNC1, UART_initASYNC2, UART_initASYNC3};
     e3c:	28 e0       	ldi	r18, 0x08	; 8
     e3e:	e0 e3       	ldi	r30, 0x30	; 48
     e40:	f2 e0       	ldi	r31, 0x02	; 2
     e42:	de 01       	movw	r26, r28
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	01 90       	ld	r0, Z+
     e48:	0d 92       	st	X+, r0
     e4a:	2a 95       	dec	r18
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <UART_init+0x36>
	(*UART_initAsyncFuncs[UARTId])(baudRate);
     e4e:	44 0f       	add	r20, r20
     e50:	55 1f       	adc	r21, r21
     e52:	e1 e0       	ldi	r30, 0x01	; 1
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	ec 0f       	add	r30, r28
     e58:	fd 1f       	adc	r31, r29
     e5a:	e4 0f       	add	r30, r20
     e5c:	f5 1f       	adc	r31, r21
     e5e:	01 90       	ld	r0, Z+
     e60:	f0 81       	ld	r31, Z
     e62:	e0 2d       	mov	r30, r0
     e64:	19 95       	eicall
	UART.buffer = NULL;
     e66:	f8 01       	movw	r30, r16
     e68:	17 82       	std	Z+7, r1	; 0x07
     e6a:	16 82       	std	Z+6, r1	; 0x06
	UART.bufferIndex = 0;
     e6c:	15 82       	std	Z+5, r1	; 0x05
     e6e:	14 82       	std	Z+4, r1	; 0x04
	UART.timeVal = NULL;
     e70:	11 86       	std	Z+9, r1	; 0x09
     e72:	10 86       	std	Z+8, r1	; 0x08
	return 1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <UART_init+0x6e>
	return 1;
};*/

int UART_init(int mode, int baudRate, int UARTId){
	if(UARTId > 3){
		return 0;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
	(*UART_initAsyncFuncs[UARTId])(baudRate);
	UART.buffer = NULL;
	UART.bufferIndex = 0;
	UART.timeVal = NULL;
	return 1;
}
     e7e:	28 96       	adiw	r28, 0x08	; 8
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	08 95       	ret

00000e94 <UART_transmitChar0>:

int UART_transmitChar0(char transmitionData){
	//while(~(UCSR0A & (1<<UDRE0))){}
	UCSR0B &= ~(1<<TXB80);
     e94:	e1 ec       	ldi	r30, 0xC1	; 193
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	90 81       	ld	r25, Z
     e9a:	9e 7f       	andi	r25, 0xFE	; 254
     e9c:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR0B |= (1<<TXB80);
	}
	UDR0 = transmitionData;
     e9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 1;
};
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	08 95       	ret

00000ea8 <UART_transmitChar1>:

int UART_transmitChar1(char transmitionData){
	//while(~(UCSR1A & (1<<UDRE1))){}
	UCSR1B &= ~(1<<TXB81);
     ea8:	e9 ec       	ldi	r30, 0xC9	; 201
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	90 81       	ld	r25, Z
     eae:	9e 7f       	andi	r25, 0xFE	; 254
     eb0:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR1B |= (1<<TXB81);
	}
	UDR1 = transmitionData;
     eb2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	return 1;
};
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	08 95       	ret

00000ebc <UART_transmitChar2>:

int UART_transmitChar2(char transmitionData){
	//while(~(UCSR2A & (1<<UDRE2))){}
	UCSR2B &= ~(1<<TXB82);
     ebc:	e1 ed       	ldi	r30, 0xD1	; 209
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	90 81       	ld	r25, Z
     ec2:	9e 7f       	andi	r25, 0xFE	; 254
     ec4:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR2B |= (1<<TXB82);
	}
	UDR2 = transmitionData;
     ec6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	return 1;
};
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	08 95       	ret

00000ed0 <UART_transmitChar3>:

int UART_transmitChar3(char transmitionData){
	//while(~(UCSR3A & (1<<UDRE3))){}
	UCSR3B &= ~(1<<TXB83);
     ed0:	e1 e3       	ldi	r30, 0x31	; 49
     ed2:	f1 e0       	ldi	r31, 0x01	; 1
     ed4:	90 81       	ld	r25, Z
     ed6:	9e 7f       	andi	r25, 0xFE	; 254
     ed8:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR3B |= (1<<TXB83);
	}
	UDR3 = transmitionData;
     eda:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
	return 1;
};
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <UART_transmitChar>:

int UART_transmitChar(char transmitionData){
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	28 97       	sbiw	r28, 0x08	; 8
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
	int (*UART_transmitCharFuncs[4])(char data) = {UART_transmitChar0, UART_transmitChar1, UART_transmitChar2, UART_transmitChar3};
     ef8:	98 e0       	ldi	r25, 0x08	; 8
     efa:	e8 e3       	ldi	r30, 0x38	; 56
     efc:	f2 e0       	ldi	r31, 0x02	; 2
     efe:	de 01       	movw	r26, r28
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	01 90       	ld	r0, Z+
     f04:	0d 92       	st	X+, r0
     f06:	9a 95       	dec	r25
     f08:	e1 f7       	brne	.-8      	; 0xf02 <UART_transmitChar+0x1e>
	(*UART_transmitCharFuncs[UART.UARTReg])(transmitionData);
     f0a:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <UART+0x2>
     f0e:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <UART+0x3>
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	2c 0f       	add	r18, r28
     f1c:	3d 1f       	adc	r19, r29
     f1e:	e2 0f       	add	r30, r18
     f20:	f3 1f       	adc	r31, r19
     f22:	01 90       	ld	r0, Z+
     f24:	f0 81       	ld	r31, Z
     f26:	e0 2d       	mov	r30, r0
     f28:	19 95       	eicall
	return 1;
}
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	28 96       	adiw	r28, 0x08	; 8
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <UART_transmitStr>:

int UART_transmitStr(char* transmitionData, int transmitionDataLength){
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	7c 01       	movw	r14, r24
     f4e:	8b 01       	movw	r16, r22
	for(int i = 0; i < transmitionDataLength; i++){
     f50:	c0 e0       	ldi	r28, 0x00	; 0
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	06 c0       	rjmp	.+12     	; 0xf62 <UART_transmitStr+0x22>
		UART_transmitChar(transmitionData[i]);
     f56:	f7 01       	movw	r30, r14
     f58:	ec 0f       	add	r30, r28
     f5a:	fd 1f       	adc	r31, r29
     f5c:	80 81       	ld	r24, Z
     f5e:	c2 df       	rcall	.-124    	; 0xee4 <UART_transmitChar>
	(*UART_transmitCharFuncs[UART.UARTReg])(transmitionData);
	return 1;
}

int UART_transmitStr(char* transmitionData, int transmitionDataLength){
	for(int i = 0; i < transmitionDataLength; i++){
     f60:	21 96       	adiw	r28, 0x01	; 1
     f62:	c0 17       	cp	r28, r16
     f64:	d1 07       	cpc	r29, r17
     f66:	bc f3       	brlt	.-18     	; 0xf56 <UART_transmitStr+0x16>
		UART_transmitChar(transmitionData[i]);
	}
	return 1;
}
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	08 95       	ret

00000f7a <UART_receiveChar0>:

int UART_receiveChar0(){
	UART.RXh = UCSR0B;
     f7a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     f7e:	ed e1       	ldi	r30, 0x1D	; 29
     f80:	f2 e0       	ldi	r31, 0x02	; 2
     f82:	82 87       	std	Z+10, r24	; 0x0a
	UART.RXl = UDR0;
     f84:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     f88:	83 87       	std	Z+11, r24	; 0x0b
	UART.RXh = (UART.RXh >> 1) & 0x01;
     f8a:	82 85       	ldd	r24, Z+10	; 0x0a
     f8c:	86 95       	lsr	r24
     f8e:	81 70       	andi	r24, 0x01	; 1
     f90:	82 87       	std	Z+10, r24	; 0x0a
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     f92:	82 85       	ldd	r24, Z+10	; 0x0a
     f94:	83 85       	ldd	r24, Z+11	; 0x0b
     f96:	84 87       	std	Z+12, r24	; 0x0c
	return 1;
}
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	08 95       	ret

00000f9e <UART_receiveChar1>:

int UART_receiveChar1(){
	UART.RXh = UCSR1B;
     f9e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     fa2:	ed e1       	ldi	r30, 0x1D	; 29
     fa4:	f2 e0       	ldi	r31, 0x02	; 2
     fa6:	82 87       	std	Z+10, r24	; 0x0a
	UART.RXl = UDR1;
     fa8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     fac:	83 87       	std	Z+11, r24	; 0x0b
	UART.RXh = (UART.RXh >> 1) & 0x01;
     fae:	82 85       	ldd	r24, Z+10	; 0x0a
     fb0:	86 95       	lsr	r24
     fb2:	81 70       	andi	r24, 0x01	; 1
     fb4:	82 87       	std	Z+10, r24	; 0x0a
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     fb6:	82 85       	ldd	r24, Z+10	; 0x0a
     fb8:	83 85       	ldd	r24, Z+11	; 0x0b
     fba:	84 87       	std	Z+12, r24	; 0x0c
	return 1;
}
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	08 95       	ret

00000fc2 <UART_receiveChar2>:

int UART_receiveChar2(){
	UART.RXh = UCSR2B;
     fc2:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
     fc6:	ed e1       	ldi	r30, 0x1D	; 29
     fc8:	f2 e0       	ldi	r31, 0x02	; 2
     fca:	82 87       	std	Z+10, r24	; 0x0a
	UART.RXl = UDR2;
     fcc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     fd0:	83 87       	std	Z+11, r24	; 0x0b
	UART.RXh = (UART.RXh >> 1) & 0x01;
     fd2:	82 85       	ldd	r24, Z+10	; 0x0a
     fd4:	86 95       	lsr	r24
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	82 87       	std	Z+10, r24	; 0x0a
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     fda:	82 85       	ldd	r24, Z+10	; 0x0a
     fdc:	83 85       	ldd	r24, Z+11	; 0x0b
     fde:	84 87       	std	Z+12, r24	; 0x0c
	return 1;
}
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	08 95       	ret

00000fe6 <UART_receiveChar3>:

int UART_receiveChar3(){
	UART.RXh = UCSR3B;
     fe6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
     fea:	ed e1       	ldi	r30, 0x1D	; 29
     fec:	f2 e0       	ldi	r31, 0x02	; 2
     fee:	82 87       	std	Z+10, r24	; 0x0a
	UART.RXl = UDR3;
     ff0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
     ff4:	83 87       	std	Z+11, r24	; 0x0b
	UART.RXh = (UART.RXh >> 1) & 0x01;
     ff6:	82 85       	ldd	r24, Z+10	; 0x0a
     ff8:	86 95       	lsr	r24
     ffa:	81 70       	andi	r24, 0x01	; 1
     ffc:	82 87       	std	Z+10, r24	; 0x0a
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     ffe:	82 85       	ldd	r24, Z+10	; 0x0a
    1000:	83 85       	ldd	r24, Z+11	; 0x0b
    1002:	84 87       	std	Z+12, r24	; 0x0c
	return 1;
}
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	08 95       	ret

0000100a <UART_receiveChar>:

int UART_receiveChar(){
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	28 97       	sbiw	r28, 0x08	; 8
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
	int(*UART_receiveCharFuncs[4])() = {UART_receiveChar0, UART_receiveChar1, UART_receiveChar2, UART_receiveChar3};
    1022:	88 e0       	ldi	r24, 0x08	; 8
    1024:	e0 e4       	ldi	r30, 0x40	; 64
    1026:	f2 e0       	ldi	r31, 0x02	; 2
    1028:	de 01       	movw	r26, r28
    102a:	11 96       	adiw	r26, 0x01	; 1
    102c:	01 90       	ld	r0, Z+
    102e:	0d 92       	st	X+, r0
    1030:	8a 95       	dec	r24
    1032:	e1 f7       	brne	.-8      	; 0x102c <UART_receiveChar+0x22>
	(*UART_receiveCharFuncs[UART.UARTReg])();
    1034:	0d e1       	ldi	r16, 0x1D	; 29
    1036:	12 e0       	ldi	r17, 0x02	; 2
    1038:	d8 01       	movw	r26, r16
    103a:	12 96       	adiw	r26, 0x02	; 2
    103c:	ed 91       	ld	r30, X+
    103e:	fc 91       	ld	r31, X
    1040:	13 97       	sbiw	r26, 0x03	; 3
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	8c 0f       	add	r24, r28
    104c:	9d 1f       	adc	r25, r29
    104e:	e8 0f       	add	r30, r24
    1050:	f9 1f       	adc	r31, r25
    1052:	01 90       	ld	r0, Z+
    1054:	f0 81       	ld	r31, Z
    1056:	e0 2d       	mov	r30, r0
    1058:	19 95       	eicall
	UART.buffer[UART.bufferIndex] = UART.RX;
    105a:	d8 01       	movw	r26, r16
    105c:	16 96       	adiw	r26, 0x06	; 6
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	17 97       	sbiw	r26, 0x07	; 7
    1064:	14 96       	adiw	r26, 0x04	; 4
    1066:	8d 91       	ld	r24, X+
    1068:	9c 91       	ld	r25, X
    106a:	15 97       	sbiw	r26, 0x05	; 5
    106c:	e8 0f       	add	r30, r24
    106e:	f9 1f       	adc	r31, r25
    1070:	1c 96       	adiw	r26, 0x0c	; 12
    1072:	8c 91       	ld	r24, X
    1074:	1c 97       	sbiw	r26, 0x0c	; 12
    1076:	80 83       	st	Z, r24
	if(UART.bufferIndex == 7){
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	8d 91       	ld	r24, X+
    107c:	9c 91       	ld	r25, X
    107e:	15 97       	sbiw	r26, 0x05	; 5
    1080:	07 97       	sbiw	r24, 0x07	; 7
    1082:	39 f4       	brne	.+14     	; 0x1092 <UART_receiveChar+0x88>
		UART.timeVal = UART.buffer;
    1084:	f8 01       	movw	r30, r16
    1086:	86 81       	ldd	r24, Z+6	; 0x06
    1088:	97 81       	ldd	r25, Z+7	; 0x07
    108a:	91 87       	std	Z+9, r25	; 0x09
    108c:	80 87       	std	Z+8, r24	; 0x08
		UART.bufferIndex = 0;
    108e:	15 82       	std	Z+5, r1	; 0x05
    1090:	14 82       	std	Z+4, r1	; 0x04
	}
	return 1;
}
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	28 96       	adiw	r28, 0x08	; 8
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	08 95       	ret

000010ac <__vector_25>:
	.UART_init = UART_init,
	.UART_transmitChar = UART_transmitChar,
	.UART_transmitStr = UART_transmitStr
};

ISR(USART0_RX_vect){
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	0b b6       	in	r0, 0x3b	; 59
    10b8:	0f 92       	push	r0
    10ba:	2f 93       	push	r18
    10bc:	3f 93       	push	r19
    10be:	4f 93       	push	r20
    10c0:	5f 93       	push	r21
    10c2:	6f 93       	push	r22
    10c4:	7f 93       	push	r23
    10c6:	8f 93       	push	r24
    10c8:	9f 93       	push	r25
    10ca:	af 93       	push	r26
    10cc:	bf 93       	push	r27
    10ce:	ef 93       	push	r30
    10d0:	ff 93       	push	r31
	UART_receiveChar();
    10d2:	9b df       	rcall	.-202    	; 0x100a <UART_receiveChar>
};
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	0b be       	out	0x3b, r0	; 59
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <__vector_36>:

ISR(USART1_RX_vect){
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	0b b6       	in	r0, 0x3b	; 59
    1106:	0f 92       	push	r0
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
	UART_receiveChar();
    1120:	74 df       	rcall	.-280    	; 0x100a <UART_receiveChar>
};
    1122:	ff 91       	pop	r31
    1124:	ef 91       	pop	r30
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0b be       	out	0x3b, r0	; 59
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_51>:

ISR(USART2_RX_vect){
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	0b b6       	in	r0, 0x3b	; 59
    1154:	0f 92       	push	r0
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
	UART_receiveChar();
    116e:	4d df       	rcall	.-358    	; 0x100a <UART_receiveChar>
};
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	0f 90       	pop	r0
    118a:	0b be       	out	0x3b, r0	; 59
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <__vector_54>:

ISR(USART3_RX_vect){
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	0b b6       	in	r0, 0x3b	; 59
    11a2:	0f 92       	push	r0
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
	UART_receiveChar();
    11bc:	26 df       	rcall	.-436    	; 0x100a <UART_receiveChar>
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0b be       	out	0x3b, r0	; 59
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <__divmodhi4>:
    11e4:	97 fb       	bst	r25, 7
    11e6:	07 2e       	mov	r0, r23
    11e8:	16 f4       	brtc	.+4      	; 0x11ee <__divmodhi4+0xa>
    11ea:	00 94       	com	r0
    11ec:	06 d0       	rcall	.+12     	; 0x11fa <__divmodhi4_neg1>
    11ee:	77 fd       	sbrc	r23, 7
    11f0:	08 d0       	rcall	.+16     	; 0x1202 <__divmodhi4_neg2>
    11f2:	2d d0       	rcall	.+90     	; 0x124e <__udivmodhi4>
    11f4:	07 fc       	sbrc	r0, 7
    11f6:	05 d0       	rcall	.+10     	; 0x1202 <__divmodhi4_neg2>
    11f8:	3e f4       	brtc	.+14     	; 0x1208 <__divmodhi4_exit>

000011fa <__divmodhi4_neg1>:
    11fa:	90 95       	com	r25
    11fc:	81 95       	neg	r24
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	08 95       	ret

00001202 <__divmodhi4_neg2>:
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255

00001208 <__divmodhi4_exit>:
    1208:	08 95       	ret

0000120a <__udivmodsi4>:
    120a:	a1 e2       	ldi	r26, 0x21	; 33
    120c:	1a 2e       	mov	r1, r26
    120e:	aa 1b       	sub	r26, r26
    1210:	bb 1b       	sub	r27, r27
    1212:	fd 01       	movw	r30, r26
    1214:	0d c0       	rjmp	.+26     	; 0x1230 <__udivmodsi4_ep>

00001216 <__udivmodsi4_loop>:
    1216:	aa 1f       	adc	r26, r26
    1218:	bb 1f       	adc	r27, r27
    121a:	ee 1f       	adc	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	a2 17       	cp	r26, r18
    1220:	b3 07       	cpc	r27, r19
    1222:	e4 07       	cpc	r30, r20
    1224:	f5 07       	cpc	r31, r21
    1226:	20 f0       	brcs	.+8      	; 0x1230 <__udivmodsi4_ep>
    1228:	a2 1b       	sub	r26, r18
    122a:	b3 0b       	sbc	r27, r19
    122c:	e4 0b       	sbc	r30, r20
    122e:	f5 0b       	sbc	r31, r21

00001230 <__udivmodsi4_ep>:
    1230:	66 1f       	adc	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	1a 94       	dec	r1
    123a:	69 f7       	brne	.-38     	; 0x1216 <__udivmodsi4_loop>
    123c:	60 95       	com	r22
    123e:	70 95       	com	r23
    1240:	80 95       	com	r24
    1242:	90 95       	com	r25
    1244:	9b 01       	movw	r18, r22
    1246:	ac 01       	movw	r20, r24
    1248:	bd 01       	movw	r22, r26
    124a:	cf 01       	movw	r24, r30
    124c:	08 95       	ret

0000124e <__udivmodhi4>:
    124e:	aa 1b       	sub	r26, r26
    1250:	bb 1b       	sub	r27, r27
    1252:	51 e1       	ldi	r21, 0x11	; 17
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <__udivmodhi4_ep>

00001256 <__udivmodhi4_loop>:
    1256:	aa 1f       	adc	r26, r26
    1258:	bb 1f       	adc	r27, r27
    125a:	a6 17       	cp	r26, r22
    125c:	b7 07       	cpc	r27, r23
    125e:	10 f0       	brcs	.+4      	; 0x1264 <__udivmodhi4_ep>
    1260:	a6 1b       	sub	r26, r22
    1262:	b7 0b       	sbc	r27, r23

00001264 <__udivmodhi4_ep>:
    1264:	88 1f       	adc	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	5a 95       	dec	r21
    126a:	a9 f7       	brne	.-22     	; 0x1256 <__udivmodhi4_loop>
    126c:	80 95       	com	r24
    126e:	90 95       	com	r25
    1270:	bc 01       	movw	r22, r24
    1272:	cd 01       	movw	r24, r26
    1274:	08 95       	ret

00001276 <calloc>:
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	86 9f       	mul	r24, r22
    1280:	80 01       	movw	r16, r0
    1282:	87 9f       	mul	r24, r23
    1284:	10 0d       	add	r17, r0
    1286:	96 9f       	mul	r25, r22
    1288:	10 0d       	add	r17, r0
    128a:	11 24       	eor	r1, r1
    128c:	c8 01       	movw	r24, r16
    128e:	0d d0       	rcall	.+26     	; 0x12aa <malloc>
    1290:	ec 01       	movw	r28, r24
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	21 f0       	breq	.+8      	; 0x129e <calloc+0x28>
    1296:	a8 01       	movw	r20, r16
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	44 d1       	rcall	.+648    	; 0x1526 <memset>
    129e:	ce 01       	movw	r24, r28
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <malloc>:
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	91 05       	cpc	r25, r1
    12b6:	10 f4       	brcc	.+4      	; 0x12bc <malloc+0x12>
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <__flp>
    12c0:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <__flp+0x1>
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	a0 e0       	ldi	r26, 0x00	; 0
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	30 97       	sbiw	r30, 0x00	; 0
    12ce:	19 f1       	breq	.+70     	; 0x1316 <malloc+0x6c>
    12d0:	40 81       	ld	r20, Z
    12d2:	51 81       	ldd	r21, Z+1	; 0x01
    12d4:	02 81       	ldd	r16, Z+2	; 0x02
    12d6:	13 81       	ldd	r17, Z+3	; 0x03
    12d8:	48 17       	cp	r20, r24
    12da:	59 07       	cpc	r21, r25
    12dc:	c8 f0       	brcs	.+50     	; 0x1310 <malloc+0x66>
    12de:	84 17       	cp	r24, r20
    12e0:	95 07       	cpc	r25, r21
    12e2:	69 f4       	brne	.+26     	; 0x12fe <malloc+0x54>
    12e4:	10 97       	sbiw	r26, 0x00	; 0
    12e6:	31 f0       	breq	.+12     	; 0x12f4 <malloc+0x4a>
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	0c 93       	st	X, r16
    12ec:	12 97       	sbiw	r26, 0x02	; 2
    12ee:	13 96       	adiw	r26, 0x03	; 3
    12f0:	1c 93       	st	X, r17
    12f2:	27 c0       	rjmp	.+78     	; 0x1342 <malloc+0x98>
    12f4:	00 93 54 02 	sts	0x0254, r16	; 0x800254 <__flp>
    12f8:	10 93 55 02 	sts	0x0255, r17	; 0x800255 <__flp+0x1>
    12fc:	22 c0       	rjmp	.+68     	; 0x1342 <malloc+0x98>
    12fe:	21 15       	cp	r18, r1
    1300:	31 05       	cpc	r19, r1
    1302:	19 f0       	breq	.+6      	; 0x130a <malloc+0x60>
    1304:	42 17       	cp	r20, r18
    1306:	53 07       	cpc	r21, r19
    1308:	18 f4       	brcc	.+6      	; 0x1310 <malloc+0x66>
    130a:	9a 01       	movw	r18, r20
    130c:	bd 01       	movw	r22, r26
    130e:	ef 01       	movw	r28, r30
    1310:	df 01       	movw	r26, r30
    1312:	f8 01       	movw	r30, r16
    1314:	db cf       	rjmp	.-74     	; 0x12cc <malloc+0x22>
    1316:	21 15       	cp	r18, r1
    1318:	31 05       	cpc	r19, r1
    131a:	f9 f0       	breq	.+62     	; 0x135a <malloc+0xb0>
    131c:	28 1b       	sub	r18, r24
    131e:	39 0b       	sbc	r19, r25
    1320:	24 30       	cpi	r18, 0x04	; 4
    1322:	31 05       	cpc	r19, r1
    1324:	80 f4       	brcc	.+32     	; 0x1346 <malloc+0x9c>
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	61 15       	cp	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	21 f0       	breq	.+8      	; 0x1338 <malloc+0x8e>
    1330:	fb 01       	movw	r30, r22
    1332:	93 83       	std	Z+3, r25	; 0x03
    1334:	82 83       	std	Z+2, r24	; 0x02
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <malloc+0x96>
    1338:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__flp+0x1>
    133c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__flp>
    1340:	fe 01       	movw	r30, r28
    1342:	32 96       	adiw	r30, 0x02	; 2
    1344:	44 c0       	rjmp	.+136    	; 0x13ce <malloc+0x124>
    1346:	fe 01       	movw	r30, r28
    1348:	e2 0f       	add	r30, r18
    134a:	f3 1f       	adc	r31, r19
    134c:	81 93       	st	Z+, r24
    134e:	91 93       	st	Z+, r25
    1350:	22 50       	subi	r18, 0x02	; 2
    1352:	31 09       	sbc	r19, r1
    1354:	39 83       	std	Y+1, r19	; 0x01
    1356:	28 83       	st	Y, r18
    1358:	3a c0       	rjmp	.+116    	; 0x13ce <malloc+0x124>
    135a:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__data_end>
    135e:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__data_end+0x1>
    1362:	23 2b       	or	r18, r19
    1364:	41 f4       	brne	.+16     	; 0x1376 <malloc+0xcc>
    1366:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    136a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    136e:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <__data_end+0x1>
    1372:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <__data_end>
    1376:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    137a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    137e:	21 15       	cp	r18, r1
    1380:	31 05       	cpc	r19, r1
    1382:	41 f4       	brne	.+16     	; 0x1394 <malloc+0xea>
    1384:	2d b7       	in	r18, 0x3d	; 61
    1386:	3e b7       	in	r19, 0x3e	; 62
    1388:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    138c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1390:	24 1b       	sub	r18, r20
    1392:	35 0b       	sbc	r19, r21
    1394:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <__data_end>
    1398:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <__data_end+0x1>
    139c:	e2 17       	cp	r30, r18
    139e:	f3 07       	cpc	r31, r19
    13a0:	a0 f4       	brcc	.+40     	; 0x13ca <malloc+0x120>
    13a2:	2e 1b       	sub	r18, r30
    13a4:	3f 0b       	sbc	r19, r31
    13a6:	28 17       	cp	r18, r24
    13a8:	39 07       	cpc	r19, r25
    13aa:	78 f0       	brcs	.+30     	; 0x13ca <malloc+0x120>
    13ac:	ac 01       	movw	r20, r24
    13ae:	4e 5f       	subi	r20, 0xFE	; 254
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	24 17       	cp	r18, r20
    13b4:	35 07       	cpc	r19, r21
    13b6:	48 f0       	brcs	.+18     	; 0x13ca <malloc+0x120>
    13b8:	4e 0f       	add	r20, r30
    13ba:	5f 1f       	adc	r21, r31
    13bc:	50 93 53 02 	sts	0x0253, r21	; 0x800253 <__data_end+0x1>
    13c0:	40 93 52 02 	sts	0x0252, r20	; 0x800252 <__data_end>
    13c4:	81 93       	st	Z+, r24
    13c6:	91 93       	st	Z+, r25
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <malloc+0x124>
    13ca:	e0 e0       	ldi	r30, 0x00	; 0
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	cf 01       	movw	r24, r30
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	08 95       	ret

000013da <free>:
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <free+0xa>
    13e2:	81 c0       	rjmp	.+258    	; 0x14e6 <free+0x10c>
    13e4:	fc 01       	movw	r30, r24
    13e6:	32 97       	sbiw	r30, 0x02	; 2
    13e8:	13 82       	std	Z+3, r1	; 0x03
    13ea:	12 82       	std	Z+2, r1	; 0x02
    13ec:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <__flp>
    13f0:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <__flp+0x1>
    13f4:	10 97       	sbiw	r26, 0x00	; 0
    13f6:	81 f4       	brne	.+32     	; 0x1418 <free+0x3e>
    13f8:	20 81       	ld	r18, Z
    13fa:	31 81       	ldd	r19, Z+1	; 0x01
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__data_end>
    1404:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__data_end+0x1>
    1408:	28 17       	cp	r18, r24
    140a:	39 07       	cpc	r19, r25
    140c:	51 f5       	brne	.+84     	; 0x1462 <free+0x88>
    140e:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <__data_end+0x1>
    1412:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <__data_end>
    1416:	67 c0       	rjmp	.+206    	; 0x14e6 <free+0x10c>
    1418:	ed 01       	movw	r28, r26
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	ce 17       	cp	r28, r30
    1420:	df 07       	cpc	r29, r31
    1422:	40 f4       	brcc	.+16     	; 0x1434 <free+0x5a>
    1424:	4a 81       	ldd	r20, Y+2	; 0x02
    1426:	5b 81       	ldd	r21, Y+3	; 0x03
    1428:	9e 01       	movw	r18, r28
    142a:	41 15       	cp	r20, r1
    142c:	51 05       	cpc	r21, r1
    142e:	f1 f0       	breq	.+60     	; 0x146c <free+0x92>
    1430:	ea 01       	movw	r28, r20
    1432:	f5 cf       	rjmp	.-22     	; 0x141e <free+0x44>
    1434:	d3 83       	std	Z+3, r29	; 0x03
    1436:	c2 83       	std	Z+2, r28	; 0x02
    1438:	40 81       	ld	r20, Z
    143a:	51 81       	ldd	r21, Z+1	; 0x01
    143c:	84 0f       	add	r24, r20
    143e:	95 1f       	adc	r25, r21
    1440:	c8 17       	cp	r28, r24
    1442:	d9 07       	cpc	r29, r25
    1444:	59 f4       	brne	.+22     	; 0x145c <free+0x82>
    1446:	88 81       	ld	r24, Y
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	84 0f       	add	r24, r20
    144c:	95 1f       	adc	r25, r21
    144e:	02 96       	adiw	r24, 0x02	; 2
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	80 83       	st	Z, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	9b 81       	ldd	r25, Y+3	; 0x03
    1458:	93 83       	std	Z+3, r25	; 0x03
    145a:	82 83       	std	Z+2, r24	; 0x02
    145c:	21 15       	cp	r18, r1
    145e:	31 05       	cpc	r19, r1
    1460:	29 f4       	brne	.+10     	; 0x146c <free+0x92>
    1462:	f0 93 55 02 	sts	0x0255, r31	; 0x800255 <__flp+0x1>
    1466:	e0 93 54 02 	sts	0x0254, r30	; 0x800254 <__flp>
    146a:	3d c0       	rjmp	.+122    	; 0x14e6 <free+0x10c>
    146c:	e9 01       	movw	r28, r18
    146e:	fb 83       	std	Y+3, r31	; 0x03
    1470:	ea 83       	std	Y+2, r30	; 0x02
    1472:	49 91       	ld	r20, Y+
    1474:	59 91       	ld	r21, Y+
    1476:	c4 0f       	add	r28, r20
    1478:	d5 1f       	adc	r29, r21
    147a:	ec 17       	cp	r30, r28
    147c:	fd 07       	cpc	r31, r29
    147e:	61 f4       	brne	.+24     	; 0x1498 <free+0xbe>
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	84 0f       	add	r24, r20
    1486:	95 1f       	adc	r25, r21
    1488:	02 96       	adiw	r24, 0x02	; 2
    148a:	e9 01       	movw	r28, r18
    148c:	99 83       	std	Y+1, r25	; 0x01
    148e:	88 83       	st	Y, r24
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	9b 83       	std	Y+3, r25	; 0x03
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	e0 e0       	ldi	r30, 0x00	; 0
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	12 96       	adiw	r26, 0x02	; 2
    149e:	8d 91       	ld	r24, X+
    14a0:	9c 91       	ld	r25, X
    14a2:	13 97       	sbiw	r26, 0x03	; 3
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	19 f0       	breq	.+6      	; 0x14ae <free+0xd4>
    14a8:	fd 01       	movw	r30, r26
    14aa:	dc 01       	movw	r26, r24
    14ac:	f7 cf       	rjmp	.-18     	; 0x149c <free+0xc2>
    14ae:	8d 91       	ld	r24, X+
    14b0:	9c 91       	ld	r25, X
    14b2:	11 97       	sbiw	r26, 0x01	; 1
    14b4:	9d 01       	movw	r18, r26
    14b6:	2e 5f       	subi	r18, 0xFE	; 254
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__data_end>
    14c2:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__data_end+0x1>
    14c6:	28 17       	cp	r18, r24
    14c8:	39 07       	cpc	r19, r25
    14ca:	69 f4       	brne	.+26     	; 0x14e6 <free+0x10c>
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	29 f4       	brne	.+10     	; 0x14da <free+0x100>
    14d0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <__flp+0x1>
    14d4:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__flp>
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <free+0x104>
    14da:	13 82       	std	Z+3, r1	; 0x03
    14dc:	12 82       	std	Z+2, r1	; 0x02
    14de:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <__data_end+0x1>
    14e2:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <__data_end>
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <atoi>:
    14ec:	fc 01       	movw	r30, r24
    14ee:	88 27       	eor	r24, r24
    14f0:	99 27       	eor	r25, r25
    14f2:	e8 94       	clt
    14f4:	21 91       	ld	r18, Z+
    14f6:	20 32       	cpi	r18, 0x20	; 32
    14f8:	e9 f3       	breq	.-6      	; 0x14f4 <atoi+0x8>
    14fa:	29 30       	cpi	r18, 0x09	; 9
    14fc:	10 f0       	brcs	.+4      	; 0x1502 <atoi+0x16>
    14fe:	2e 30       	cpi	r18, 0x0E	; 14
    1500:	c8 f3       	brcs	.-14     	; 0x14f4 <atoi+0x8>
    1502:	2b 32       	cpi	r18, 0x2B	; 43
    1504:	39 f0       	breq	.+14     	; 0x1514 <atoi+0x28>
    1506:	2d 32       	cpi	r18, 0x2D	; 45
    1508:	31 f4       	brne	.+12     	; 0x1516 <atoi+0x2a>
    150a:	68 94       	set
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <atoi+0x28>
    150e:	12 d0       	rcall	.+36     	; 0x1534 <__mulhi_const_10>
    1510:	82 0f       	add	r24, r18
    1512:	91 1d       	adc	r25, r1
    1514:	21 91       	ld	r18, Z+
    1516:	20 53       	subi	r18, 0x30	; 48
    1518:	2a 30       	cpi	r18, 0x0A	; 10
    151a:	c8 f3       	brcs	.-14     	; 0x150e <atoi+0x22>
    151c:	1e f4       	brtc	.+6      	; 0x1524 <atoi+0x38>
    151e:	90 95       	com	r25
    1520:	81 95       	neg	r24
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	08 95       	ret

00001526 <memset>:
    1526:	dc 01       	movw	r26, r24
    1528:	01 c0       	rjmp	.+2      	; 0x152c <memset+0x6>
    152a:	6d 93       	st	X+, r22
    152c:	41 50       	subi	r20, 0x01	; 1
    152e:	50 40       	sbci	r21, 0x00	; 0
    1530:	e0 f7       	brcc	.-8      	; 0x152a <memset+0x4>
    1532:	08 95       	ret

00001534 <__mulhi_const_10>:
    1534:	7a e0       	ldi	r23, 0x0A	; 10
    1536:	97 9f       	mul	r25, r23
    1538:	90 2d       	mov	r25, r0
    153a:	87 9f       	mul	r24, r23
    153c:	80 2d       	mov	r24, r0
    153e:	91 0d       	add	r25, r1
    1540:	11 24       	eor	r1, r1
    1542:	08 95       	ret

00001544 <_exit>:
    1544:	f8 94       	cli

00001546 <__stop_program>:
    1546:	ff cf       	rjmp	.-2      	; 0x1546 <__stop_program>
