
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  00001010  000010a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001010  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080021e  0080021e  000010c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002673  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f6  00000000  00000000  000039a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001262  00000000  00000000  00004b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000704  00000000  00000000  00005e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098b  00000000  00000000  00006504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a4  00000000  00000000  00006e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
       2:	00 00       	nop
       4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
       a:	00 00       	nop
       c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
       e:	00 00       	nop
      10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
      12:	00 00       	nop
      14:	68 c5       	rjmp	.+2768   	; 0xae6 <__vector_5>
      16:	00 00       	nop
      18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c3       	rjmp	.+1930   	; 0x7c0 <__vector_13>
      36:	00 00       	nop
      38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
      42:	00 00       	nop
      44:	79 c3       	rjmp	.+1778   	; 0x738 <__vector_17>
      46:	00 00       	nop
      48:	ec c1       	rjmp	.+984    	; 0x422 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
      52:	00 00       	nop
      54:	2d c3       	rjmp	.+1626   	; 0x6b0 <__vector_21>
      56:	00 00       	nop
      58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e0 c1       	rjmp	.+960    	; 0x422 <__bad_interrupt>
      62:	00 00       	nop
      64:	54 c5       	rjmp	.+2728   	; 0xb0e <__vector_25>
      66:	00 00       	nop
      68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c5       	rjmp	.+2816   	; 0xb6e <__vector_27>
      6e:	00 00       	nop
      70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
      72:	00 00       	nop
      74:	d6 c1       	rjmp	.+940    	; 0x422 <__bad_interrupt>
      76:	00 00       	nop
      78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c3       	rjmp	.+1990   	; 0x848 <__vector_32>
      82:	00 00       	nop
      84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
      86:	00 00       	nop
      88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c8 c1       	rjmp	.+912    	; 0x422 <__bad_interrupt>
      92:	00 00       	nop
      94:	c6 c1       	rjmp	.+908    	; 0x422 <__bad_interrupt>
      96:	00 00       	nop
      98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c4       	rjmp	.+2086   	; 0x8d0 <__vector_42>
      aa:	00 00       	nop
      ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	aa c1       	rjmp	.+852    	; 0x422 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a4 c1       	rjmp	.+840    	; 0x422 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
      ec:	00 00       	nop
      ee:	5f 00       	.word	0x005f	; ????
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	07 00       	.word	0x0007	; ????
      f8:	07 00       	.word	0x0007	; ????
      fa:	00 00       	nop
      fc:	00 14       	cp	r0, r0
      fe:	7f 14       	cp	r7, r15
     100:	7f 14       	cp	r7, r15
     102:	00 00       	nop
     104:	00 24       	eor	r0, r0
     106:	2a 7f       	andi	r18, 0xFA	; 250
     108:	2a 12       	cpse	r2, r26
     10a:	00 00       	nop
     10c:	00 23       	and	r16, r16
     10e:	13 08       	sbc	r1, r3
     110:	64 62       	ori	r22, 0x24	; 36
     112:	00 00       	nop
     114:	00 36       	cpi	r16, 0x60	; 96
     116:	49 55       	subi	r20, 0x59	; 89
     118:	22 50       	subi	r18, 0x02	; 2
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	05 03       	mulsu	r16, r21
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 1c       	adc	r0, r0
     126:	22 41       	sbci	r18, 0x12	; 18
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 41       	sbci	r16, 0x10	; 16
     12e:	22 1c       	adc	r2, r2
     130:	00 00       	nop
     132:	00 00       	nop
     134:	00 08       	sbc	r0, r0
     136:	2a 1c       	adc	r2, r10
     138:	2a 08       	sbc	r2, r10
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	08 3e       	cpi	r16, 0xE8	; 232
     140:	08 08       	sbc	r0, r8
     142:	00 00       	nop
     144:	00 a0       	ldd	r0, Z+32	; 0x20
     146:	60 00       	.word	0x0060	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 08       	sbc	r0, r0
     14e:	08 08       	sbc	r0, r8
     150:	08 08       	sbc	r0, r8
     152:	00 00       	nop
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 20       	and	r0, r0
     15e:	10 08       	sbc	r1, r0
     160:	04 02       	muls	r16, r20
     162:	00 00       	nop
     164:	00 3e       	cpi	r16, 0xE0	; 224
     166:	51 49       	sbci	r21, 0x91	; 145
     168:	45 3e       	cpi	r20, 0xE5	; 229
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	42 7f       	andi	r20, 0xF2	; 242
     170:	40 00       	.word	0x0040	; ????
     172:	00 00       	nop
     174:	00 62       	ori	r16, 0x20	; 32
     176:	51 49       	sbci	r21, 0x91	; 145
     178:	49 46       	sbci	r20, 0x69	; 105
     17a:	00 00       	nop
     17c:	00 22       	and	r0, r16
     17e:	41 49       	sbci	r20, 0x91	; 145
     180:	49 36       	cpi	r20, 0x69	; 105
     182:	00 00       	nop
     184:	00 18       	sub	r0, r0
     186:	14 12       	cpse	r1, r20
     188:	7f 10       	cpse	r7, r15
     18a:	00 00       	nop
     18c:	00 27       	eor	r16, r16
     18e:	45 45       	sbci	r20, 0x55	; 85
     190:	45 39       	cpi	r20, 0x95	; 149
     192:	00 00       	nop
     194:	00 3c       	cpi	r16, 0xC0	; 192
     196:	4a 49       	sbci	r20, 0x9A	; 154
     198:	49 30       	cpi	r20, 0x09	; 9
     19a:	00 00       	nop
     19c:	00 01       	movw	r0, r0
     19e:	71 09       	sbc	r23, r1
     1a0:	05 03       	mulsu	r16, r21
     1a2:	00 00       	nop
     1a4:	00 36       	cpi	r16, 0x60	; 96
     1a6:	49 49       	sbci	r20, 0x99	; 153
     1a8:	49 36       	cpi	r20, 0x69	; 105
     1aa:	00 00       	nop
     1ac:	00 06       	cpc	r0, r16
     1ae:	49 49       	sbci	r20, 0x99	; 153
     1b0:	29 1e       	adc	r2, r25
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	36 36       	cpi	r19, 0x66	; 102
     1b8:	00 00       	nop
     1ba:	00 00       	nop
     1bc:	00 00       	nop
     1be:	ac 6c       	ori	r26, 0xCC	; 204
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 00       	.word	0x0041	; ????
     1ca:	00 00       	nop
     1cc:	00 14       	cp	r0, r0
     1ce:	14 14       	cp	r1, r4
     1d0:	14 14       	cp	r1, r4
     1d2:	00 00       	nop
     1d4:	00 41       	sbci	r16, 0x10	; 16
     1d6:	22 14       	cp	r2, r2
     1d8:	08 00       	.word	0x0008	; ????
     1da:	00 00       	nop
     1dc:	00 02       	muls	r16, r16
     1de:	01 51       	subi	r16, 0x11	; 17
     1e0:	09 06       	cpc	r0, r25
     1e2:	00 00       	nop
     1e4:	00 32       	cpi	r16, 0x20	; 32
     1e6:	49 79       	andi	r20, 0x99	; 153
     1e8:	41 3e       	cpi	r20, 0xE1	; 225
     1ea:	00 00       	nop
     1ec:	00 7e       	andi	r16, 0xE0	; 224
     1ee:	09 09       	sbc	r16, r9
     1f0:	09 7e       	andi	r16, 0xE9	; 233
     1f2:	00 00       	nop
     1f4:	00 7f       	andi	r16, 0xF0	; 240
     1f6:	49 49       	sbci	r20, 0x99	; 153
     1f8:	49 36       	cpi	r20, 0x69	; 105
     1fa:	00 00       	nop
     1fc:	00 3e       	cpi	r16, 0xE0	; 224
     1fe:	41 41       	sbci	r20, 0x11	; 17
     200:	41 22       	and	r4, r17
     202:	00 00       	nop
     204:	00 7f       	andi	r16, 0xF0	; 240
     206:	41 41       	sbci	r20, 0x11	; 17
     208:	22 1c       	adc	r2, r2
     20a:	00 00       	nop
     20c:	00 7f       	andi	r16, 0xF0	; 240
     20e:	49 49       	sbci	r20, 0x99	; 153
     210:	49 41       	sbci	r20, 0x19	; 25
     212:	00 00       	nop
     214:	00 7f       	andi	r16, 0xF0	; 240
     216:	09 09       	sbc	r16, r9
     218:	09 01       	movw	r0, r18
     21a:	00 00       	nop
     21c:	00 3e       	cpi	r16, 0xE0	; 224
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	51 72       	andi	r21, 0x21	; 33
     222:	00 00       	nop
     224:	00 7f       	andi	r16, 0xF0	; 240
     226:	08 08       	sbc	r0, r8
     228:	08 7f       	andi	r16, 0xF8	; 248
     22a:	00 00       	nop
     22c:	00 41       	sbci	r16, 0x10	; 16
     22e:	7f 41       	sbci	r23, 0x1F	; 31
     230:	00 00       	nop
     232:	00 00       	nop
     234:	00 20       	and	r0, r0
     236:	40 41       	sbci	r20, 0x10	; 16
     238:	3f 01       	movw	r6, r30
     23a:	00 00       	nop
     23c:	00 7f       	andi	r16, 0xF0	; 240
     23e:	08 14       	cp	r0, r8
     240:	22 41       	sbci	r18, 0x12	; 18
     242:	00 00       	nop
     244:	00 7f       	andi	r16, 0xF0	; 240
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	00 00       	nop
     24c:	00 7f       	andi	r16, 0xF0	; 240
     24e:	02 0c       	add	r0, r2
     250:	02 7f       	andi	r16, 0xF2	; 242
     252:	00 00       	nop
     254:	00 7f       	andi	r16, 0xF0	; 240
     256:	04 08       	sbc	r0, r4
     258:	10 7f       	andi	r17, 0xF0	; 240
     25a:	00 00       	nop
     25c:	00 3e       	cpi	r16, 0xE0	; 224
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	41 3e       	cpi	r20, 0xE1	; 225
     262:	00 00       	nop
     264:	00 7f       	andi	r16, 0xF0	; 240
     266:	09 09       	sbc	r16, r9
     268:	09 06       	cpc	r0, r25
     26a:	00 00       	nop
     26c:	00 3e       	cpi	r16, 0xE0	; 224
     26e:	41 51       	subi	r20, 0x11	; 17
     270:	21 5e       	subi	r18, 0xE1	; 225
     272:	00 00       	nop
     274:	00 7f       	andi	r16, 0xF0	; 240
     276:	09 19       	sub	r16, r9
     278:	29 46       	sbci	r18, 0x69	; 105
     27a:	00 00       	nop
     27c:	00 26       	eor	r0, r16
     27e:	49 49       	sbci	r20, 0x99	; 153
     280:	49 32       	cpi	r20, 0x29	; 41
     282:	00 00       	nop
     284:	00 01       	movw	r0, r0
     286:	01 7f       	andi	r16, 0xF1	; 241
     288:	01 01       	movw	r0, r2
     28a:	00 00       	nop
     28c:	00 3f       	cpi	r16, 0xF0	; 240
     28e:	40 40       	sbci	r20, 0x00	; 0
     290:	40 3f       	cpi	r20, 0xF0	; 240
     292:	00 00       	nop
     294:	00 1f       	adc	r16, r16
     296:	20 40       	sbci	r18, 0x00	; 0
     298:	20 1f       	adc	r18, r16
     29a:	00 00       	nop
     29c:	00 3f       	cpi	r16, 0xF0	; 240
     29e:	40 38       	cpi	r20, 0x80	; 128
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 63       	ori	r16, 0x30	; 48
     2a6:	14 08       	sbc	r1, r4
     2a8:	14 63       	ori	r17, 0x34	; 52
     2aa:	00 00       	nop
     2ac:	00 03       	mulsu	r16, r16
     2ae:	04 78       	andi	r16, 0x84	; 132
     2b0:	04 03       	mulsu	r16, r20
     2b2:	00 00       	nop
     2b4:	00 61       	ori	r16, 0x10	; 16
     2b6:	51 49       	sbci	r21, 0x91	; 145
     2b8:	45 43       	sbci	r20, 0x35	; 53
     2ba:	00 00       	nop
     2bc:	00 7f       	andi	r16, 0xF0	; 240
     2be:	41 41       	sbci	r20, 0x11	; 17
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 02       	muls	r16, r16
     2c6:	04 08       	sbc	r0, r4
     2c8:	10 20       	and	r1, r0
     2ca:	00 00       	nop
     2cc:	00 41       	sbci	r16, 0x10	; 16
     2ce:	41 7f       	andi	r20, 0xF1	; 241
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 04       	cpc	r0, r0
     2d6:	02 01       	movw	r0, r4
     2d8:	02 04       	cpc	r0, r2
     2da:	00 00       	nop
     2dc:	00 80       	ld	r0, Z
     2de:	80 80       	ld	r8, Z
     2e0:	80 80       	ld	r8, Z
     2e2:	00 00       	nop
     2e4:	00 01       	movw	r0, r0
     2e6:	02 04       	cpc	r0, r2
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	00 20       	and	r0, r0
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	54 78       	andi	r21, 0x84	; 132
     2f2:	00 00       	nop
     2f4:	00 7f       	andi	r16, 0xF0	; 240
     2f6:	48 44       	sbci	r20, 0x48	; 72
     2f8:	44 38       	cpi	r20, 0x84	; 132
     2fa:	00 00       	nop
     2fc:	00 38       	cpi	r16, 0x80	; 128
     2fe:	44 44       	sbci	r20, 0x44	; 68
     300:	28 00       	.word	0x0028	; ????
     302:	00 00       	nop
     304:	00 38       	cpi	r16, 0x80	; 128
     306:	44 44       	sbci	r20, 0x44	; 68
     308:	48 7f       	andi	r20, 0xF8	; 248
     30a:	00 00       	nop
     30c:	00 38       	cpi	r16, 0x80	; 128
     30e:	54 54       	subi	r21, 0x44	; 68
     310:	54 18       	sub	r5, r4
     312:	00 00       	nop
     314:	00 08       	sbc	r0, r0
     316:	7e 09       	sbc	r23, r14
     318:	02 00       	.word	0x0002	; ????
     31a:	00 00       	nop
     31c:	00 18       	sub	r0, r0
     31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     320:	a4 7c       	andi	r26, 0xC4	; 196
     322:	00 00       	nop
     324:	00 7f       	andi	r16, 0xF0	; 240
     326:	08 04       	cpc	r0, r8
     328:	04 78       	andi	r16, 0x84	; 132
     32a:	00 00       	nop
     32c:	00 00       	nop
     32e:	7d 00       	.word	0x007d	; ????
     330:	00 00       	nop
     332:	00 00       	nop
     334:	00 80       	ld	r0, Z
     336:	84 7d       	andi	r24, 0xD4	; 212
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	00 7f       	andi	r16, 0xF0	; 240
     33e:	10 28       	or	r1, r0
     340:	44 00       	.word	0x0044	; ????
     342:	00 00       	nop
     344:	00 41       	sbci	r16, 0x10	; 16
     346:	7f 40       	sbci	r23, 0x0F	; 15
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	00 7c       	andi	r16, 0xC0	; 192
     34e:	04 18       	sub	r0, r4
     350:	04 78       	andi	r16, 0x84	; 132
     352:	00 00       	nop
     354:	00 7c       	andi	r16, 0xC0	; 192
     356:	08 04       	cpc	r0, r8
     358:	7c 00       	.word	0x007c	; ????
     35a:	00 00       	nop
     35c:	00 38       	cpi	r16, 0x80	; 128
     35e:	44 44       	sbci	r20, 0x44	; 68
     360:	38 00       	.word	0x0038	; ????
     362:	00 00       	nop
     364:	00 fc       	sbrc	r0, 0
     366:	24 24       	eor	r2, r4
     368:	18 00       	.word	0x0018	; ????
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	24 24       	eor	r2, r4
     370:	fc 00       	.word	0x00fc	; ????
     372:	00 00       	nop
     374:	00 00       	nop
     376:	7c 08       	sbc	r7, r12
     378:	04 00       	.word	0x0004	; ????
     37a:	00 00       	nop
     37c:	00 48       	sbci	r16, 0x80	; 128
     37e:	54 54       	subi	r21, 0x44	; 68
     380:	24 00       	.word	0x0024	; ????
     382:	00 00       	nop
     384:	00 04       	cpc	r0, r0
     386:	7f 44       	sbci	r23, 0x4F	; 79
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 3c       	cpi	r16, 0xC0	; 192
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	7c 00       	.word	0x007c	; ????
     392:	00 00       	nop
     394:	00 1c       	adc	r0, r0
     396:	20 40       	sbci	r18, 0x00	; 0
     398:	20 1c       	adc	r2, r0
     39a:	00 00       	nop
     39c:	00 3c       	cpi	r16, 0xC0	; 192
     39e:	40 30       	cpi	r20, 0x00	; 0
     3a0:	40 3c       	cpi	r20, 0xC0	; 192
     3a2:	00 00       	nop
     3a4:	00 44       	sbci	r16, 0x40	; 64
     3a6:	28 10       	cpse	r2, r8
     3a8:	28 44       	sbci	r18, 0x48	; 72
     3aa:	00 00       	nop
     3ac:	00 1c       	adc	r0, r0
     3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
     3b0:	7c 00       	.word	0x007c	; ????
     3b2:	00 00       	nop
     3b4:	00 44       	sbci	r16, 0x40	; 64
     3b6:	64 54       	subi	r22, 0x44	; 68
     3b8:	4c 44       	sbci	r20, 0x4C	; 76
     3ba:	00 00       	nop
     3bc:	00 08       	sbc	r0, r0
     3be:	36 41       	sbci	r19, 0x16	; 22
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 00       	nop
     3c6:	7f 00       	.word	0x007f	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	00 41       	sbci	r16, 0x10	; 16
     3ce:	36 08       	sbc	r3, r6
     3d0:	00 00       	nop
     3d2:	00 00       	nop
     3d4:	00 02       	muls	r16, r16
     3d6:	01 01       	movw	r0, r2
     3d8:	02 01       	movw	r0, r4
     3da:	00 00       	nop
     3dc:	00 02       	muls	r16, r16
     3de:	05 05       	cpc	r16, r5
     3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d1 e2       	ldi	r29, 0x21	; 33
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
     3f4:	12 e0       	ldi	r17, 0x02	; 2
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	e0 e1       	ldi	r30, 0x10	; 16
     3fc:	f0 e1       	ldi	r31, 0x10	; 16
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0b bf       	out	0x3b, r16	; 59
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	07 90       	elpm	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	ae 31       	cpi	r26, 0x1E	; 30
     40a:	b1 07       	cpc	r27, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	ae e1       	ldi	r26, 0x1E	; 30
     412:	b2 e0       	ldi	r27, 0x02	; 2
     414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
     416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
     418:	a8 32       	cpi	r26, 0x28	; 40
     41a:	b2 07       	cpc	r27, r18
     41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
     41e:	2a d3       	rcall	.+1620   	; 0xa74 <main>
     420:	f5 c5       	rjmp	.+3050   	; 0x100c <_exit>

00000422 <__bad_interrupt>:
     422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <clock_init>:
#include <avr/interrupt.h>
#include "clock.h"


int clock_init(){
	CLOCK.second = 0;
     424:	e6 e0       	ldi	r30, 0x06	; 6
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	17 82       	std	Z+7, r1	; 0x07
     42a:	16 82       	std	Z+6, r1	; 0x06
	CLOCK.minute = 0;
     42c:	11 86       	std	Z+9, r1	; 0x09
     42e:	10 86       	std	Z+8, r1	; 0x08
	CLOCK.hour = 0;
     430:	13 86       	std	Z+11, r1	; 0x0b
     432:	12 86       	std	Z+10, r1	; 0x0a
	CLOCK.counter = 0;
     434:	11 82       	std	Z+1, r1	; 0x01
     436:	10 82       	st	Z, r1
	CLOCK.interruptFlag = 1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	93 83       	std	Z+3, r25	; 0x03
     43e:	82 83       	std	Z+2, r24	; 0x02
	CLOCK.clock_makeTimeStr();
     440:	02 88       	ldd	r0, Z+18	; 0x12
     442:	f3 89       	ldd	r31, Z+19	; 0x13
     444:	e0 2d       	mov	r30, r0
     446:	19 95       	eicall
	return 1;
}
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	08 95       	ret

0000044e <clock_increment>:

int clock_increment(){
	if(CLOCK.second == 59){
     44e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <CLOCK+0x6>
     452:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <CLOCK+0x7>
     456:	8b 33       	cpi	r24, 0x3B	; 59
     458:	91 05       	cpc	r25, r1
     45a:	39 f5       	brne	.+78     	; 0x4aa <clock_increment+0x5c>
		if(CLOCK.minute == 59){
     45c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CLOCK+0x8>
     460:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CLOCK+0x9>
     464:	8b 33       	cpi	r24, 0x3B	; 59
     466:	91 05       	cpc	r25, r1
     468:	b1 f4       	brne	.+44     	; 0x496 <clock_increment+0x48>
			if(CLOCK.hour == 23){
     46a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <CLOCK+0xa>
     46e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <CLOCK+0xb>
     472:	87 31       	cpi	r24, 0x17	; 23
     474:	91 05       	cpc	r25, r1
     476:	29 f4       	brne	.+10     	; 0x482 <clock_increment+0x34>
				CLOCK.hour = 0;
     478:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CLOCK+0xb>
     47c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <CLOCK+0xa>
     480:	05 c0       	rjmp	.+10     	; 0x48c <clock_increment+0x3e>
			}
			else{
				CLOCK.hour += 1;
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <CLOCK+0xb>
     488:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <CLOCK+0xa>
			}
			CLOCK.minute = 0;
     48c:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <CLOCK+0x9>
     490:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <CLOCK+0x8>
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <clock_increment+0x52>
		}
		else{
			CLOCK.minute += 1;
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <CLOCK+0x9>
     49c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CLOCK+0x8>
		}
		CLOCK.second = 0;
     4a0:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <CLOCK+0x7>
     4a4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <CLOCK+0x6>
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <clock_increment+0x66>
	}
	else{
		CLOCK.second += 1;
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <CLOCK+0x7>
     4b0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <CLOCK+0x6>
	}
	CLOCK.clock_makeTimeStr();
     4b4:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <CLOCK+0x12>
     4b8:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <CLOCK+0x13>
     4bc:	19 95       	eicall
	return 1;
}
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <initTimer0>:
	CLOCK.timeStr[9] = '\r';
	return 1;
}

int initTimer0(){
	TCCR0A = (1<<WGM01);	     //Sets mode to CTC
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);		//Sets prescaler to 1024
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0xF9;				//Sets compare value to 249
     4cc:	99 ef       	ldi	r25, 0xF9	; 249
     4ce:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0xF9;
     4d0:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
     4d2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
     4d6:	85 bb       	out	0x15, r24	; 21
	return 1;
};
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	08 95       	ret

000004de <clock_enableTimerInterrupt>:
	TIMSK4 = (1<<OCIE4A);
	TIFR4 = (1<<OCF4A);
	return 1;
};*/

int clock_enableTimerInterrupt(int timerId){
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	2a 97       	sbiw	r28, 0x0a	; 10
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
	sei();
     4f2:	78 94       	sei
	int (*clock_interruptInitFuncs[5])() = {initTimer0/*, initTimer1, initTimer2, initTimer3, initTimer4*/};
     4f4:	fe 01       	movw	r30, r28
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	2a e0       	ldi	r18, 0x0A	; 10
     4fa:	df 01       	movw	r26, r30
     4fc:	1d 92       	st	X+, r1
     4fe:	2a 95       	dec	r18
     500:	e9 f7       	brne	.-6      	; 0x4fc <clock_enableTimerInterrupt+0x1e>
     502:	22 e6       	ldi	r18, 0x62	; 98
     504:	32 e0       	ldi	r19, 0x02	; 2
     506:	3a 83       	std	Y+2, r19	; 0x02
     508:	29 83       	std	Y+1, r18	; 0x01
	(*clock_interruptInitFuncs[timerId])();
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	e8 0f       	add	r30, r24
     510:	f9 1f       	adc	r31, r25
     512:	01 90       	ld	r0, Z+
     514:	f0 81       	ld	r31, Z
     516:	e0 2d       	mov	r30, r0
     518:	19 95       	eicall
	return 1;
}
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	2a 96       	adiw	r28, 0x0a	; 10
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <clock_makeTimeStr>:
	}
	CLOCK.clock_makeTimeStr();
	return 1;
}

int clock_makeTimeStr(){
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
	if(CLOCK.timeStr == NULL){
     534:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <CLOCK+0x4>
     538:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <CLOCK+0x5>
     53c:	89 2b       	or	r24, r25
     53e:	49 f4       	brne	.+18     	; 0x552 <clock_makeTimeStr+0x22>
		CLOCK.timeStr = (char*)calloc(10, sizeof(char));
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	8a e0       	ldi	r24, 0x0A	; 10
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	fa d3       	rcall	.+2036   	; 0xd3e <calloc>
     54a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <CLOCK+0x5>
     54e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <CLOCK+0x4>
	}
	char tempHour[2];
	char tempMinute[2];
	char tempSecond[2];
	if(CLOCK.hour >= 10){
     552:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <CLOCK+0xa>
     556:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <CLOCK+0xb>
     55a:	8a 30       	cpi	r24, 0x0A	; 10
     55c:	91 05       	cpc	r25, r1
     55e:	64 f0       	brlt	.+24     	; 0x578 <clock_makeTimeStr+0x48>
		tempHour[1] = CLOCK.hour%10 + '0';
     560:	2a e0       	ldi	r18, 0x0A	; 10
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	b9 01       	movw	r22, r18
     566:	c4 d3       	rcall	.+1928   	; 0xcf0 <__divmodhi4>
     568:	40 e3       	ldi	r20, 0x30	; 48
     56a:	48 0f       	add	r20, r24
		tempHour[0] = (CLOCK.hour/10)%10 + '0';
     56c:	cb 01       	movw	r24, r22
     56e:	b9 01       	movw	r22, r18
     570:	bf d3       	rcall	.+1918   	; 0xcf0 <__divmodhi4>
     572:	d0 e3       	ldi	r29, 0x30	; 48
     574:	d8 0f       	add	r29, r24
     576:	06 c0       	rjmp	.+12     	; 0x584 <clock_makeTimeStr+0x54>
	} else{
		tempHour[1] = CLOCK.hour%10 + '0';
     578:	6a e0       	ldi	r22, 0x0A	; 10
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	b9 d3       	rcall	.+1906   	; 0xcf0 <__divmodhi4>
     57e:	40 e3       	ldi	r20, 0x30	; 48
     580:	48 0f       	add	r20, r24
     582:	d0 e3       	ldi	r29, 0x30	; 48
		tempHour[0] = '0';
     584:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CLOCK+0x8>
	}
	if(CLOCK.minute >= 10){
     588:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CLOCK+0x9>
     58c:	8a 30       	cpi	r24, 0x0A	; 10
     58e:	91 05       	cpc	r25, r1
     590:	64 f0       	brlt	.+24     	; 0x5aa <clock_makeTimeStr+0x7a>
		tempMinute[1] = CLOCK.minute%10 + '0';
     592:	ea e0       	ldi	r30, 0x0A	; 10
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	bf 01       	movw	r22, r30
     598:	ab d3       	rcall	.+1878   	; 0xcf0 <__divmodhi4>
     59a:	30 e3       	ldi	r19, 0x30	; 48
     59c:	38 0f       	add	r19, r24
		tempMinute[0] = (CLOCK.minute/10)%10 + '0';
     59e:	cb 01       	movw	r24, r22
     5a0:	bf 01       	movw	r22, r30
     5a2:	a6 d3       	rcall	.+1868   	; 0xcf0 <__divmodhi4>
     5a4:	c0 e3       	ldi	r28, 0x30	; 48
     5a6:	c8 0f       	add	r28, r24
     5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <clock_makeTimeStr+0x86>
		} else{
		tempMinute[1] = CLOCK.minute%10 + '0';
     5aa:	6a e0       	ldi	r22, 0x0A	; 10
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	a0 d3       	rcall	.+1856   	; 0xcf0 <__divmodhi4>
     5b0:	30 e3       	ldi	r19, 0x30	; 48
     5b2:	38 0f       	add	r19, r24
     5b4:	c0 e3       	ldi	r28, 0x30	; 48
		tempMinute[0] = '0';
     5b6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <CLOCK+0x6>
	}
	if(CLOCK.second >= 10){
     5ba:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <CLOCK+0x7>
     5be:	8a 30       	cpi	r24, 0x0A	; 10
     5c0:	91 05       	cpc	r25, r1
     5c2:	5c f0       	brlt	.+22     	; 0x5da <clock_makeTimeStr+0xaa>
		tempSecond[1] = CLOCK.second%10 + '0';
     5c4:	ea e0       	ldi	r30, 0x0A	; 10
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	bf 01       	movw	r22, r30
     5ca:	92 d3       	rcall	.+1828   	; 0xcf0 <__divmodhi4>
     5cc:	20 e3       	ldi	r18, 0x30	; 48
     5ce:	28 0f       	add	r18, r24
		tempSecond[0] = (CLOCK.second/10)%10 + '0';
     5d0:	cb 01       	movw	r24, r22
     5d2:	bf 01       	movw	r22, r30
     5d4:	8d d3       	rcall	.+1818   	; 0xcf0 <__divmodhi4>
     5d6:	80 5d       	subi	r24, 0xD0	; 208
     5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <clock_makeTimeStr+0xb6>
     5da:	6a e0       	ldi	r22, 0x0A	; 10
		} else{
		tempSecond[1] = CLOCK.second%10 + '0';
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	88 d3       	rcall	.+1808   	; 0xcf0 <__divmodhi4>
     5e0:	20 e3       	ldi	r18, 0x30	; 48
     5e2:	28 0f       	add	r18, r24
     5e4:	80 e3       	ldi	r24, 0x30	; 48
     5e6:	e6 e0       	ldi	r30, 0x06	; 6
		tempSecond[0] = '0';
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
	}
	CLOCK.timeStr[0] = tempHour[0];
     5ea:	a4 81       	ldd	r26, Z+4	; 0x04
     5ec:	b5 81       	ldd	r27, Z+5	; 0x05
     5ee:	dc 93       	st	X, r29
     5f0:	a4 81       	ldd	r26, Z+4	; 0x04
     5f2:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[1] = tempHour[1];
     5f4:	11 96       	adiw	r26, 0x01	; 1
     5f6:	4c 93       	st	X, r20
     5f8:	a4 81       	ldd	r26, Z+4	; 0x04
     5fa:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[2] = ':';
     5fc:	9a e3       	ldi	r25, 0x3A	; 58
     5fe:	12 96       	adiw	r26, 0x02	; 2
     600:	9c 93       	st	X, r25
     602:	a4 81       	ldd	r26, Z+4	; 0x04
     604:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[3] = tempMinute[0];
     606:	13 96       	adiw	r26, 0x03	; 3
     608:	cc 93       	st	X, r28
     60a:	a4 81       	ldd	r26, Z+4	; 0x04
     60c:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[4] = tempMinute[1];
     60e:	14 96       	adiw	r26, 0x04	; 4
     610:	3c 93       	st	X, r19
     612:	a4 81       	ldd	r26, Z+4	; 0x04
     614:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[5] = ':';
     616:	15 96       	adiw	r26, 0x05	; 5
     618:	9c 93       	st	X, r25
     61a:	04 80       	ldd	r0, Z+4	; 0x04
     61c:	f5 81       	ldd	r31, Z+5	; 0x05
	CLOCK.timeStr[6] = tempSecond[0];
     61e:	e0 2d       	mov	r30, r0
     620:	86 83       	std	Z+6, r24	; 0x06
     622:	27 83       	std	Z+7, r18	; 0x07
     624:	8a e0       	ldi	r24, 0x0A	; 10
	CLOCK.timeStr[7] = tempSecond[1];
     626:	80 87       	std	Z+8, r24	; 0x08
	CLOCK.timeStr[8] = '\n';
     628:	8d e0       	ldi	r24, 0x0D	; 13
     62a:	81 87       	std	Z+9, r24	; 0x09
	CLOCK.timeStr[9] = '\r';
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <clock_updateClock>:
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
	int (*clock_interruptInitFuncs[5])() = {initTimer0/*, initTimer1, initTimer2, initTimer3, initTimer4*/};
	(*clock_interruptInitFuncs[timerId])();
	return 1;
}

int clock_updateClock(char* clockVal){
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	1f 92       	push	r1
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	8c 01       	movw	r16, r24
	char buffer[2];
	buffer[0] = clockVal[0];
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
     650:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[1];
     652:	81 81       	ldd	r24, Z+1	; 0x01
     654:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.hour = atoi(buffer);
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	ac d4       	rcall	.+2392   	; 0xfb4 <atoi>
     65c:	0f 2e       	mov	r0, r31
     65e:	f6 e0       	ldi	r31, 0x06	; 6
     660:	ef 2e       	mov	r14, r31
     662:	f2 e0       	ldi	r31, 0x02	; 2
     664:	ff 2e       	mov	r15, r31
     666:	f0 2d       	mov	r31, r0
     668:	f7 01       	movw	r30, r14
     66a:	93 87       	std	Z+11, r25	; 0x0b
     66c:	82 87       	std	Z+10, r24	; 0x0a
	buffer[0] = clockVal[3];
     66e:	f8 01       	movw	r30, r16
     670:	83 81       	ldd	r24, Z+3	; 0x03
     672:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[4];
     674:	84 81       	ldd	r24, Z+4	; 0x04
     676:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.minute = atoi(buffer);
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	9b d4       	rcall	.+2358   	; 0xfb4 <atoi>
     67e:	f7 01       	movw	r30, r14
     680:	91 87       	std	Z+9, r25	; 0x09
     682:	80 87       	std	Z+8, r24	; 0x08
	buffer[0] = clockVal[6];
     684:	f8 01       	movw	r30, r16
     686:	86 81       	ldd	r24, Z+6	; 0x06
     688:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[7];
     68a:	87 81       	ldd	r24, Z+7	; 0x07
     68c:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.second = atoi(buffer);
     68e:	ce 01       	movw	r24, r28
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	90 d4       	rcall	.+2336   	; 0xfb4 <atoi>
     694:	f7 01       	movw	r30, r14
     696:	97 83       	std	Z+7, r25	; 0x07
     698:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	08 95       	ret

000006b0 <__vector_21>:
	.clock_makeTimeStr = clock_makeTimeStr,
	.clock_updateClock = clock_updateClock
};


ISR(TIMER0_COMPA_vect){
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	0b b6       	in	r0, 0x3b	; 59
     6bc:	0f 92       	push	r0
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
	CLOCK.counter += 1;
     6da:	e6 e0       	ldi	r30, 0x06	; 6
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	80 81       	ld	r24, Z
     6e0:	91 81       	ldd	r25, Z+1	; 0x01
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	91 83       	std	Z+1, r25	; 0x01
     6e6:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	88 3e       	cpi	r24, 0xE8	; 232
     6ee:	93 40       	sbci	r25, 0x03	; 3
     6f0:	71 f4       	brne	.+28     	; 0x70e <__vector_21+0x5e>
		CLOCK.clock_makeTimeStr();
     6f2:	ef 01       	movw	r28, r30
     6f4:	02 88       	ldd	r0, Z+18	; 0x12
     6f6:	f3 89       	ldd	r31, Z+19	; 0x13
     6f8:	e0 2d       	mov	r30, r0
     6fa:	19 95       	eicall
		CLOCK.clock_increment();
     6fc:	e8 89       	ldd	r30, Y+16	; 0x10
     6fe:	f9 89       	ldd	r31, Y+17	; 0x11
     700:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	9b 83       	std	Y+3, r25	; 0x03
     708:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     70a:	19 82       	std	Y+1, r1	; 0x01
     70c:	18 82       	st	Y, r1
	}
}
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	0f 90       	pop	r0
     72c:	0b be       	out	0x3b, r0	; 59
     72e:	0f 90       	pop	r0
     730:	0f be       	out	0x3f, r0	; 63
     732:	0f 90       	pop	r0
     734:	1f 90       	pop	r1
     736:	18 95       	reti

00000738 <__vector_17>:

ISR(TIMER1_COMPA_vect){
     738:	1f 92       	push	r1
     73a:	0f 92       	push	r0
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	0f 92       	push	r0
     740:	11 24       	eor	r1, r1
     742:	0b b6       	in	r0, 0x3b	; 59
     744:	0f 92       	push	r0
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
	CLOCK.counter += 1;
     762:	e6 e0       	ldi	r30, 0x06	; 6
     764:	f2 e0       	ldi	r31, 0x02	; 2
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	91 83       	std	Z+1, r25	; 0x01
     76e:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	88 3e       	cpi	r24, 0xE8	; 232
     776:	93 40       	sbci	r25, 0x03	; 3
     778:	71 f4       	brne	.+28     	; 0x796 <__vector_17+0x5e>
		CLOCK.clock_makeTimeStr();
     77a:	ef 01       	movw	r28, r30
     77c:	02 88       	ldd	r0, Z+18	; 0x12
     77e:	f3 89       	ldd	r31, Z+19	; 0x13
     780:	e0 2d       	mov	r30, r0
     782:	19 95       	eicall
		CLOCK.clock_increment();
     784:	e8 89       	ldd	r30, Y+16	; 0x10
     786:	f9 89       	ldd	r31, Y+17	; 0x11
     788:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	9b 83       	std	Y+3, r25	; 0x03
     790:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     792:	19 82       	std	Y+1, r1	; 0x01
     794:	18 82       	st	Y, r1
	}
}
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	bf 91       	pop	r27
     7a0:	af 91       	pop	r26
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	7f 91       	pop	r23
     7a8:	6f 91       	pop	r22
     7aa:	5f 91       	pop	r21
     7ac:	4f 91       	pop	r20
     7ae:	3f 91       	pop	r19
     7b0:	2f 91       	pop	r18
     7b2:	0f 90       	pop	r0
     7b4:	0b be       	out	0x3b, r0	; 59
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti

000007c0 <__vector_13>:

ISR(TIMER2_COMPA_vect){
     7c0:	1f 92       	push	r1
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	0f 92       	push	r0
     7c8:	11 24       	eor	r1, r1
     7ca:	0b b6       	in	r0, 0x3b	; 59
     7cc:	0f 92       	push	r0
     7ce:	2f 93       	push	r18
     7d0:	3f 93       	push	r19
     7d2:	4f 93       	push	r20
     7d4:	5f 93       	push	r21
     7d6:	6f 93       	push	r22
     7d8:	7f 93       	push	r23
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	af 93       	push	r26
     7e0:	bf 93       	push	r27
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	CLOCK.counter += 1;
     7ea:	e6 e0       	ldi	r30, 0x06	; 6
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	88 3e       	cpi	r24, 0xE8	; 232
     7fe:	93 40       	sbci	r25, 0x03	; 3
     800:	71 f4       	brne	.+28     	; 0x81e <__vector_13+0x5e>
		CLOCK.clock_makeTimeStr();
     802:	ef 01       	movw	r28, r30
     804:	02 88       	ldd	r0, Z+18	; 0x12
     806:	f3 89       	ldd	r31, Z+19	; 0x13
     808:	e0 2d       	mov	r30, r0
     80a:	19 95       	eicall
		CLOCK.clock_increment();
     80c:	e8 89       	ldd	r30, Y+16	; 0x10
     80e:	f9 89       	ldd	r31, Y+17	; 0x11
     810:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	9b 83       	std	Y+3, r25	; 0x03
     818:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     81a:	19 82       	std	Y+1, r1	; 0x01
     81c:	18 82       	st	Y, r1
	}
}
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	bf 91       	pop	r27
     828:	af 91       	pop	r26
     82a:	9f 91       	pop	r25
     82c:	8f 91       	pop	r24
     82e:	7f 91       	pop	r23
     830:	6f 91       	pop	r22
     832:	5f 91       	pop	r21
     834:	4f 91       	pop	r20
     836:	3f 91       	pop	r19
     838:	2f 91       	pop	r18
     83a:	0f 90       	pop	r0
     83c:	0b be       	out	0x3b, r0	; 59
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <__vector_32>:

ISR(TIMER3_COMPA_vect){
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	0b b6       	in	r0, 0x3b	; 59
     854:	0f 92       	push	r0
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
	CLOCK.counter += 1;
     872:	e6 e0       	ldi	r30, 0x06	; 6
     874:	f2 e0       	ldi	r31, 0x02	; 2
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	91 83       	std	Z+1, r25	; 0x01
     87e:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     880:	80 81       	ld	r24, Z
     882:	91 81       	ldd	r25, Z+1	; 0x01
     884:	88 3e       	cpi	r24, 0xE8	; 232
     886:	93 40       	sbci	r25, 0x03	; 3
     888:	71 f4       	brne	.+28     	; 0x8a6 <__vector_32+0x5e>
		CLOCK.clock_makeTimeStr();
     88a:	ef 01       	movw	r28, r30
     88c:	02 88       	ldd	r0, Z+18	; 0x12
     88e:	f3 89       	ldd	r31, Z+19	; 0x13
     890:	e0 2d       	mov	r30, r0
     892:	19 95       	eicall
		CLOCK.clock_increment();
     894:	e8 89       	ldd	r30, Y+16	; 0x10
     896:	f9 89       	ldd	r31, Y+17	; 0x11
     898:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9b 83       	std	Y+3, r25	; 0x03
     8a0:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     8a2:	19 82       	std	Y+1, r1	; 0x01
     8a4:	18 82       	st	Y, r1
	}
}
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <__vector_42>:

ISR(TIMER4_COMPA_vect){
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	0b b6       	in	r0, 0x3b	; 59
     8dc:	0f 92       	push	r0
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
	CLOCK.counter += 1;
     8fa:	e6 e0       	ldi	r30, 0x06	; 6
     8fc:	f2 e0       	ldi	r31, 0x02	; 2
     8fe:	80 81       	ld	r24, Z
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	91 83       	std	Z+1, r25	; 0x01
     906:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	88 3e       	cpi	r24, 0xE8	; 232
     90e:	93 40       	sbci	r25, 0x03	; 3
     910:	71 f4       	brne	.+28     	; 0x92e <__vector_42+0x5e>
		CLOCK.clock_makeTimeStr();
     912:	ef 01       	movw	r28, r30
     914:	02 88       	ldd	r0, Z+18	; 0x12
     916:	f3 89       	ldd	r31, Z+19	; 0x13
     918:	e0 2d       	mov	r30, r0
     91a:	19 95       	eicall
		CLOCK.clock_increment();
     91c:	e8 89       	ldd	r30, Y+16	; 0x10
     91e:	f9 89       	ldd	r31, Y+17	; 0x11
     920:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	9b 83       	std	Y+3, r25	; 0x03
     928:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     92a:	19 82       	std	Y+1, r1	; 0x01
     92c:	18 82       	st	Y, r1
	}
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0b be       	out	0x3b, r0	; 59
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
     958:	81 b1       	in	r24, 0x01	; 1
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	81 b9       	out	0x01, r24	; 1
     95e:	82 b1       	in	r24, 0x02	; 2
     960:	81 60       	ori	r24, 0x01	; 1
     962:	82 b9       	out	0x02, r24	; 2
     964:	2f ef       	ldi	r18, 0xFF	; 255
     966:	83 ed       	ldi	r24, 0xD3	; 211
     968:	90 e3       	ldi	r25, 0x30	; 48
     96a:	21 50       	subi	r18, 0x01	; 1
     96c:	80 40       	sbci	r24, 0x00	; 0
     96e:	90 40       	sbci	r25, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <I2C_Init+0x12>
     972:	00 c0       	rjmp	.+0      	; 0x974 <I2C_Init+0x1c>
     974:	00 00       	nop
     976:	82 e1       	ldi	r24, 0x12	; 18
     978:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     97c:	e9 eb       	ldi	r30, 0xB9	; 185
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	8c 7f       	andi	r24, 0xFC	; 252
     984:	80 83       	st	Z, r24
     986:	85 e0       	ldi	r24, 0x05	; 5
     988:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     98c:	08 95       	ret

0000098e <I2C_Start>:
     98e:	94 ea       	ldi	r25, 0xA4	; 164
     990:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     994:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     998:	99 23       	and	r25, r25
     99a:	e4 f7       	brge	.-8      	; 0x994 <I2C_Start+0x6>
     99c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     9a0:	98 7f       	andi	r25, 0xF8	; 248
     9a2:	98 30       	cpi	r25, 0x08	; 8
     9a4:	91 f4       	brne	.+36     	; 0x9ca <I2C_Start+0x3c>
     9a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     9aa:	84 e8       	ldi	r24, 0x84	; 132
     9ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9b4:	88 23       	and	r24, r24
     9b6:	e4 f7       	brge	.-8      	; 0x9b0 <I2C_Start+0x22>
     9b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     9bc:	88 7f       	andi	r24, 0xF8	; 248
     9be:	88 31       	cpi	r24, 0x18	; 24
     9c0:	31 f0       	breq	.+12     	; 0x9ce <I2C_Start+0x40>
     9c2:	80 32       	cpi	r24, 0x20	; 32
     9c4:	31 f4       	brne	.+12     	; 0x9d2 <I2C_Start+0x44>
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	08 95       	ret
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 95       	ret
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	08 95       	ret

000009d6 <I2C_Write>:
     9d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     9da:	84 e8       	ldi	r24, 0x84	; 132
     9dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9e4:	88 23       	and	r24, r24
     9e6:	e4 f7       	brge	.-8      	; 0x9e0 <I2C_Write+0xa>
     9e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     9ec:	88 7f       	andi	r24, 0xF8	; 248
     9ee:	88 32       	cpi	r24, 0x28	; 40
     9f0:	21 f0       	breq	.+8      	; 0x9fa <I2C_Write+0x24>
     9f2:	80 33       	cpi	r24, 0x30	; 48
     9f4:	21 f4       	brne	.+8      	; 0x9fe <I2C_Write+0x28>
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	08 95       	ret
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	08 95       	ret
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	08 95       	ret

00000a02 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     a02:	84 e9       	ldi	r24, 0x94	; 148
     a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     a08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     a0c:	84 fd       	sbrc	r24, 4
     a0e:	fc cf       	rjmp	.-8      	; 0xa08 <I2C_Stop+0x6>
     a10:	08 95       	ret

00000a12 <initExternalInterrupt>:
volatile int gate = 0;
volatile int bufferIndex = 0;
char RX = ' ';

void initExternalInterrupt(){
	DDRE = 0x00; //E4
     a12:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0xFF;
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	8e b9       	out	0x0e, r24	; 14
	EICRB = 0b00000010;
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
	EIMSK = 0b00010000;
     a1e:	80 e1       	ldi	r24, 0x10	; 16
     a20:	8d bb       	out	0x1d, r24	; 29
	sei();
     a22:	78 94       	sei
     a24:	08 95       	ret

00000a26 <init>:
}

void init(){
	int ubrr = F_CPU/(16*19200)-1;
	UBRR0H = (unsigned char)(ubrr>>8);
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
     a2c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B |= (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     a30:	e1 ec       	ldi	r30, 0xC1	; 193
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	88 6d       	ori	r24, 0xD8	; 216
     a38:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     a3a:	e2 ec       	ldi	r30, 0xC2	; 194
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	86 60       	ori	r24, 0x06	; 6
     a42:	80 83       	st	Z, r24
     a44:	08 95       	ret

00000a46 <receiveChar>:

int receiveChar(){
	/*UART.RXh = UCSR0B;
	UART.RXl = UDR0;
	UART.RXh = (UART.RXh >> 1) & 0x01;*/
	RX = /*((UART.RXh << 8) | UART.RXl)*/UDR0;
     a46:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     a4a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <RX>
	return 1;
}
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	08 95       	ret

00000a54 <trans>:

void trans(){
	if(!gate){
     a54:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <gate>
     a58:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <gate+0x1>
     a5c:	89 2b       	or	r24, r25
     a5e:	49 f4       	brne	.+18     	; 0xa72 <trans+0x1e>
		UDR0 = 0x31;
     a60:	81 e3       	ldi	r24, 0x31	; 49
     a62:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
		gate = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <gate+0x1>
     a6e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <gate>
     a72:	08 95       	ret

00000a74 <main>:
	}
}

int main(void){
	_i2c_address = 0X78;
     a74:	88 e7       	ldi	r24, 0x78	; 120
     a76:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <_i2c_address>
	I2C_Init();
     a7a:	6e df       	rcall	.-292    	; 0x958 <I2C_Init>
	InitializeDisplay();
     a7c:	92 d0       	rcall	.+292    	; 0xba2 <InitializeDisplay>
	print_fonts();
     a7e:	f7 d0       	rcall	.+494    	; 0xc6e <print_fonts>
	clear_display();
     a80:	e2 d0       	rcall	.+452    	; 0xc46 <clear_display>
     a82:	d1 df       	rcall	.-94     	; 0xa26 <init>
	init();
     a84:	c6 e0       	ldi	r28, 0x06	; 6
     a86:	d2 e0       	ldi	r29, 0x02	; 2
	CLOCK.clock_init();
     a88:	8e 85       	ldd	r24, Y+14	; 0x0e
     a8a:	9f 85       	ldd	r25, Y+15	; 0x0f
     a8c:	fc 01       	movw	r30, r24
     a8e:	19 95       	eicall
     a90:	ec 85       	ldd	r30, Y+12	; 0x0c
     a92:	fd 85       	ldd	r31, Y+13	; 0x0d
	CLOCK.clock_enableTimerInterrupt(0);
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	19 95       	eicall
     a9a:	bb df       	rcall	.-138    	; 0xa12 <initExternalInterrupt>
	//UART_init(ASYNC, 19200, 0);
	initExternalInterrupt();
     a9c:	ff ef       	ldi	r31, 0xFF	; 255
     a9e:	23 ed       	ldi	r18, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa0:	80 e3       	ldi	r24, 0x30	; 48
     aa2:	f1 50       	subi	r31, 0x01	; 1
     aa4:	20 40       	sbci	r18, 0x00	; 0
     aa6:	80 40       	sbci	r24, 0x00	; 0
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <main+0x2e>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <main+0x38>
     aac:	00 00       	nop
     aae:	d2 df       	rcall	.-92     	; 0xa54 <trans>
	//UART_transmitStr("To set the clock, enter a time in the format: \"hh:mm:ss\" and press the button.");
	_delay_ms(1000);
    while (1){
		trans();
     ab0:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <CLOCK+0x12>
		CLOCK.clock_makeTimeStr();
     ab4:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <CLOCK+0x13>
     ab8:	19 95       	eicall
     aba:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <gate1>
		//UART.UART_transmitStr(CLOCK.timeStr);
		/*for(int i = 0; i < 8; i++){
			UART_transmitChar('w');
			sendCharXY(CLOCK.timeStr[i], 0, i);
		}*/
		if(gate1){
     abe:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <gate1+0x1>
     ac2:	89 2b       	or	r24, r25
     ac4:	21 f0       	breq	.+8      	; 0xace <main+0x5a>
     ac6:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <gate1+0x1>
			//CLOCK.clock_updateClock(timeVal);
			gate1 = 0;
     aca:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <gate1>
     ace:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <CLOCK+0x2>
		}
		if(CLOCK.interruptFlag){
     ad2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <CLOCK+0x3>
     ad6:	89 2b       	or	r24, r25
     ad8:	51 f3       	breq	.-44     	; 0xaae <main+0x3a>
     ada:	b5 d0       	rcall	.+362    	; 0xc46 <clear_display>
			clear_display();
     adc:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <CLOCK+0x3>
			CLOCK.interruptFlag = 0;
     ae0:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <CLOCK+0x2>
     ae4:	e4 cf       	rjmp	.-56     	; 0xaae <main+0x3a>

00000ae6 <__vector_5>:
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
		}
    }
}

ISR(INT4_vect){
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
	gate1 = 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <gate1+0x1>
     afc:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <gate1>
}
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
     b0c:	18 95       	reti

00000b0e <__vector_25>:

ISR(USART0_RX_vect){
     b0e:	1f 92       	push	r1
     b10:	0f 92       	push	r0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	0f 92       	push	r0
     b16:	11 24       	eor	r1, r1
     b18:	0b b6       	in	r0, 0x3b	; 59
     b1a:	0f 92       	push	r0
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
	receiveChar();
     b34:	88 df       	rcall	.-240    	; 0xa46 <receiveChar>
	bufferIndex += 1;
     b36:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
     b3a:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
     b44:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
};
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0b be       	out	0x3b, r0	; 59
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <__vector_27>:

ISR(USART0_TX_vect){
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
	gate = 0;
     b78:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <gate+0x1>
     b7c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <gate>
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <ssd1306_command>:

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
     b8a:	cf 93       	push	r28
     b8c:	c8 2f       	mov	r28, r24
     b8e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_i2c_address>
     b92:	fd de       	rcall	.-518    	; 0x98e <I2C_Start>
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	1f df       	rcall	.-450    	; 0x9d6 <I2C_Write>
     b98:	8c 2f       	mov	r24, r28
     b9a:	1d df       	rcall	.-454    	; 0x9d6 <I2C_Write>
     b9c:	32 df       	rcall	.-412    	; 0xa02 <I2C_Stop>
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <InitializeDisplay>:
     ba2:	8e ea       	ldi	r24, 0xAE	; 174
     ba4:	f2 df       	rcall	.-28     	; 0xb8a <ssd1306_command>
     ba6:	85 ed       	ldi	r24, 0xD5	; 213
     ba8:	f0 df       	rcall	.-32     	; 0xb8a <ssd1306_command>
     baa:	80 e8       	ldi	r24, 0x80	; 128
     bac:	ee df       	rcall	.-36     	; 0xb8a <ssd1306_command>
     bae:	88 ea       	ldi	r24, 0xA8	; 168
     bb0:	ec df       	rcall	.-40     	; 0xb8a <ssd1306_command>
     bb2:	8f e3       	ldi	r24, 0x3F	; 63
     bb4:	ea df       	rcall	.-44     	; 0xb8a <ssd1306_command>
     bb6:	83 ed       	ldi	r24, 0xD3	; 211
     bb8:	e8 df       	rcall	.-48     	; 0xb8a <ssd1306_command>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	e6 df       	rcall	.-52     	; 0xb8a <ssd1306_command>
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	e4 df       	rcall	.-56     	; 0xb8a <ssd1306_command>
     bc2:	8d e8       	ldi	r24, 0x8D	; 141
     bc4:	e2 df       	rcall	.-60     	; 0xb8a <ssd1306_command>
     bc6:	84 e1       	ldi	r24, 0x14	; 20
     bc8:	e0 df       	rcall	.-64     	; 0xb8a <ssd1306_command>
     bca:	80 e2       	ldi	r24, 0x20	; 32
     bcc:	de df       	rcall	.-68     	; 0xb8a <ssd1306_command>
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	dc df       	rcall	.-72     	; 0xb8a <ssd1306_command>
     bd2:	81 ea       	ldi	r24, 0xA1	; 161
     bd4:	da df       	rcall	.-76     	; 0xb8a <ssd1306_command>
     bd6:	88 ec       	ldi	r24, 0xC8	; 200
     bd8:	d8 df       	rcall	.-80     	; 0xb8a <ssd1306_command>
     bda:	8a ed       	ldi	r24, 0xDA	; 218
     bdc:	d6 df       	rcall	.-84     	; 0xb8a <ssd1306_command>
     bde:	82 e1       	ldi	r24, 0x12	; 18
     be0:	d4 df       	rcall	.-88     	; 0xb8a <ssd1306_command>
     be2:	81 e8       	ldi	r24, 0x81	; 129
     be4:	d2 df       	rcall	.-92     	; 0xb8a <ssd1306_command>
     be6:	8f ec       	ldi	r24, 0xCF	; 207
     be8:	d0 df       	rcall	.-96     	; 0xb8a <ssd1306_command>
     bea:	89 ed       	ldi	r24, 0xD9	; 217
     bec:	ce df       	rcall	.-100    	; 0xb8a <ssd1306_command>
     bee:	81 ef       	ldi	r24, 0xF1	; 241
     bf0:	cc df       	rcall	.-104    	; 0xb8a <ssd1306_command>
     bf2:	8b ed       	ldi	r24, 0xDB	; 219
     bf4:	ca df       	rcall	.-108    	; 0xb8a <ssd1306_command>
     bf6:	80 e4       	ldi	r24, 0x40	; 64
     bf8:	c8 df       	rcall	.-112    	; 0xb8a <ssd1306_command>
     bfa:	84 ea       	ldi	r24, 0xA4	; 164
     bfc:	c6 df       	rcall	.-116    	; 0xb8a <ssd1306_command>
     bfe:	86 ea       	ldi	r24, 0xA6	; 166
     c00:	c4 df       	rcall	.-120    	; 0xb8a <ssd1306_command>
     c02:	8f ea       	ldi	r24, 0xAF	; 175
     c04:	c2 cf       	rjmp	.-124    	; 0xb8a <ssd1306_command>
     c06:	08 95       	ret

00000c08 <SendChar>:
     c08:	cf 93       	push	r28
     c0a:	c8 2f       	mov	r28, r24
     c0c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_i2c_address>
     c10:	be de       	rcall	.-644    	; 0x98e <I2C_Start>
     c12:	80 e4       	ldi	r24, 0x40	; 64
     c14:	e0 de       	rcall	.-576    	; 0x9d6 <I2C_Write>
     c16:	8c 2f       	mov	r24, r28
     c18:	de de       	rcall	.-580    	; 0x9d6 <I2C_Write>
     c1a:	f3 de       	rcall	.-538    	; 0xa02 <I2C_Stop>
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <setXY>:
     c20:	cf 93       	push	r28
     c22:	c6 2f       	mov	r28, r22
     c24:	80 55       	subi	r24, 0x50	; 80
     c26:	b1 df       	rcall	.-158    	; 0xb8a <ssd1306_command>
     c28:	8c 2f       	mov	r24, r28
     c2a:	88 0f       	add	r24, r24
     c2c:	88 0f       	add	r24, r24
     c2e:	88 0f       	add	r24, r24
     c30:	88 70       	andi	r24, 0x08	; 8
     c32:	ab df       	rcall	.-170    	; 0xb8a <ssd1306_command>
     c34:	8c 2f       	mov	r24, r28
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	96 95       	lsr	r25
     c3a:	87 95       	ror	r24
     c3c:	8f 70       	andi	r24, 0x0F	; 15
     c3e:	80 5f       	subi	r24, 0xF0	; 240
     c40:	a4 df       	rcall	.-184    	; 0xb8a <ssd1306_command>
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <clear_display>:
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	d0 e0       	ldi	r29, 0x00	; 0
     c4c:	0b c0       	rjmp	.+22     	; 0xc64 <clear_display+0x1e>
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	8d 2f       	mov	r24, r29
     c52:	e6 df       	rcall	.-52     	; 0xc20 <setXY>
     c54:	c0 e0       	ldi	r28, 0x00	; 0
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <clear_display+0x18>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	d6 df       	rcall	.-84     	; 0xc08 <SendChar>
     c5c:	cf 5f       	subi	r28, 0xFF	; 255
     c5e:	cc 23       	and	r28, r28
     c60:	dc f7       	brge	.-10     	; 0xc58 <clear_display+0x12>
     c62:	df 5f       	subi	r29, 0xFF	; 255
     c64:	d8 30       	cpi	r29, 0x08	; 8
     c66:	98 f3       	brcs	.-26     	; 0xc4e <clear_display+0x8>
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <print_fonts>:
void print_fonts(){
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
	clear_display();
     c7c:	e4 df       	rcall	.-56     	; 0xc46 <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
     c7e:	e1 2c       	mov	r14, r1
     c80:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
     c82:	68 94       	set
     c84:	dd 24       	eor	r13, r13
     c86:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
     c88:	27 c0       	rjmp	.+78     	; 0xcd8 <print_fonts+0x6a>
		setXY(k,0);
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	8e 2d       	mov	r24, r14
     c8e:	c8 df       	rcall	.-112    	; 0xc20 <setXY>

		for (int j=0;j<16;j++)
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	19 c0       	rjmp	.+50     	; 0xcc8 <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
     c96:	f8 01       	movw	r30, r16
     c98:	ed 0d       	add	r30, r13
     c9a:	f1 1d       	adc	r31, r1
     c9c:	b0 97       	sbiw	r30, 0x20	; 32
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	ec 51       	subi	r30, 0x1C	; 28
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	ec 0f       	add	r30, r28
     cb0:	fd 1f       	adc	r31, r29
     cb2:	84 91       	lpm	r24, Z
     cb4:	a9 df       	rcall	.-174    	; 0xc08 <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
     cb6:	21 96       	adiw	r28, 0x01	; 1
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <print_fonts+0x50>
     cba:	c0 e0       	ldi	r28, 0x00	; 0
     cbc:	d0 e0       	ldi	r29, 0x00	; 0
     cbe:	c8 30       	cpi	r28, 0x08	; 8
     cc0:	d1 05       	cpc	r29, r1
     cc2:	4c f3       	brlt	.-46     	; 0xc96 <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	00 31       	cpi	r16, 0x10	; 16
     cca:	11 05       	cpc	r17, r1
     ccc:	b4 f3       	brlt	.-20     	; 0xcba <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
     cce:	80 e1       	ldi	r24, 0x10	; 16
     cd0:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	e8 1a       	sub	r14, r24
     cd6:	f8 0a       	sbc	r15, r24
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	e8 16       	cp	r14, r24
     cdc:	f1 04       	cpc	r15, r1
     cde:	ac f2       	brlt	.-86     	; 0xc8a <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	08 95       	ret

00000cf0 <__divmodhi4>:
     cf0:	97 fb       	bst	r25, 7
     cf2:	07 2e       	mov	r0, r23
     cf4:	16 f4       	brtc	.+4      	; 0xcfa <__divmodhi4+0xa>
     cf6:	00 94       	com	r0
     cf8:	06 d0       	rcall	.+12     	; 0xd06 <__divmodhi4_neg1>
     cfa:	77 fd       	sbrc	r23, 7
     cfc:	08 d0       	rcall	.+16     	; 0xd0e <__divmodhi4_neg2>
     cfe:	0b d0       	rcall	.+22     	; 0xd16 <__udivmodhi4>
     d00:	07 fc       	sbrc	r0, 7
     d02:	05 d0       	rcall	.+10     	; 0xd0e <__divmodhi4_neg2>
     d04:	3e f4       	brtc	.+14     	; 0xd14 <__divmodhi4_exit>

00000d06 <__divmodhi4_neg1>:
     d06:	90 95       	com	r25
     d08:	81 95       	neg	r24
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	08 95       	ret

00000d0e <__divmodhi4_neg2>:
     d0e:	70 95       	com	r23
     d10:	61 95       	neg	r22
     d12:	7f 4f       	sbci	r23, 0xFF	; 255

00000d14 <__divmodhi4_exit>:
     d14:	08 95       	ret

00000d16 <__udivmodhi4>:
     d16:	aa 1b       	sub	r26, r26
     d18:	bb 1b       	sub	r27, r27
     d1a:	51 e1       	ldi	r21, 0x11	; 17
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <__udivmodhi4_ep>

00000d1e <__udivmodhi4_loop>:
     d1e:	aa 1f       	adc	r26, r26
     d20:	bb 1f       	adc	r27, r27
     d22:	a6 17       	cp	r26, r22
     d24:	b7 07       	cpc	r27, r23
     d26:	10 f0       	brcs	.+4      	; 0xd2c <__udivmodhi4_ep>
     d28:	a6 1b       	sub	r26, r22
     d2a:	b7 0b       	sbc	r27, r23

00000d2c <__udivmodhi4_ep>:
     d2c:	88 1f       	adc	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	5a 95       	dec	r21
     d32:	a9 f7       	brne	.-22     	; 0xd1e <__udivmodhi4_loop>
     d34:	80 95       	com	r24
     d36:	90 95       	com	r25
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	08 95       	ret

00000d3e <calloc>:
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	86 9f       	mul	r24, r22
     d48:	80 01       	movw	r16, r0
     d4a:	87 9f       	mul	r24, r23
     d4c:	10 0d       	add	r17, r0
     d4e:	96 9f       	mul	r25, r22
     d50:	10 0d       	add	r17, r0
     d52:	11 24       	eor	r1, r1
     d54:	c8 01       	movw	r24, r16
     d56:	0d d0       	rcall	.+26     	; 0xd72 <malloc>
     d58:	ec 01       	movw	r28, r24
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	21 f0       	breq	.+8      	; 0xd66 <calloc+0x28>
     d5e:	a8 01       	movw	r20, r16
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	44 d1       	rcall	.+648    	; 0xfee <memset>
     d66:	ce 01       	movw	r24, r28
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <malloc>:
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	91 05       	cpc	r25, r1
     d7e:	10 f4       	brcc	.+4      	; 0xd84 <malloc+0x12>
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <__flp>
     d88:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <__flp+0x1>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	a0 e0       	ldi	r26, 0x00	; 0
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	30 97       	sbiw	r30, 0x00	; 0
     d96:	19 f1       	breq	.+70     	; 0xdde <malloc+0x6c>
     d98:	40 81       	ld	r20, Z
     d9a:	51 81       	ldd	r21, Z+1	; 0x01
     d9c:	02 81       	ldd	r16, Z+2	; 0x02
     d9e:	13 81       	ldd	r17, Z+3	; 0x03
     da0:	48 17       	cp	r20, r24
     da2:	59 07       	cpc	r21, r25
     da4:	c8 f0       	brcs	.+50     	; 0xdd8 <malloc+0x66>
     da6:	84 17       	cp	r24, r20
     da8:	95 07       	cpc	r25, r21
     daa:	69 f4       	brne	.+26     	; 0xdc6 <malloc+0x54>
     dac:	10 97       	sbiw	r26, 0x00	; 0
     dae:	31 f0       	breq	.+12     	; 0xdbc <malloc+0x4a>
     db0:	12 96       	adiw	r26, 0x02	; 2
     db2:	0c 93       	st	X, r16
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	13 96       	adiw	r26, 0x03	; 3
     db8:	1c 93       	st	X, r17
     dba:	27 c0       	rjmp	.+78     	; 0xe0a <malloc+0x98>
     dbc:	00 93 26 02 	sts	0x0226, r16	; 0x800226 <__flp>
     dc0:	10 93 27 02 	sts	0x0227, r17	; 0x800227 <__flp+0x1>
     dc4:	22 c0       	rjmp	.+68     	; 0xe0a <malloc+0x98>
     dc6:	21 15       	cp	r18, r1
     dc8:	31 05       	cpc	r19, r1
     dca:	19 f0       	breq	.+6      	; 0xdd2 <malloc+0x60>
     dcc:	42 17       	cp	r20, r18
     dce:	53 07       	cpc	r21, r19
     dd0:	18 f4       	brcc	.+6      	; 0xdd8 <malloc+0x66>
     dd2:	9a 01       	movw	r18, r20
     dd4:	bd 01       	movw	r22, r26
     dd6:	ef 01       	movw	r28, r30
     dd8:	df 01       	movw	r26, r30
     dda:	f8 01       	movw	r30, r16
     ddc:	db cf       	rjmp	.-74     	; 0xd94 <malloc+0x22>
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	f9 f0       	breq	.+62     	; 0xe22 <malloc+0xb0>
     de4:	28 1b       	sub	r18, r24
     de6:	39 0b       	sbc	r19, r25
     de8:	24 30       	cpi	r18, 0x04	; 4
     dea:	31 05       	cpc	r19, r1
     dec:	80 f4       	brcc	.+32     	; 0xe0e <malloc+0x9c>
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	9b 81       	ldd	r25, Y+3	; 0x03
     df2:	61 15       	cp	r22, r1
     df4:	71 05       	cpc	r23, r1
     df6:	21 f0       	breq	.+8      	; 0xe00 <malloc+0x8e>
     df8:	fb 01       	movw	r30, r22
     dfa:	93 83       	std	Z+3, r25	; 0x03
     dfc:	82 83       	std	Z+2, r24	; 0x02
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <malloc+0x96>
     e00:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <__flp+0x1>
     e04:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__flp>
     e08:	fe 01       	movw	r30, r28
     e0a:	32 96       	adiw	r30, 0x02	; 2
     e0c:	44 c0       	rjmp	.+136    	; 0xe96 <malloc+0x124>
     e0e:	fe 01       	movw	r30, r28
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	81 93       	st	Z+, r24
     e16:	91 93       	st	Z+, r25
     e18:	22 50       	subi	r18, 0x02	; 2
     e1a:	31 09       	sbc	r19, r1
     e1c:	39 83       	std	Y+1, r19	; 0x01
     e1e:	28 83       	st	Y, r18
     e20:	3a c0       	rjmp	.+116    	; 0xe96 <malloc+0x124>
     e22:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
     e26:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
     e2a:	23 2b       	or	r18, r19
     e2c:	41 f4       	brne	.+16     	; 0xe3e <malloc+0xcc>
     e2e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     e32:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     e36:	30 93 25 02 	sts	0x0225, r19	; 0x800225 <__brkval+0x1>
     e3a:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <__brkval>
     e3e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     e42:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e46:	21 15       	cp	r18, r1
     e48:	31 05       	cpc	r19, r1
     e4a:	41 f4       	brne	.+16     	; 0xe5c <malloc+0xea>
     e4c:	2d b7       	in	r18, 0x3d	; 61
     e4e:	3e b7       	in	r19, 0x3e	; 62
     e50:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     e54:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     e58:	24 1b       	sub	r18, r20
     e5a:	35 0b       	sbc	r19, r21
     e5c:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <__brkval>
     e60:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <__brkval+0x1>
     e64:	e2 17       	cp	r30, r18
     e66:	f3 07       	cpc	r31, r19
     e68:	a0 f4       	brcc	.+40     	; 0xe92 <malloc+0x120>
     e6a:	2e 1b       	sub	r18, r30
     e6c:	3f 0b       	sbc	r19, r31
     e6e:	28 17       	cp	r18, r24
     e70:	39 07       	cpc	r19, r25
     e72:	78 f0       	brcs	.+30     	; 0xe92 <malloc+0x120>
     e74:	ac 01       	movw	r20, r24
     e76:	4e 5f       	subi	r20, 0xFE	; 254
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
     e7a:	24 17       	cp	r18, r20
     e7c:	35 07       	cpc	r19, r21
     e7e:	48 f0       	brcs	.+18     	; 0xe92 <malloc+0x120>
     e80:	4e 0f       	add	r20, r30
     e82:	5f 1f       	adc	r21, r31
     e84:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <__brkval+0x1>
     e88:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <__brkval>
     e8c:	81 93       	st	Z+, r24
     e8e:	91 93       	st	Z+, r25
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <malloc+0x124>
     e92:	e0 e0       	ldi	r30, 0x00	; 0
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	cf 01       	movw	r24, r30
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	08 95       	ret

00000ea2 <free>:
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	09 f4       	brne	.+2      	; 0xeac <free+0xa>
     eaa:	81 c0       	rjmp	.+258    	; 0xfae <free+0x10c>
     eac:	fc 01       	movw	r30, r24
     eae:	32 97       	sbiw	r30, 0x02	; 2
     eb0:	13 82       	std	Z+3, r1	; 0x03
     eb2:	12 82       	std	Z+2, r1	; 0x02
     eb4:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <__flp>
     eb8:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <__flp+0x1>
     ebc:	10 97       	sbiw	r26, 0x00	; 0
     ebe:	81 f4       	brne	.+32     	; 0xee0 <free+0x3e>
     ec0:	20 81       	ld	r18, Z
     ec2:	31 81       	ldd	r19, Z+1	; 0x01
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
     ecc:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	51 f5       	brne	.+84     	; 0xf2a <free+0x88>
     ed6:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <__brkval+0x1>
     eda:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <__brkval>
     ede:	67 c0       	rjmp	.+206    	; 0xfae <free+0x10c>
     ee0:	ed 01       	movw	r28, r26
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	ce 17       	cp	r28, r30
     ee8:	df 07       	cpc	r29, r31
     eea:	40 f4       	brcc	.+16     	; 0xefc <free+0x5a>
     eec:	4a 81       	ldd	r20, Y+2	; 0x02
     eee:	5b 81       	ldd	r21, Y+3	; 0x03
     ef0:	9e 01       	movw	r18, r28
     ef2:	41 15       	cp	r20, r1
     ef4:	51 05       	cpc	r21, r1
     ef6:	f1 f0       	breq	.+60     	; 0xf34 <free+0x92>
     ef8:	ea 01       	movw	r28, r20
     efa:	f5 cf       	rjmp	.-22     	; 0xee6 <free+0x44>
     efc:	d3 83       	std	Z+3, r29	; 0x03
     efe:	c2 83       	std	Z+2, r28	; 0x02
     f00:	40 81       	ld	r20, Z
     f02:	51 81       	ldd	r21, Z+1	; 0x01
     f04:	84 0f       	add	r24, r20
     f06:	95 1f       	adc	r25, r21
     f08:	c8 17       	cp	r28, r24
     f0a:	d9 07       	cpc	r29, r25
     f0c:	59 f4       	brne	.+22     	; 0xf24 <free+0x82>
     f0e:	88 81       	ld	r24, Y
     f10:	99 81       	ldd	r25, Y+1	; 0x01
     f12:	84 0f       	add	r24, r20
     f14:	95 1f       	adc	r25, r21
     f16:	02 96       	adiw	r24, 0x02	; 2
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	93 83       	std	Z+3, r25	; 0x03
     f22:	82 83       	std	Z+2, r24	; 0x02
     f24:	21 15       	cp	r18, r1
     f26:	31 05       	cpc	r19, r1
     f28:	29 f4       	brne	.+10     	; 0xf34 <free+0x92>
     f2a:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <__flp+0x1>
     f2e:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <__flp>
     f32:	3d c0       	rjmp	.+122    	; 0xfae <free+0x10c>
     f34:	e9 01       	movw	r28, r18
     f36:	fb 83       	std	Y+3, r31	; 0x03
     f38:	ea 83       	std	Y+2, r30	; 0x02
     f3a:	49 91       	ld	r20, Y+
     f3c:	59 91       	ld	r21, Y+
     f3e:	c4 0f       	add	r28, r20
     f40:	d5 1f       	adc	r29, r21
     f42:	ec 17       	cp	r30, r28
     f44:	fd 07       	cpc	r31, r29
     f46:	61 f4       	brne	.+24     	; 0xf60 <free+0xbe>
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	84 0f       	add	r24, r20
     f4e:	95 1f       	adc	r25, r21
     f50:	02 96       	adiw	r24, 0x02	; 2
     f52:	e9 01       	movw	r28, r18
     f54:	99 83       	std	Y+1, r25	; 0x01
     f56:	88 83       	st	Y, r24
     f58:	82 81       	ldd	r24, Z+2	; 0x02
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	9b 83       	std	Y+3, r25	; 0x03
     f5e:	8a 83       	std	Y+2, r24	; 0x02
     f60:	e0 e0       	ldi	r30, 0x00	; 0
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	12 96       	adiw	r26, 0x02	; 2
     f66:	8d 91       	ld	r24, X+
     f68:	9c 91       	ld	r25, X
     f6a:	13 97       	sbiw	r26, 0x03	; 3
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	19 f0       	breq	.+6      	; 0xf76 <free+0xd4>
     f70:	fd 01       	movw	r30, r26
     f72:	dc 01       	movw	r26, r24
     f74:	f7 cf       	rjmp	.-18     	; 0xf64 <free+0xc2>
     f76:	8d 91       	ld	r24, X+
     f78:	9c 91       	ld	r25, X
     f7a:	11 97       	sbiw	r26, 0x01	; 1
     f7c:	9d 01       	movw	r18, r26
     f7e:	2e 5f       	subi	r18, 0xFE	; 254
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
     f8a:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
     f8e:	28 17       	cp	r18, r24
     f90:	39 07       	cpc	r19, r25
     f92:	69 f4       	brne	.+26     	; 0xfae <free+0x10c>
     f94:	30 97       	sbiw	r30, 0x00	; 0
     f96:	29 f4       	brne	.+10     	; 0xfa2 <free+0x100>
     f98:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <__flp+0x1>
     f9c:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <__flp>
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <free+0x104>
     fa2:	13 82       	std	Z+3, r1	; 0x03
     fa4:	12 82       	std	Z+2, r1	; 0x02
     fa6:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <__brkval+0x1>
     faa:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <__brkval>
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <atoi>:
     fb4:	fc 01       	movw	r30, r24
     fb6:	88 27       	eor	r24, r24
     fb8:	99 27       	eor	r25, r25
     fba:	e8 94       	clt
     fbc:	21 91       	ld	r18, Z+
     fbe:	20 32       	cpi	r18, 0x20	; 32
     fc0:	e9 f3       	breq	.-6      	; 0xfbc <atoi+0x8>
     fc2:	29 30       	cpi	r18, 0x09	; 9
     fc4:	10 f0       	brcs	.+4      	; 0xfca <atoi+0x16>
     fc6:	2e 30       	cpi	r18, 0x0E	; 14
     fc8:	c8 f3       	brcs	.-14     	; 0xfbc <atoi+0x8>
     fca:	2b 32       	cpi	r18, 0x2B	; 43
     fcc:	39 f0       	breq	.+14     	; 0xfdc <atoi+0x28>
     fce:	2d 32       	cpi	r18, 0x2D	; 45
     fd0:	31 f4       	brne	.+12     	; 0xfde <atoi+0x2a>
     fd2:	68 94       	set
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <atoi+0x28>
     fd6:	12 d0       	rcall	.+36     	; 0xffc <__mulhi_const_10>
     fd8:	82 0f       	add	r24, r18
     fda:	91 1d       	adc	r25, r1
     fdc:	21 91       	ld	r18, Z+
     fde:	20 53       	subi	r18, 0x30	; 48
     fe0:	2a 30       	cpi	r18, 0x0A	; 10
     fe2:	c8 f3       	brcs	.-14     	; 0xfd6 <atoi+0x22>
     fe4:	1e f4       	brtc	.+6      	; 0xfec <atoi+0x38>
     fe6:	90 95       	com	r25
     fe8:	81 95       	neg	r24
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	08 95       	ret

00000fee <memset>:
     fee:	dc 01       	movw	r26, r24
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <memset+0x6>
     ff2:	6d 93       	st	X+, r22
     ff4:	41 50       	subi	r20, 0x01	; 1
     ff6:	50 40       	sbci	r21, 0x00	; 0
     ff8:	e0 f7       	brcc	.-8      	; 0xff2 <memset+0x4>
     ffa:	08 95       	ret

00000ffc <__mulhi_const_10>:
     ffc:	7a e0       	ldi	r23, 0x0A	; 10
     ffe:	97 9f       	mul	r25, r23
    1000:	90 2d       	mov	r25, r0
    1002:	87 9f       	mul	r24, r23
    1004:	80 2d       	mov	r24, r0
    1006:	91 0d       	add	r25, r1
    1008:	11 24       	eor	r1, r1
    100a:	08 95       	ret

0000100c <_exit>:
    100c:	f8 94       	cli

0000100e <__stop_program>:
    100e:	ff cf       	rjmp	.-2      	; 0x100e <__stop_program>
