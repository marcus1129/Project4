
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800200  000019ae  00001a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080024c  0080024c  00001a8e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b83  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000128a  00000000  00000000  0000493f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000150b  00000000  00000000  00005bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d0  00000000  00000000  000070d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ad9  00000000  00000000  000079a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a91  00000000  00000000  0000847d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00009f0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
       2:	00 00       	nop
       4:	0f c2       	rjmp	.+1054   	; 0x424 <__bad_interrupt>
       6:	00 00       	nop
       8:	0d c2       	rjmp	.+1050   	; 0x424 <__bad_interrupt>
       a:	00 00       	nop
       c:	0b c2       	rjmp	.+1046   	; 0x424 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c2       	rjmp	.+1042   	; 0x424 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c2       	rjmp	.+1038   	; 0x424 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c2       	rjmp	.+1034   	; 0x424 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c2       	rjmp	.+1030   	; 0x424 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c2       	rjmp	.+1026   	; 0x424 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c1       	rjmp	.+1022   	; 0x424 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c1       	rjmp	.+1018   	; 0x424 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c1       	rjmp	.+1014   	; 0x424 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c1       	rjmp	.+1010   	; 0x424 <__bad_interrupt>
      32:	00 00       	nop
      34:	6b c3       	rjmp	.+1750   	; 0x70c <__vector_13>
      36:	00 00       	nop
      38:	f5 c1       	rjmp	.+1002   	; 0x424 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c1       	rjmp	.+998    	; 0x424 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c1       	rjmp	.+994    	; 0x424 <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c3       	rjmp	.+1604   	; 0x68a <__vector_17>
      46:	00 00       	nop
      48:	ed c1       	rjmp	.+986    	; 0x424 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	eb c1       	rjmp	.+982    	; 0x424 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e9 c1       	rjmp	.+978    	; 0x424 <__bad_interrupt>
      52:	00 00       	nop
      54:	d9 c2       	rjmp	.+1458   	; 0x608 <__vector_21>
      56:	00 00       	nop
      58:	e5 c1       	rjmp	.+970    	; 0x424 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e3 c1       	rjmp	.+966    	; 0x424 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e1 c1       	rjmp	.+962    	; 0x424 <__bad_interrupt>
      62:	00 00       	nop
      64:	c7 c7       	rjmp	.+3982   	; 0xff4 <__vector_25>
      66:	00 00       	nop
      68:	dd c1       	rjmp	.+954    	; 0x424 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c1       	rjmp	.+950    	; 0x424 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d9 c1       	rjmp	.+946    	; 0x424 <__bad_interrupt>
      72:	00 00       	nop
      74:	d7 c1       	rjmp	.+942    	; 0x424 <__bad_interrupt>
      76:	00 00       	nop
      78:	d5 c1       	rjmp	.+938    	; 0x424 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d3 c1       	rjmp	.+934    	; 0x424 <__bad_interrupt>
      7e:	00 00       	nop
      80:	86 c3       	rjmp	.+1804   	; 0x78e <__vector_32>
      82:	00 00       	nop
      84:	cf c1       	rjmp	.+926    	; 0x424 <__bad_interrupt>
      86:	00 00       	nop
      88:	cd c1       	rjmp	.+922    	; 0x424 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cb c1       	rjmp	.+918    	; 0x424 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d8 c7       	rjmp	.+4016   	; 0x1042 <__vector_36>
      92:	00 00       	nop
      94:	c7 c1       	rjmp	.+910    	; 0x424 <__bad_interrupt>
      96:	00 00       	nop
      98:	c5 c1       	rjmp	.+906    	; 0x424 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c3 c1       	rjmp	.+902    	; 0x424 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c1 c1       	rjmp	.+898    	; 0x424 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bf c1       	rjmp	.+894    	; 0x424 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b3 c3       	rjmp	.+1894   	; 0x810 <__vector_42>
      aa:	00 00       	nop
      ac:	bb c1       	rjmp	.+886    	; 0x424 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b9 c1       	rjmp	.+882    	; 0x424 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b7 c1       	rjmp	.+878    	; 0x424 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b5 c1       	rjmp	.+874    	; 0x424 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b3 c1       	rjmp	.+870    	; 0x424 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b1 c1       	rjmp	.+866    	; 0x424 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	af c1       	rjmp	.+862    	; 0x424 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ad c1       	rjmp	.+858    	; 0x424 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e1 c7       	rjmp	.+4034   	; 0x1090 <__vector_51>
      ce:	00 00       	nop
      d0:	a9 c1       	rjmp	.+850    	; 0x424 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a7 c1       	rjmp	.+846    	; 0x424 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_54>
      dc:	a3 c1       	rjmp	.+838    	; 0x424 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a1 c1       	rjmp	.+834    	; 0x424 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
      ec:	00 00       	nop
      ee:	5f 00       	.word	0x005f	; ????
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	07 00       	.word	0x0007	; ????
      f8:	07 00       	.word	0x0007	; ????
      fa:	00 00       	nop
      fc:	00 14       	cp	r0, r0
      fe:	7f 14       	cp	r7, r15
     100:	7f 14       	cp	r7, r15
     102:	00 00       	nop
     104:	00 24       	eor	r0, r0
     106:	2a 7f       	andi	r18, 0xFA	; 250
     108:	2a 12       	cpse	r2, r26
     10a:	00 00       	nop
     10c:	00 23       	and	r16, r16
     10e:	13 08       	sbc	r1, r3
     110:	64 62       	ori	r22, 0x24	; 36
     112:	00 00       	nop
     114:	00 36       	cpi	r16, 0x60	; 96
     116:	49 55       	subi	r20, 0x59	; 89
     118:	22 50       	subi	r18, 0x02	; 2
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	05 03       	mulsu	r16, r21
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 1c       	adc	r0, r0
     126:	22 41       	sbci	r18, 0x12	; 18
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 41       	sbci	r16, 0x10	; 16
     12e:	22 1c       	adc	r2, r2
     130:	00 00       	nop
     132:	00 00       	nop
     134:	00 08       	sbc	r0, r0
     136:	2a 1c       	adc	r2, r10
     138:	2a 08       	sbc	r2, r10
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	08 3e       	cpi	r16, 0xE8	; 232
     140:	08 08       	sbc	r0, r8
     142:	00 00       	nop
     144:	00 a0       	ldd	r0, Z+32	; 0x20
     146:	60 00       	.word	0x0060	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 08       	sbc	r0, r0
     14e:	08 08       	sbc	r0, r8
     150:	08 08       	sbc	r0, r8
     152:	00 00       	nop
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 20       	and	r0, r0
     15e:	10 08       	sbc	r1, r0
     160:	04 02       	muls	r16, r20
     162:	00 00       	nop
     164:	00 3e       	cpi	r16, 0xE0	; 224
     166:	51 49       	sbci	r21, 0x91	; 145
     168:	45 3e       	cpi	r20, 0xE5	; 229
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	42 7f       	andi	r20, 0xF2	; 242
     170:	40 00       	.word	0x0040	; ????
     172:	00 00       	nop
     174:	00 62       	ori	r16, 0x20	; 32
     176:	51 49       	sbci	r21, 0x91	; 145
     178:	49 46       	sbci	r20, 0x69	; 105
     17a:	00 00       	nop
     17c:	00 22       	and	r0, r16
     17e:	41 49       	sbci	r20, 0x91	; 145
     180:	49 36       	cpi	r20, 0x69	; 105
     182:	00 00       	nop
     184:	00 18       	sub	r0, r0
     186:	14 12       	cpse	r1, r20
     188:	7f 10       	cpse	r7, r15
     18a:	00 00       	nop
     18c:	00 27       	eor	r16, r16
     18e:	45 45       	sbci	r20, 0x55	; 85
     190:	45 39       	cpi	r20, 0x95	; 149
     192:	00 00       	nop
     194:	00 3c       	cpi	r16, 0xC0	; 192
     196:	4a 49       	sbci	r20, 0x9A	; 154
     198:	49 30       	cpi	r20, 0x09	; 9
     19a:	00 00       	nop
     19c:	00 01       	movw	r0, r0
     19e:	71 09       	sbc	r23, r1
     1a0:	05 03       	mulsu	r16, r21
     1a2:	00 00       	nop
     1a4:	00 36       	cpi	r16, 0x60	; 96
     1a6:	49 49       	sbci	r20, 0x99	; 153
     1a8:	49 36       	cpi	r20, 0x69	; 105
     1aa:	00 00       	nop
     1ac:	00 06       	cpc	r0, r16
     1ae:	49 49       	sbci	r20, 0x99	; 153
     1b0:	29 1e       	adc	r2, r25
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	36 36       	cpi	r19, 0x66	; 102
     1b8:	00 00       	nop
     1ba:	00 00       	nop
     1bc:	00 00       	nop
     1be:	ac 6c       	ori	r26, 0xCC	; 204
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 00       	.word	0x0041	; ????
     1ca:	00 00       	nop
     1cc:	00 14       	cp	r0, r0
     1ce:	14 14       	cp	r1, r4
     1d0:	14 14       	cp	r1, r4
     1d2:	00 00       	nop
     1d4:	00 41       	sbci	r16, 0x10	; 16
     1d6:	22 14       	cp	r2, r2
     1d8:	08 00       	.word	0x0008	; ????
     1da:	00 00       	nop
     1dc:	00 02       	muls	r16, r16
     1de:	01 51       	subi	r16, 0x11	; 17
     1e0:	09 06       	cpc	r0, r25
     1e2:	00 00       	nop
     1e4:	00 32       	cpi	r16, 0x20	; 32
     1e6:	49 79       	andi	r20, 0x99	; 153
     1e8:	41 3e       	cpi	r20, 0xE1	; 225
     1ea:	00 00       	nop
     1ec:	00 7e       	andi	r16, 0xE0	; 224
     1ee:	09 09       	sbc	r16, r9
     1f0:	09 7e       	andi	r16, 0xE9	; 233
     1f2:	00 00       	nop
     1f4:	00 7f       	andi	r16, 0xF0	; 240
     1f6:	49 49       	sbci	r20, 0x99	; 153
     1f8:	49 36       	cpi	r20, 0x69	; 105
     1fa:	00 00       	nop
     1fc:	00 3e       	cpi	r16, 0xE0	; 224
     1fe:	41 41       	sbci	r20, 0x11	; 17
     200:	41 22       	and	r4, r17
     202:	00 00       	nop
     204:	00 7f       	andi	r16, 0xF0	; 240
     206:	41 41       	sbci	r20, 0x11	; 17
     208:	22 1c       	adc	r2, r2
     20a:	00 00       	nop
     20c:	00 7f       	andi	r16, 0xF0	; 240
     20e:	49 49       	sbci	r20, 0x99	; 153
     210:	49 41       	sbci	r20, 0x19	; 25
     212:	00 00       	nop
     214:	00 7f       	andi	r16, 0xF0	; 240
     216:	09 09       	sbc	r16, r9
     218:	09 01       	movw	r0, r18
     21a:	00 00       	nop
     21c:	00 3e       	cpi	r16, 0xE0	; 224
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	51 72       	andi	r21, 0x21	; 33
     222:	00 00       	nop
     224:	00 7f       	andi	r16, 0xF0	; 240
     226:	08 08       	sbc	r0, r8
     228:	08 7f       	andi	r16, 0xF8	; 248
     22a:	00 00       	nop
     22c:	00 41       	sbci	r16, 0x10	; 16
     22e:	7f 41       	sbci	r23, 0x1F	; 31
     230:	00 00       	nop
     232:	00 00       	nop
     234:	00 20       	and	r0, r0
     236:	40 41       	sbci	r20, 0x10	; 16
     238:	3f 01       	movw	r6, r30
     23a:	00 00       	nop
     23c:	00 7f       	andi	r16, 0xF0	; 240
     23e:	08 14       	cp	r0, r8
     240:	22 41       	sbci	r18, 0x12	; 18
     242:	00 00       	nop
     244:	00 7f       	andi	r16, 0xF0	; 240
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	00 00       	nop
     24c:	00 7f       	andi	r16, 0xF0	; 240
     24e:	02 0c       	add	r0, r2
     250:	02 7f       	andi	r16, 0xF2	; 242
     252:	00 00       	nop
     254:	00 7f       	andi	r16, 0xF0	; 240
     256:	04 08       	sbc	r0, r4
     258:	10 7f       	andi	r17, 0xF0	; 240
     25a:	00 00       	nop
     25c:	00 3e       	cpi	r16, 0xE0	; 224
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	41 3e       	cpi	r20, 0xE1	; 225
     262:	00 00       	nop
     264:	00 7f       	andi	r16, 0xF0	; 240
     266:	09 09       	sbc	r16, r9
     268:	09 06       	cpc	r0, r25
     26a:	00 00       	nop
     26c:	00 3e       	cpi	r16, 0xE0	; 224
     26e:	41 51       	subi	r20, 0x11	; 17
     270:	21 5e       	subi	r18, 0xE1	; 225
     272:	00 00       	nop
     274:	00 7f       	andi	r16, 0xF0	; 240
     276:	09 19       	sub	r16, r9
     278:	29 46       	sbci	r18, 0x69	; 105
     27a:	00 00       	nop
     27c:	00 26       	eor	r0, r16
     27e:	49 49       	sbci	r20, 0x99	; 153
     280:	49 32       	cpi	r20, 0x29	; 41
     282:	00 00       	nop
     284:	00 01       	movw	r0, r0
     286:	01 7f       	andi	r16, 0xF1	; 241
     288:	01 01       	movw	r0, r2
     28a:	00 00       	nop
     28c:	00 3f       	cpi	r16, 0xF0	; 240
     28e:	40 40       	sbci	r20, 0x00	; 0
     290:	40 3f       	cpi	r20, 0xF0	; 240
     292:	00 00       	nop
     294:	00 1f       	adc	r16, r16
     296:	20 40       	sbci	r18, 0x00	; 0
     298:	20 1f       	adc	r18, r16
     29a:	00 00       	nop
     29c:	00 3f       	cpi	r16, 0xF0	; 240
     29e:	40 38       	cpi	r20, 0x80	; 128
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 63       	ori	r16, 0x30	; 48
     2a6:	14 08       	sbc	r1, r4
     2a8:	14 63       	ori	r17, 0x34	; 52
     2aa:	00 00       	nop
     2ac:	00 03       	mulsu	r16, r16
     2ae:	04 78       	andi	r16, 0x84	; 132
     2b0:	04 03       	mulsu	r16, r20
     2b2:	00 00       	nop
     2b4:	00 61       	ori	r16, 0x10	; 16
     2b6:	51 49       	sbci	r21, 0x91	; 145
     2b8:	45 43       	sbci	r20, 0x35	; 53
     2ba:	00 00       	nop
     2bc:	00 7f       	andi	r16, 0xF0	; 240
     2be:	41 41       	sbci	r20, 0x11	; 17
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 02       	muls	r16, r16
     2c6:	04 08       	sbc	r0, r4
     2c8:	10 20       	and	r1, r0
     2ca:	00 00       	nop
     2cc:	00 41       	sbci	r16, 0x10	; 16
     2ce:	41 7f       	andi	r20, 0xF1	; 241
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 04       	cpc	r0, r0
     2d6:	02 01       	movw	r0, r4
     2d8:	02 04       	cpc	r0, r2
     2da:	00 00       	nop
     2dc:	00 80       	ld	r0, Z
     2de:	80 80       	ld	r8, Z
     2e0:	80 80       	ld	r8, Z
     2e2:	00 00       	nop
     2e4:	00 01       	movw	r0, r0
     2e6:	02 04       	cpc	r0, r2
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	00 20       	and	r0, r0
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	54 78       	andi	r21, 0x84	; 132
     2f2:	00 00       	nop
     2f4:	00 7f       	andi	r16, 0xF0	; 240
     2f6:	48 44       	sbci	r20, 0x48	; 72
     2f8:	44 38       	cpi	r20, 0x84	; 132
     2fa:	00 00       	nop
     2fc:	00 38       	cpi	r16, 0x80	; 128
     2fe:	44 44       	sbci	r20, 0x44	; 68
     300:	28 00       	.word	0x0028	; ????
     302:	00 00       	nop
     304:	00 38       	cpi	r16, 0x80	; 128
     306:	44 44       	sbci	r20, 0x44	; 68
     308:	48 7f       	andi	r20, 0xF8	; 248
     30a:	00 00       	nop
     30c:	00 38       	cpi	r16, 0x80	; 128
     30e:	54 54       	subi	r21, 0x44	; 68
     310:	54 18       	sub	r5, r4
     312:	00 00       	nop
     314:	00 08       	sbc	r0, r0
     316:	7e 09       	sbc	r23, r14
     318:	02 00       	.word	0x0002	; ????
     31a:	00 00       	nop
     31c:	00 18       	sub	r0, r0
     31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     320:	a4 7c       	andi	r26, 0xC4	; 196
     322:	00 00       	nop
     324:	00 7f       	andi	r16, 0xF0	; 240
     326:	08 04       	cpc	r0, r8
     328:	04 78       	andi	r16, 0x84	; 132
     32a:	00 00       	nop
     32c:	00 00       	nop
     32e:	7d 00       	.word	0x007d	; ????
     330:	00 00       	nop
     332:	00 00       	nop
     334:	00 80       	ld	r0, Z
     336:	84 7d       	andi	r24, 0xD4	; 212
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	00 7f       	andi	r16, 0xF0	; 240
     33e:	10 28       	or	r1, r0
     340:	44 00       	.word	0x0044	; ????
     342:	00 00       	nop
     344:	00 41       	sbci	r16, 0x10	; 16
     346:	7f 40       	sbci	r23, 0x0F	; 15
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	00 7c       	andi	r16, 0xC0	; 192
     34e:	04 18       	sub	r0, r4
     350:	04 78       	andi	r16, 0x84	; 132
     352:	00 00       	nop
     354:	00 7c       	andi	r16, 0xC0	; 192
     356:	08 04       	cpc	r0, r8
     358:	7c 00       	.word	0x007c	; ????
     35a:	00 00       	nop
     35c:	00 38       	cpi	r16, 0x80	; 128
     35e:	44 44       	sbci	r20, 0x44	; 68
     360:	38 00       	.word	0x0038	; ????
     362:	00 00       	nop
     364:	00 fc       	sbrc	r0, 0
     366:	24 24       	eor	r2, r4
     368:	18 00       	.word	0x0018	; ????
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	24 24       	eor	r2, r4
     370:	fc 00       	.word	0x00fc	; ????
     372:	00 00       	nop
     374:	00 00       	nop
     376:	7c 08       	sbc	r7, r12
     378:	04 00       	.word	0x0004	; ????
     37a:	00 00       	nop
     37c:	00 48       	sbci	r16, 0x80	; 128
     37e:	54 54       	subi	r21, 0x44	; 68
     380:	24 00       	.word	0x0024	; ????
     382:	00 00       	nop
     384:	00 04       	cpc	r0, r0
     386:	7f 44       	sbci	r23, 0x4F	; 79
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 3c       	cpi	r16, 0xC0	; 192
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	7c 00       	.word	0x007c	; ????
     392:	00 00       	nop
     394:	00 1c       	adc	r0, r0
     396:	20 40       	sbci	r18, 0x00	; 0
     398:	20 1c       	adc	r2, r0
     39a:	00 00       	nop
     39c:	00 3c       	cpi	r16, 0xC0	; 192
     39e:	40 30       	cpi	r20, 0x00	; 0
     3a0:	40 3c       	cpi	r20, 0xC0	; 192
     3a2:	00 00       	nop
     3a4:	00 44       	sbci	r16, 0x40	; 64
     3a6:	28 10       	cpse	r2, r8
     3a8:	28 44       	sbci	r18, 0x48	; 72
     3aa:	00 00       	nop
     3ac:	00 1c       	adc	r0, r0
     3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
     3b0:	7c 00       	.word	0x007c	; ????
     3b2:	00 00       	nop
     3b4:	00 44       	sbci	r16, 0x40	; 64
     3b6:	64 54       	subi	r22, 0x44	; 68
     3b8:	4c 44       	sbci	r20, 0x4C	; 76
     3ba:	00 00       	nop
     3bc:	00 08       	sbc	r0, r0
     3be:	36 41       	sbci	r19, 0x16	; 22
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 00       	nop
     3c6:	7f 00       	.word	0x007f	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	00 41       	sbci	r16, 0x10	; 16
     3ce:	36 08       	sbc	r3, r6
     3d0:	00 00       	nop
     3d2:	00 00       	nop
     3d4:	00 02       	muls	r16, r16
     3d6:	01 01       	movw	r0, r2
     3d8:	02 01       	movw	r0, r4
     3da:	00 00       	nop
     3dc:	00 02       	muls	r16, r16
     3de:	05 05       	cpc	r16, r5
     3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d1 e2       	ldi	r29, 0x21	; 33
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
     3f4:	12 e0       	ldi	r17, 0x02	; 2
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	ee ea       	ldi	r30, 0xAE	; 174
     3fc:	f9 e1       	ldi	r31, 0x19	; 25
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0b bf       	out	0x3b, r16	; 59
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	07 90       	elpm	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	ac 34       	cpi	r26, 0x4C	; 76
     40a:	b1 07       	cpc	r27, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	ac e4       	ldi	r26, 0x4C	; 76
     412:	b2 e0       	ldi	r27, 0x02	; 2
     414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
     416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
     418:	a0 35       	cpi	r26, 0x50	; 80
     41a:	b2 07       	cpc	r27, r18
     41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
     41e:	96 d2       	rcall	.+1324   	; 0x94c <main>
     420:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <_exit>

00000424 <__bad_interrupt>:
     424:	ed cd       	rjmp	.-1062   	; 0x0 <__vectors>

00000426 <clock_init>:
#include <avr/interrupt.h>
#include "clock.h"


int clock_init(){
	CLOCK.second = 0;
     426:	e6 e0       	ldi	r30, 0x06	; 6
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	17 82       	std	Z+7, r1	; 0x07
     42c:	16 82       	std	Z+6, r1	; 0x06
	CLOCK.minute = 0;
     42e:	11 86       	std	Z+9, r1	; 0x09
     430:	10 86       	std	Z+8, r1	; 0x08
	CLOCK.hour = 0;
     432:	13 86       	std	Z+11, r1	; 0x0b
     434:	12 86       	std	Z+10, r1	; 0x0a
	CLOCK.counter = 0;
     436:	11 82       	std	Z+1, r1	; 0x01
     438:	10 82       	st	Z, r1
	CLOCK.interruptFlag = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	93 83       	std	Z+3, r25	; 0x03
     440:	82 83       	std	Z+2, r24	; 0x02
	CLOCK.timeStr = NULL;
     442:	15 82       	std	Z+5, r1	; 0x05
     444:	14 82       	std	Z+4, r1	; 0x04
	return 1;
}
     446:	08 95       	ret

00000448 <clock_increment>:

int clock_increment(){
	if(CLOCK.second == 59){
     448:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <CLOCK+0x6>
     44c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <CLOCK+0x7>
     450:	8b 33       	cpi	r24, 0x3B	; 59
     452:	91 05       	cpc	r25, r1
     454:	39 f5       	brne	.+78     	; 0x4a4 <clock_increment+0x5c>
		if(CLOCK.minute == 59){
     456:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CLOCK+0x8>
     45a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CLOCK+0x9>
     45e:	8b 33       	cpi	r24, 0x3B	; 59
     460:	91 05       	cpc	r25, r1
     462:	b1 f4       	brne	.+44     	; 0x490 <clock_increment+0x48>
			if(CLOCK.hour == 23){
     464:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <CLOCK+0xa>
     468:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <CLOCK+0xb>
     46c:	87 31       	cpi	r24, 0x17	; 23
     46e:	91 05       	cpc	r25, r1
     470:	29 f4       	brne	.+10     	; 0x47c <clock_increment+0x34>
				CLOCK.hour = 0;
     472:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CLOCK+0xb>
     476:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <CLOCK+0xa>
     47a:	05 c0       	rjmp	.+10     	; 0x486 <clock_increment+0x3e>
			}
			else{
				CLOCK.hour += 1;
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <CLOCK+0xb>
     482:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <CLOCK+0xa>
			}
			CLOCK.minute = 0;
     486:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <CLOCK+0x9>
     48a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <CLOCK+0x8>
     48e:	05 c0       	rjmp	.+10     	; 0x49a <clock_increment+0x52>
		}
		else{
			CLOCK.minute += 1;
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <CLOCK+0x9>
     496:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CLOCK+0x8>
		}
		CLOCK.second = 0;
     49a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <CLOCK+0x7>
     49e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <CLOCK+0x6>
     4a2:	05 c0       	rjmp	.+10     	; 0x4ae <clock_increment+0x66>
	}
	else{
		CLOCK.second += 1;
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <CLOCK+0x7>
     4aa:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <CLOCK+0x6>
	}
	return 1;
}
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	08 95       	ret

000004b4 <initTimer0>:
	
	return 1;
}

int initTimer0(){
	TCCR0A = (1<<WGM01);	     //Sets mode to CTC
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02)|(1<<CS00);		//Sets prescaler to 1024
     4b8:	95 e0       	ldi	r25, 0x05	; 5
     4ba:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0x9b;				//Sets compare value to 15600
     4bc:	9b e9       	ldi	r25, 0x9B	; 155
     4be:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0x9b;
     4c0:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
     4c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
     4c6:	85 bb       	out	0x15, r24	; 21
	return 1;
};
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	08 95       	ret

000004ce <initTimer1>:

int initTimer1(){
	TCCR1A = 0x00;	     //Sets mode to CTC
     4ce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = (1<<CS12)|(1<<CS10);		//Sets prescaler to 1024
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	OCR1AH = 0x00;
     4d8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	OCR1AL = 0x9b;				//Sets compare value to 15600
     4dc:	8b e9       	ldi	r24, 0x9B	; 155
     4de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B =	0x9b;
     4e2:	8b e9       	ldi	r24, 0x9B	; 155
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     4ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	OCR1C =	0x9b;
     4ee:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
     4f2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
	TIMSK1 = (1<<OCIE1A);
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
	TIFR1 = (1<<OCF1A);
     4fc:	86 bb       	out	0x16, r24	; 22
	return 1;
};
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	08 95       	ret

00000504 <initTimer2>:

int initTimer2(){
	TCCR2A = (1<<WGM21);	     //Sets mode to CTC
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
	TCCR2B = (1<<CS22)|(1<<CS20);		//Sets prescaler to 1024
     50a:	95 e0       	ldi	r25, 0x05	; 5
     50c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
	OCR2A =	0x9b;				//Sets compare value to 15600
     510:	9b e9       	ldi	r25, 0x9B	; 155
     512:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
	OCR2B =	0x9b;
     516:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
	TIMSK2 = (1<<OCIE2A);
     51a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
	TIFR2 = (1<<OCF2A);
     51e:	87 bb       	out	0x17, r24	; 23
	return 1;
};
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <initTimer3>:

int initTimer3(){
	TCCR3A = 0x00;	     //Sets mode to CTC
     526:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B = (1<<CS32)|(1<<CS30);		//Sets prescaler to 1024
     52a:	85 e0       	ldi	r24, 0x05	; 5
     52c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	OCR3A =	0x009b;				//Sets compare value to 15600
     530:	8b e9       	ldi	r24, 0x9B	; 155
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     538:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	OCR3B =	0x009b;
     53c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
     540:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
	OCR3C =	0x009b;
     544:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
     548:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
	TIMSK3 = (1<<OCIE3A);
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
	TIFR3 = (1<<OCF3A);
     552:	88 bb       	out	0x18, r24	; 24
	return 1;
};
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	08 95       	ret

0000055a <initTimer4>:

int initTimer4(){
	TCCR4A = 0x00;	     //Sets mode to CTC
     55a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = (1<<CS42)|(1<<CS40);		//Sets prescaler to 1024
     55e:	85 e0       	ldi	r24, 0x05	; 5
     560:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	OCR4A =	0x009b;				//Sets compare value to 15600
     564:	8b e9       	ldi	r24, 0x9B	; 155
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     56c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	OCR4B =	0x009b;
     570:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
     574:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
	OCR4C =	0x009b;
     578:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
     57c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
	TIMSK4 = (1<<OCIE4A);
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
	TIFR4 = (1<<OCF4A);
     586:	89 bb       	out	0x19, r24	; 25
	return 1;
};
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	08 95       	ret

0000058e <clock_enableTimerInterrupt>:

int clock_enableTimerInterrupt(int timerId){
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	2a 97       	sbiw	r28, 0x0a	; 10
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
	sei();
     5a2:	78 94       	sei
	int (*clock_interruptInitFuncs[5])() = {initTimer0, initTimer1, initTimer2, initTimer3, initTimer4};
     5a4:	2a e0       	ldi	r18, 0x0A	; 10
     5a6:	e6 e2       	ldi	r30, 0x26	; 38
     5a8:	f2 e0       	ldi	r31, 0x02	; 2
     5aa:	de 01       	movw	r26, r28
     5ac:	11 96       	adiw	r26, 0x01	; 1
     5ae:	01 90       	ld	r0, Z+
     5b0:	0d 92       	st	X+, r0
     5b2:	2a 95       	dec	r18
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <clock_enableTimerInterrupt+0x20>
	(*clock_interruptInitFuncs[timerId])();
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	e1 e0       	ldi	r30, 0x01	; 1
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	ec 0f       	add	r30, r28
     5c0:	fd 1f       	adc	r31, r29
     5c2:	e8 0f       	add	r30, r24
     5c4:	f9 1f       	adc	r31, r25
     5c6:	01 90       	ld	r0, Z+
     5c8:	f0 81       	ld	r31, Z
     5ca:	e0 2d       	mov	r30, r0
     5cc:	19 95       	eicall
	return 1;
}
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	2a 96       	adiw	r28, 0x0a	; 10
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <clock_makeTimeStr>:
	}
	return 1;
}

int clock_makeTimeStr(){
	if(CLOCK.timeStr == NULL){
     5e4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <CLOCK+0x4>
     5e8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <CLOCK+0x5>
     5ec:	89 2b       	or	r24, r25
     5ee:	49 f4       	brne	.+18     	; 0x602 <clock_makeTimeStr+0x1e>
		CLOCK.timeStr = (char*)calloc(10, sizeof(char));
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	bb d5       	rcall	.+2934   	; 0x1170 <calloc>
     5fa:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <CLOCK+0x5>
     5fe:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <CLOCK+0x4>
	}
	char temp[2];
	
	return 1;
}
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	08 95       	ret

00000608 <__vector_21>:
	.clock_enableTimerInterrupt = clock_enableTimerInterrupt,
	.clock_makeTimeStr = clock_makeTimeStr
};


ISR(TIMER0_COMPA_vect){
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	11 24       	eor	r1, r1
     612:	0b b6       	in	r0, 0x3b	; 59
     614:	0f 92       	push	r0
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	CLOCK.counter += 1;
     632:	e6 e0       	ldi	r30, 0x06	; 6
     634:	f2 e0       	ldi	r31, 0x02	; 2
     636:	80 81       	ld	r24, Z
     638:	91 81       	ldd	r25, Z+1	; 0x01
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	91 83       	std	Z+1, r25	; 0x01
     63e:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     640:	80 81       	ld	r24, Z
     642:	91 81       	ldd	r25, Z+1	; 0x01
     644:	84 36       	cpi	r24, 0x64	; 100
     646:	91 05       	cpc	r25, r1
     648:	59 f4       	brne	.+22     	; 0x660 <__vector_21+0x58>
		CLOCK.clock_increment();
     64a:	ef 01       	movw	r28, r30
     64c:	00 88       	ldd	r0, Z+16	; 0x10
     64e:	f1 89       	ldd	r31, Z+17	; 0x11
     650:	e0 2d       	mov	r30, r0
     652:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	9b 83       	std	Y+3, r25	; 0x03
     65a:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     65c:	19 82       	std	Y+1, r1	; 0x01
     65e:	18 82       	st	Y, r1
	}
}
     660:	ff 91       	pop	r31
     662:	ef 91       	pop	r30
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0b be       	out	0x3b, r0	; 59
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_17>:

ISR(TIMER1_COMPA_vect){
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	0b b6       	in	r0, 0x3b	; 59
     696:	0f 92       	push	r0
     698:	2f 93       	push	r18
     69a:	3f 93       	push	r19
     69c:	4f 93       	push	r20
     69e:	5f 93       	push	r21
     6a0:	6f 93       	push	r22
     6a2:	7f 93       	push	r23
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ef 93       	push	r30
     6b2:	ff 93       	push	r31
	CLOCK.counter += 1;
     6b4:	e6 e0       	ldi	r30, 0x06	; 6
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	80 81       	ld	r24, Z
     6ba:	91 81       	ldd	r25, Z+1	; 0x01
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	91 83       	std	Z+1, r25	; 0x01
     6c0:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     6c2:	80 81       	ld	r24, Z
     6c4:	91 81       	ldd	r25, Z+1	; 0x01
     6c6:	84 36       	cpi	r24, 0x64	; 100
     6c8:	91 05       	cpc	r25, r1
     6ca:	59 f4       	brne	.+22     	; 0x6e2 <__vector_17+0x58>
		CLOCK.clock_increment();
     6cc:	ef 01       	movw	r28, r30
     6ce:	00 88       	ldd	r0, Z+16	; 0x10
     6d0:	f1 89       	ldd	r31, Z+17	; 0x11
     6d2:	e0 2d       	mov	r30, r0
     6d4:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9b 83       	std	Y+3, r25	; 0x03
     6dc:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     6de:	19 82       	std	Y+1, r1	; 0x01
     6e0:	18 82       	st	Y, r1
	}
}
     6e2:	ff 91       	pop	r31
     6e4:	ef 91       	pop	r30
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	bf 91       	pop	r27
     6ec:	af 91       	pop	r26
     6ee:	9f 91       	pop	r25
     6f0:	8f 91       	pop	r24
     6f2:	7f 91       	pop	r23
     6f4:	6f 91       	pop	r22
     6f6:	5f 91       	pop	r21
     6f8:	4f 91       	pop	r20
     6fa:	3f 91       	pop	r19
     6fc:	2f 91       	pop	r18
     6fe:	0f 90       	pop	r0
     700:	0b be       	out	0x3b, r0	; 59
     702:	0f 90       	pop	r0
     704:	0f be       	out	0x3f, r0	; 63
     706:	0f 90       	pop	r0
     708:	1f 90       	pop	r1
     70a:	18 95       	reti

0000070c <__vector_13>:

ISR(TIMER2_COMPA_vect){
     70c:	1f 92       	push	r1
     70e:	0f 92       	push	r0
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	0f 92       	push	r0
     714:	11 24       	eor	r1, r1
     716:	0b b6       	in	r0, 0x3b	; 59
     718:	0f 92       	push	r0
     71a:	2f 93       	push	r18
     71c:	3f 93       	push	r19
     71e:	4f 93       	push	r20
     720:	5f 93       	push	r21
     722:	6f 93       	push	r22
     724:	7f 93       	push	r23
     726:	8f 93       	push	r24
     728:	9f 93       	push	r25
     72a:	af 93       	push	r26
     72c:	bf 93       	push	r27
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
	CLOCK.counter += 1;
     736:	e6 e0       	ldi	r30, 0x06	; 6
     738:	f2 e0       	ldi	r31, 0x02	; 2
     73a:	80 81       	ld	r24, Z
     73c:	91 81       	ldd	r25, Z+1	; 0x01
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     744:	80 81       	ld	r24, Z
     746:	91 81       	ldd	r25, Z+1	; 0x01
     748:	84 36       	cpi	r24, 0x64	; 100
     74a:	91 05       	cpc	r25, r1
     74c:	59 f4       	brne	.+22     	; 0x764 <__vector_13+0x58>
		CLOCK.clock_increment();
     74e:	ef 01       	movw	r28, r30
     750:	00 88       	ldd	r0, Z+16	; 0x10
     752:	f1 89       	ldd	r31, Z+17	; 0x11
     754:	e0 2d       	mov	r30, r0
     756:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9b 83       	std	Y+3, r25	; 0x03
     75e:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     760:	19 82       	std	Y+1, r1	; 0x01
     762:	18 82       	st	Y, r1
	}
}
     764:	ff 91       	pop	r31
     766:	ef 91       	pop	r30
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	0f 90       	pop	r0
     782:	0b be       	out	0x3b, r0	; 59
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <__vector_32>:

ISR(TIMER3_COMPA_vect){
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	0b b6       	in	r0, 0x3b	; 59
     79a:	0f 92       	push	r0
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ef 93       	push	r30
     7b6:	ff 93       	push	r31
	CLOCK.counter += 1;
     7b8:	e6 e0       	ldi	r30, 0x06	; 6
     7ba:	f2 e0       	ldi	r31, 0x02	; 2
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	91 83       	std	Z+1, r25	; 0x01
     7c4:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	84 36       	cpi	r24, 0x64	; 100
     7cc:	91 05       	cpc	r25, r1
     7ce:	59 f4       	brne	.+22     	; 0x7e6 <__vector_32+0x58>
		CLOCK.clock_increment();
     7d0:	ef 01       	movw	r28, r30
     7d2:	00 88       	ldd	r0, Z+16	; 0x10
     7d4:	f1 89       	ldd	r31, Z+17	; 0x11
     7d6:	e0 2d       	mov	r30, r0
     7d8:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	9b 83       	std	Y+3, r25	; 0x03
     7e0:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     7e2:	19 82       	std	Y+1, r1	; 0x01
     7e4:	18 82       	st	Y, r1
	}
}
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	7f 91       	pop	r23
     7f8:	6f 91       	pop	r22
     7fa:	5f 91       	pop	r21
     7fc:	4f 91       	pop	r20
     7fe:	3f 91       	pop	r19
     800:	2f 91       	pop	r18
     802:	0f 90       	pop	r0
     804:	0b be       	out	0x3b, r0	; 59
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_42>:

ISR(TIMER4_COMPA_vect){
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	0b b6       	in	r0, 0x3b	; 59
     81c:	0f 92       	push	r0
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
	CLOCK.counter += 1;
     83a:	e6 e0       	ldi	r30, 0x06	; 6
     83c:	f2 e0       	ldi	r31, 0x02	; 2
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	91 83       	std	Z+1, r25	; 0x01
     846:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	84 36       	cpi	r24, 0x64	; 100
     84e:	91 05       	cpc	r25, r1
     850:	59 f4       	brne	.+22     	; 0x868 <__vector_42+0x58>
		CLOCK.clock_increment();
     852:	ef 01       	movw	r28, r30
     854:	00 88       	ldd	r0, Z+16	; 0x10
     856:	f1 89       	ldd	r31, Z+17	; 0x11
     858:	e0 2d       	mov	r30, r0
     85a:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	9b 83       	std	Y+3, r25	; 0x03
     862:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     864:	19 82       	std	Y+1, r1	; 0x01
     866:	18 82       	st	Y, r1
	}
     868:	ff 91       	pop	r31
     86a:	ef 91       	pop	r30
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
     892:	81 b1       	in	r24, 0x01	; 1
     894:	81 60       	ori	r24, 0x01	; 1
     896:	81 b9       	out	0x01, r24	; 1
     898:	82 b1       	in	r24, 0x02	; 2
     89a:	81 60       	ori	r24, 0x01	; 1
     89c:	82 b9       	out	0x02, r24	; 2
     89e:	2f ef       	ldi	r18, 0xFF	; 255
     8a0:	83 ed       	ldi	r24, 0xD3	; 211
     8a2:	90 e3       	ldi	r25, 0x30	; 48
     8a4:	21 50       	subi	r18, 0x01	; 1
     8a6:	80 40       	sbci	r24, 0x00	; 0
     8a8:	90 40       	sbci	r25, 0x00	; 0
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <I2C_Init+0x12>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <I2C_Init+0x1c>
     8ae:	00 00       	nop
     8b0:	82 e1       	ldi	r24, 0x12	; 18
     8b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     8b6:	e9 eb       	ldi	r30, 0xB9	; 185
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	8c 7f       	andi	r24, 0xFC	; 252
     8be:	80 83       	st	Z, r24
     8c0:	85 e0       	ldi	r24, 0x05	; 5
     8c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8c6:	08 95       	ret

000008c8 <I2C_Start>:
     8c8:	94 ea       	ldi	r25, 0xA4	; 164
     8ca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8ce:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8d2:	99 23       	and	r25, r25
     8d4:	e4 f7       	brge	.-8      	; 0x8ce <I2C_Start+0x6>
     8d6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     8da:	98 7f       	andi	r25, 0xF8	; 248
     8dc:	98 30       	cpi	r25, 0x08	; 8
     8de:	91 f4       	brne	.+36     	; 0x904 <I2C_Start+0x3c>
     8e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     8e4:	84 e8       	ldi	r24, 0x84	; 132
     8e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8ee:	88 23       	and	r24, r24
     8f0:	e4 f7       	brge	.-8      	; 0x8ea <I2C_Start+0x22>
     8f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     8f6:	88 7f       	andi	r24, 0xF8	; 248
     8f8:	88 31       	cpi	r24, 0x18	; 24
     8fa:	31 f0       	breq	.+12     	; 0x908 <I2C_Start+0x40>
     8fc:	80 32       	cpi	r24, 0x20	; 32
     8fe:	31 f4       	brne	.+12     	; 0x90c <I2C_Start+0x44>
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	08 95       	ret
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	08 95       	ret
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	08 95       	ret
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	08 95       	ret

00000910 <I2C_Write>:
     910:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     914:	84 e8       	ldi	r24, 0x84	; 132
     916:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     91a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     91e:	88 23       	and	r24, r24
     920:	e4 f7       	brge	.-8      	; 0x91a <I2C_Write+0xa>
     922:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     926:	88 7f       	andi	r24, 0xF8	; 248
     928:	88 32       	cpi	r24, 0x28	; 40
     92a:	21 f0       	breq	.+8      	; 0x934 <I2C_Write+0x24>
     92c:	80 33       	cpi	r24, 0x30	; 48
     92e:	21 f4       	brne	.+8      	; 0x938 <I2C_Write+0x28>
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	08 95       	ret
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	08 95       	ret

0000093c <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     93c:	84 e9       	ldi	r24, 0x94	; 148
     93e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     942:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     946:	84 fd       	sbrc	r24, 4
     948:	fc cf       	rjmp	.-8      	; 0x942 <I2C_Stop+0x6>
     94a:	08 95       	ret

0000094c <main>:
#include <stdlib.h>
#include "UARTLib.h"
#include "clock.h"
#include <util/delay.h>

int main(void){
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	2a 97       	sbiw	r28, 0x0a	; 10
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
	_i2c_address = 0X78;
     960:	88 e7       	ldi	r24, 0x78	; 120
     962:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <_i2c_address>
	I2C_Init();
     966:	95 df       	rcall	.-214    	; 0x892 <I2C_Init>
	InitializeDisplay();
     968:	97 d0       	rcall	.+302    	; 0xa98 <InitializeDisplay>
	print_fonts();
     96a:	51 d1       	rcall	.+674    	; 0xc0e <print_fonts>
     96c:	e7 d0       	rcall	.+462    	; 0xb3c <clear_display>
	clear_display();
     96e:	06 e0       	ldi	r16, 0x06	; 6
     970:	12 e0       	ldi	r17, 0x02	; 2
	
	CLOCK.clock_init();
     972:	d8 01       	movw	r26, r16
     974:	1e 96       	adiw	r26, 0x0e	; 14
     976:	8d 91       	ld	r24, X+
     978:	9c 91       	ld	r25, X
     97a:	1f 97       	sbiw	r26, 0x0f	; 15
     97c:	fc 01       	movw	r30, r24
     97e:	19 95       	eicall
     980:	d8 01       	movw	r26, r16
     982:	1c 96       	adiw	r26, 0x0c	; 12
	CLOCK.clock_enableTimerInterrupt(2);
     984:	ed 91       	ld	r30, X+
     986:	fc 91       	ld	r31, X
     988:	1d 97       	sbiw	r26, 0x0d	; 13
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	19 95       	eicall
     990:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <UART+0x7>
	UART.UART_init(ASYNC, 19200, 1);
     994:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <UART+0x8>
     998:	41 e0       	ldi	r20, 0x01	; 1
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	7b e4       	ldi	r23, 0x4B	; 75
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	19 95       	eicall
     9a6:	fe 01       	movw	r30, r28
     9a8:	31 96       	adiw	r30, 0x01	; 1
	
	char temp[10] = {' '};
     9aa:	8a e0       	ldi	r24, 0x0A	; 10
     9ac:	df 01       	movw	r26, r30
     9ae:	1d 92       	st	X+, r1
     9b0:	8a 95       	dec	r24
     9b2:	e9 f7       	brne	.-6      	; 0x9ae <main+0x62>
     9b4:	80 e2       	ldi	r24, 0x20	; 32
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <UART+0x9>
    while (1){
		UART.UART_transmitChar('s');
     9bc:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <UART+0xa>
     9c0:	83 e7       	ldi	r24, 0x73	; 115
     9c2:	19 95       	eicall
     9c4:	06 e0       	ldi	r16, 0x06	; 6
     9c6:	12 e0       	ldi	r17, 0x02	; 2
		
		sprintf(temp, "%d", CLOCK.hour);
     9c8:	f8 01       	movw	r30, r16
     9ca:	83 85       	ldd	r24, Z+11	; 0x0b
     9cc:	8f 93       	push	r24
     9ce:	82 85       	ldd	r24, Z+10	; 0x0a
     9d0:	8f 93       	push	r24
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f8 e4       	ldi	r31, 0x48	; 72
     9d6:	cf 2e       	mov	r12, r31
     9d8:	f2 e0       	ldi	r31, 0x02	; 2
     9da:	df 2e       	mov	r13, r31
     9dc:	f0 2d       	mov	r31, r0
     9de:	df 92       	push	r13
     9e0:	cf 92       	push	r12
     9e2:	9e 01       	movw	r18, r28
     9e4:	2f 5f       	subi	r18, 0xFF	; 255
     9e6:	3f 4f       	sbci	r19, 0xFF	; 255
     9e8:	79 01       	movw	r14, r18
     9ea:	3f 93       	push	r19
     9ec:	2f 93       	push	r18
     9ee:	02 d5       	rcall	.+2564   	; 0x13f4 <sprintf>
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
		sendStrXY(temp, 0, 0);
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	c7 01       	movw	r24, r14
     9fa:	db d0       	rcall	.+438    	; 0xbb2 <sendStrXY>
     9fc:	42 e0       	ldi	r20, 0x02	; 2
     9fe:	50 e0       	ldi	r21, 0x00	; 0
		sendCharXY(':', 0, 2);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	8a e3       	ldi	r24, 0x3A	; 58
     a06:	ae d0       	rcall	.+348    	; 0xb64 <sendCharXY>
     a08:	d8 01       	movw	r26, r16
     a0a:	19 96       	adiw	r26, 0x09	; 9
     a0c:	8c 91       	ld	r24, X
		sprintf(temp, "%d", CLOCK.minute);
     a0e:	19 97       	sbiw	r26, 0x09	; 9
     a10:	8f 93       	push	r24
     a12:	18 96       	adiw	r26, 0x08	; 8
     a14:	8c 91       	ld	r24, X
     a16:	8f 93       	push	r24
     a18:	df 92       	push	r13
     a1a:	cf 92       	push	r12
     a1c:	ff 92       	push	r15
     a1e:	ef 92       	push	r14
     a20:	e9 d4       	rcall	.+2514   	; 0x13f4 <sprintf>
     a22:	43 e0       	ldi	r20, 0x03	; 3
     a24:	50 e0       	ldi	r21, 0x00	; 0
		sendStrXY(temp, 0, 3);
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	c7 01       	movw	r24, r14
     a2c:	c2 d0       	rcall	.+388    	; 0xbb2 <sendStrXY>
     a2e:	45 e0       	ldi	r20, 0x05	; 5
     a30:	50 e0       	ldi	r21, 0x00	; 0
		sendCharXY(':', 0, 5);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	8a e3       	ldi	r24, 0x3A	; 58
     a38:	95 d0       	rcall	.+298    	; 0xb64 <sendCharXY>
     a3a:	f8 01       	movw	r30, r16
     a3c:	87 81       	ldd	r24, Z+7	; 0x07
		sprintf(temp, "%d", CLOCK.second);
     a3e:	8f 93       	push	r24
     a40:	86 81       	ldd	r24, Z+6	; 0x06
     a42:	8f 93       	push	r24
     a44:	df 92       	push	r13
     a46:	cf 92       	push	r12
     a48:	ff 92       	push	r15
     a4a:	ef 92       	push	r14
     a4c:	d3 d4       	rcall	.+2470   	; 0x13f4 <sprintf>
     a4e:	46 e0       	ldi	r20, 0x06	; 6
     a50:	50 e0       	ldi	r21, 0x00	; 0
		sendStrXY(temp, 0, 6);
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	c7 01       	movw	r24, r14
     a58:	ac d0       	rcall	.+344    	; 0xbb2 <sendStrXY>
     a5a:	d8 01       	movw	r26, r16
     a5c:	12 96       	adiw	r26, 0x02	; 2
     a5e:	8d 91       	ld	r24, X+
		if(CLOCK.interruptFlag){
     a60:	9c 91       	ld	r25, X
     a62:	13 97       	sbiw	r26, 0x03	; 3
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	89 2b       	or	r24, r25
     a70:	09 f4       	brne	.+2      	; 0xa74 <main+0x128>
     a72:	a2 cf       	rjmp	.-188    	; 0x9b8 <main+0x6c>
     a74:	63 d0       	rcall	.+198    	; 0xb3c <clear_display>
     a76:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <CLOCK+0x3>
			clear_display();
     a7a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <CLOCK+0x2>
			CLOCK.interruptFlag = 0;
     a7e:	9c cf       	rjmp	.-200    	; 0x9b8 <main+0x6c>

00000a80 <ssd1306_command>:
     a80:	cf 93       	push	r28
     a82:	c8 2f       	mov	r28, r24
     a84:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_i2c_address>

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
     a88:	1f df       	rcall	.-450    	; 0x8c8 <I2C_Start>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	41 df       	rcall	.-382    	; 0x910 <I2C_Write>
     a8e:	8c 2f       	mov	r24, r28
     a90:	3f df       	rcall	.-386    	; 0x910 <I2C_Write>
     a92:	54 df       	rcall	.-344    	; 0x93c <I2C_Stop>
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <InitializeDisplay>:
     a98:	8e ea       	ldi	r24, 0xAE	; 174
     a9a:	f2 df       	rcall	.-28     	; 0xa80 <ssd1306_command>
     a9c:	85 ed       	ldi	r24, 0xD5	; 213
     a9e:	f0 df       	rcall	.-32     	; 0xa80 <ssd1306_command>
     aa0:	80 e8       	ldi	r24, 0x80	; 128
     aa2:	ee df       	rcall	.-36     	; 0xa80 <ssd1306_command>
     aa4:	88 ea       	ldi	r24, 0xA8	; 168
     aa6:	ec df       	rcall	.-40     	; 0xa80 <ssd1306_command>
     aa8:	8f e3       	ldi	r24, 0x3F	; 63
     aaa:	ea df       	rcall	.-44     	; 0xa80 <ssd1306_command>
     aac:	83 ed       	ldi	r24, 0xD3	; 211
     aae:	e8 df       	rcall	.-48     	; 0xa80 <ssd1306_command>
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e6 df       	rcall	.-52     	; 0xa80 <ssd1306_command>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	e4 df       	rcall	.-56     	; 0xa80 <ssd1306_command>
     ab8:	8d e8       	ldi	r24, 0x8D	; 141
     aba:	e2 df       	rcall	.-60     	; 0xa80 <ssd1306_command>
     abc:	84 e1       	ldi	r24, 0x14	; 20
     abe:	e0 df       	rcall	.-64     	; 0xa80 <ssd1306_command>
     ac0:	80 e2       	ldi	r24, 0x20	; 32
     ac2:	de df       	rcall	.-68     	; 0xa80 <ssd1306_command>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	dc df       	rcall	.-72     	; 0xa80 <ssd1306_command>
     ac8:	81 ea       	ldi	r24, 0xA1	; 161
     aca:	da df       	rcall	.-76     	; 0xa80 <ssd1306_command>
     acc:	88 ec       	ldi	r24, 0xC8	; 200
     ace:	d8 df       	rcall	.-80     	; 0xa80 <ssd1306_command>
     ad0:	8a ed       	ldi	r24, 0xDA	; 218
     ad2:	d6 df       	rcall	.-84     	; 0xa80 <ssd1306_command>
     ad4:	82 e1       	ldi	r24, 0x12	; 18
     ad6:	d4 df       	rcall	.-88     	; 0xa80 <ssd1306_command>
     ad8:	81 e8       	ldi	r24, 0x81	; 129
     ada:	d2 df       	rcall	.-92     	; 0xa80 <ssd1306_command>
     adc:	8f ec       	ldi	r24, 0xCF	; 207
     ade:	d0 df       	rcall	.-96     	; 0xa80 <ssd1306_command>
     ae0:	89 ed       	ldi	r24, 0xD9	; 217
     ae2:	ce df       	rcall	.-100    	; 0xa80 <ssd1306_command>
     ae4:	81 ef       	ldi	r24, 0xF1	; 241
     ae6:	cc df       	rcall	.-104    	; 0xa80 <ssd1306_command>
     ae8:	8b ed       	ldi	r24, 0xDB	; 219
     aea:	ca df       	rcall	.-108    	; 0xa80 <ssd1306_command>
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	c8 df       	rcall	.-112    	; 0xa80 <ssd1306_command>
     af0:	84 ea       	ldi	r24, 0xA4	; 164
     af2:	c6 df       	rcall	.-116    	; 0xa80 <ssd1306_command>
     af4:	86 ea       	ldi	r24, 0xA6	; 166
     af6:	c4 df       	rcall	.-120    	; 0xa80 <ssd1306_command>
     af8:	8f ea       	ldi	r24, 0xAF	; 175
     afa:	c2 cf       	rjmp	.-124    	; 0xa80 <ssd1306_command>
     afc:	08 95       	ret

00000afe <SendChar>:
     afe:	cf 93       	push	r28
     b00:	c8 2f       	mov	r28, r24
     b02:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_i2c_address>
     b06:	e0 de       	rcall	.-576    	; 0x8c8 <I2C_Start>
     b08:	80 e4       	ldi	r24, 0x40	; 64
     b0a:	02 df       	rcall	.-508    	; 0x910 <I2C_Write>
     b0c:	8c 2f       	mov	r24, r28
     b0e:	00 df       	rcall	.-512    	; 0x910 <I2C_Write>
     b10:	15 df       	rcall	.-470    	; 0x93c <I2C_Stop>
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <setXY>:
     b16:	cf 93       	push	r28
     b18:	c6 2f       	mov	r28, r22
     b1a:	80 55       	subi	r24, 0x50	; 80
     b1c:	b1 df       	rcall	.-158    	; 0xa80 <ssd1306_command>
     b1e:	8c 2f       	mov	r24, r28
     b20:	88 0f       	add	r24, r24
     b22:	88 0f       	add	r24, r24
     b24:	88 0f       	add	r24, r24
     b26:	88 70       	andi	r24, 0x08	; 8
     b28:	ab df       	rcall	.-170    	; 0xa80 <ssd1306_command>
     b2a:	8c 2f       	mov	r24, r28
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	96 95       	lsr	r25
     b30:	87 95       	ror	r24
     b32:	8f 70       	andi	r24, 0x0F	; 15
     b34:	80 5f       	subi	r24, 0xF0	; 240
     b36:	a4 df       	rcall	.-184    	; 0xa80 <ssd1306_command>
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <clear_display>:
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	d0 e0       	ldi	r29, 0x00	; 0
     b42:	0b c0       	rjmp	.+22     	; 0xb5a <clear_display+0x1e>
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	8d 2f       	mov	r24, r29
     b48:	e6 df       	rcall	.-52     	; 0xb16 <setXY>
     b4a:	c0 e0       	ldi	r28, 0x00	; 0
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <clear_display+0x18>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	d6 df       	rcall	.-84     	; 0xafe <SendChar>
     b52:	cf 5f       	subi	r28, 0xFF	; 255
     b54:	cc 23       	and	r28, r28
     b56:	dc f7       	brge	.-10     	; 0xb4e <clear_display+0x12>
     b58:	df 5f       	subi	r29, 0xFF	; 255
     b5a:	d8 30       	cpi	r29, 0x08	; 8
     b5c:	98 f3       	brcs	.-26     	; 0xb44 <clear_display+0x8>
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <sendCharXY>:
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	18 2f       	mov	r17, r24
     b6c:	86 2f       	mov	r24, r22
     b6e:	64 2f       	mov	r22, r20
     b70:	d2 df       	rcall	.-92     	; 0xb16 <setXY>
     b72:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_i2c_address>
     b76:	a8 de       	rcall	.-688    	; 0x8c8 <I2C_Start>
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	ca de       	rcall	.-620    	; 0x910 <I2C_Write>
     b7c:	c0 e0       	ldi	r28, 0x00	; 0
     b7e:	d0 e0       	ldi	r29, 0x00	; 0
     b80:	10 c0       	rjmp	.+32     	; 0xba2 <sendCharXY+0x3e>
     b82:	e1 2f       	mov	r30, r17
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	b0 97       	sbiw	r30, 0x20	; 32
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	ec 51       	subi	r30, 0x1C	; 28
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	ec 0f       	add	r30, r28
     b9a:	fd 1f       	adc	r31, r29
     b9c:	84 91       	lpm	r24, Z
     b9e:	b8 de       	rcall	.-656    	; 0x910 <I2C_Write>
     ba0:	21 96       	adiw	r28, 0x01	; 1
     ba2:	c8 30       	cpi	r28, 0x08	; 8
     ba4:	d1 05       	cpc	r29, r1
     ba6:	6c f3       	brlt	.-38     	; 0xb82 <sendCharXY+0x1e>
     ba8:	c9 de       	rcall	.-622    	; 0x93c <I2C_Stop>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	08 95       	ret

00000bb2 <sendStrXY>:
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	ec 01       	movw	r28, r24
     bbc:	86 2f       	mov	r24, r22
     bbe:	06 2f       	mov	r16, r22
     bc0:	64 2f       	mov	r22, r20
     bc2:	a9 df       	rcall	.-174    	; 0xb16 <setXY>
     bc4:	1c c0       	rjmp	.+56     	; 0xbfe <sendStrXY+0x4c>
     bc6:	8a 30       	cpi	r24, 0x0A	; 10
     bc8:	29 f4       	brne	.+10     	; 0xbd4 <sendStrXY+0x22>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	80 0f       	add	r24, r16
     bd0:	a2 df       	rcall	.-188    	; 0xb16 <setXY>
     bd2:	21 96       	adiw	r28, 0x01	; 1
     bd4:	10 e0       	ldi	r17, 0x00	; 0
     bd6:	10 c0       	rjmp	.+32     	; 0xbf8 <sendStrXY+0x46>
     bd8:	e8 81       	ld	r30, Y
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	b0 97       	sbiw	r30, 0x20	; 32
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	ec 51       	subi	r30, 0x1C	; 28
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	e1 0f       	add	r30, r17
     bf0:	f1 1d       	adc	r31, r1
     bf2:	84 91       	lpm	r24, Z
     bf4:	84 df       	rcall	.-248    	; 0xafe <SendChar>
     bf6:	1f 5f       	subi	r17, 0xFF	; 255
     bf8:	18 30       	cpi	r17, 0x08	; 8
     bfa:	70 f3       	brcs	.-36     	; 0xbd8 <sendStrXY+0x26>
     bfc:	21 96       	adiw	r28, 0x01	; 1
     bfe:	88 81       	ld	r24, Y
     c00:	81 11       	cpse	r24, r1
     c02:	e1 cf       	rjmp	.-62     	; 0xbc6 <sendStrXY+0x14>
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	08 95       	ret

00000c0e <print_fonts>:
void print_fonts(){
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
	clear_display();
     c1c:	8f df       	rcall	.-226    	; 0xb3c <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
     c1e:	e1 2c       	mov	r14, r1
     c20:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
     c22:	68 94       	set
     c24:	dd 24       	eor	r13, r13
     c26:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
     c28:	27 c0       	rjmp	.+78     	; 0xc78 <print_fonts+0x6a>
		setXY(k,0);
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	8e 2d       	mov	r24, r14
     c2e:	73 df       	rcall	.-282    	; 0xb16 <setXY>

		for (int j=0;j<16;j++)
     c30:	00 e0       	ldi	r16, 0x00	; 0
     c32:	10 e0       	ldi	r17, 0x00	; 0
     c34:	19 c0       	rjmp	.+50     	; 0xc68 <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
     c36:	f8 01       	movw	r30, r16
     c38:	ed 0d       	add	r30, r13
     c3a:	f1 1d       	adc	r31, r1
     c3c:	b0 97       	sbiw	r30, 0x20	; 32
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	ec 51       	subi	r30, 0x1C	; 28
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	ec 0f       	add	r30, r28
     c50:	fd 1f       	adc	r31, r29
     c52:	84 91       	lpm	r24, Z
     c54:	54 df       	rcall	.-344    	; 0xafe <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
     c56:	21 96       	adiw	r28, 0x01	; 1
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <print_fonts+0x50>
     c5a:	c0 e0       	ldi	r28, 0x00	; 0
     c5c:	d0 e0       	ldi	r29, 0x00	; 0
     c5e:	c8 30       	cpi	r28, 0x08	; 8
     c60:	d1 05       	cpc	r29, r1
     c62:	4c f3       	brlt	.-46     	; 0xc36 <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
     c64:	0f 5f       	subi	r16, 0xFF	; 255
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	00 31       	cpi	r16, 0x10	; 16
     c6a:	11 05       	cpc	r17, r1
     c6c:	b4 f3       	brlt	.-20     	; 0xc5a <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
     c6e:	80 e1       	ldi	r24, 0x10	; 16
     c70:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	e8 1a       	sub	r14, r24
     c76:	f8 0a       	sbc	r15, r24
     c78:	86 e0       	ldi	r24, 0x06	; 6
     c7a:	e8 16       	cp	r14, r24
     c7c:	f1 04       	cpc	r15, r1
     c7e:	ac f2       	brlt	.-86     	; 0xc2a <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	08 95       	ret

00000c90 <UART_initASYNC0>:
#include "I2C.h"  //include library for i2c driver
#include "ssd1306.h" //include display driver
#include <util/delay.h>

int UART_initASYNC0(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     c90:	82 95       	swap	r24
     c92:	92 95       	swap	r25
     c94:	90 7f       	andi	r25, 0xF0	; 240
     c96:	98 27       	eor	r25, r24
     c98:	80 7f       	andi	r24, 0xF0	; 240
     c9a:	98 27       	eor	r25, r24
     c9c:	9c 01       	movw	r18, r24
     c9e:	99 0f       	add	r25, r25
     ca0:	44 0b       	sbc	r20, r20
     ca2:	55 0b       	sbc	r21, r21
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	74 e2       	ldi	r23, 0x24	; 36
     ca8:	84 ef       	ldi	r24, 0xF4	; 244
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	3f d2       	rcall	.+1150   	; 0x112c <__udivmodsi4>
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	31 09       	sbc	r19, r1
     cb2:	eb e1       	ldi	r30, 0x1B	; 27
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	31 83       	std	Z+1, r19	; 0x01
     cb8:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)(UART.ubrr>>8);
     cba:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H = (unsigned char)UART.ubrr;
     cbe:	80 81       	ld	r24, Z
     cc0:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UCSR0A |= (1<<RXC0);
     cc4:	e0 ec       	ldi	r30, 0xC0	; 192
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(1<<UCSZ02);
     cce:	e1 ec       	ldi	r30, 0xC1	; 193
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8c 69       	ori	r24, 0x9C	; 156
     cd6:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     cd8:	e2 ec       	ldi	r30, 0xC2	; 194
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	86 60       	ori	r24, 0x06	; 6
     ce0:	80 83       	st	Z, r24
	return 1;
};
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	08 95       	ret

00000ce8 <UART_initASYNC1>:

int UART_initASYNC1(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     ce8:	82 95       	swap	r24
     cea:	92 95       	swap	r25
     cec:	90 7f       	andi	r25, 0xF0	; 240
     cee:	98 27       	eor	r25, r24
     cf0:	80 7f       	andi	r24, 0xF0	; 240
     cf2:	98 27       	eor	r25, r24
     cf4:	9c 01       	movw	r18, r24
     cf6:	99 0f       	add	r25, r25
     cf8:	44 0b       	sbc	r20, r20
     cfa:	55 0b       	sbc	r21, r21
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	74 e2       	ldi	r23, 0x24	; 36
     d00:	84 ef       	ldi	r24, 0xF4	; 244
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	13 d2       	rcall	.+1062   	; 0x112c <__udivmodsi4>
     d06:	21 50       	subi	r18, 0x01	; 1
     d08:	31 09       	sbc	r19, r1
     d0a:	eb e1       	ldi	r30, 0x1B	; 27
     d0c:	f2 e0       	ldi	r31, 0x02	; 2
     d0e:	31 83       	std	Z+1, r19	; 0x01
     d10:	20 83       	st	Z, r18
	UBRR1L = (unsigned char)(UART.ubrr>>8);
     d12:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	UBRR1H = (unsigned char)UART.ubrr;
     d16:	80 81       	ld	r24, Z
     d18:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UCSR1A |= (1<<RXC1);
     d1c:	e8 ec       	ldi	r30, 0xC8	; 200
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	80 83       	st	Z, r24
	UCSR1B |= (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1)|(1<<UCSZ12);
     d26:	e9 ec       	ldi	r30, 0xC9	; 201
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8c 69       	ori	r24, 0x9C	; 156
     d2e:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
     d30:	ea ec       	ldi	r30, 0xCA	; 202
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	86 60       	ori	r24, 0x06	; 6
     d38:	80 83       	st	Z, r24
	return 1;
};
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	08 95       	ret

00000d40 <UART_initASYNC2>:

int UART_initASYNC2(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     d40:	82 95       	swap	r24
     d42:	92 95       	swap	r25
     d44:	90 7f       	andi	r25, 0xF0	; 240
     d46:	98 27       	eor	r25, r24
     d48:	80 7f       	andi	r24, 0xF0	; 240
     d4a:	98 27       	eor	r25, r24
     d4c:	9c 01       	movw	r18, r24
     d4e:	99 0f       	add	r25, r25
     d50:	44 0b       	sbc	r20, r20
     d52:	55 0b       	sbc	r21, r21
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	74 e2       	ldi	r23, 0x24	; 36
     d58:	84 ef       	ldi	r24, 0xF4	; 244
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	e7 d1       	rcall	.+974    	; 0x112c <__udivmodsi4>
     d5e:	21 50       	subi	r18, 0x01	; 1
     d60:	31 09       	sbc	r19, r1
     d62:	eb e1       	ldi	r30, 0x1B	; 27
     d64:	f2 e0       	ldi	r31, 0x02	; 2
     d66:	31 83       	std	Z+1, r19	; 0x01
     d68:	20 83       	st	Z, r18
	UBRR2L = (unsigned char)(UART.ubrr>>8);
     d6a:	30 93 d4 00 	sts	0x00D4, r19	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UBRR2H = (unsigned char)UART.ubrr;
     d6e:	80 81       	ld	r24, Z
     d70:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
	UCSR2A |= (1<<RXC2);
     d74:	e0 ed       	ldi	r30, 0xD0	; 208
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	80 83       	st	Z, r24
	UCSR2B |= (1<<RXCIE2)|(1<<RXEN2)|(1<<TXEN2)|(1<<UCSZ22);
     d7e:	e1 ed       	ldi	r30, 0xD1	; 209
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8c 69       	ori	r24, 0x9C	; 156
     d86:	80 83       	st	Z, r24
	UCSR2C |= (1<<UCSZ21)|(1<<UCSZ20);
     d88:	e2 ed       	ldi	r30, 0xD2	; 210
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	86 60       	ori	r24, 0x06	; 6
     d90:	80 83       	st	Z, r24
	return 1;
};
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 95       	ret

00000d98 <UART_initASYNC3>:

int UART_initASYNC3(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     d98:	82 95       	swap	r24
     d9a:	92 95       	swap	r25
     d9c:	90 7f       	andi	r25, 0xF0	; 240
     d9e:	98 27       	eor	r25, r24
     da0:	80 7f       	andi	r24, 0xF0	; 240
     da2:	98 27       	eor	r25, r24
     da4:	9c 01       	movw	r18, r24
     da6:	99 0f       	add	r25, r25
     da8:	44 0b       	sbc	r20, r20
     daa:	55 0b       	sbc	r21, r21
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	74 e2       	ldi	r23, 0x24	; 36
     db0:	84 ef       	ldi	r24, 0xF4	; 244
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	bb d1       	rcall	.+886    	; 0x112c <__udivmodsi4>
     db6:	21 50       	subi	r18, 0x01	; 1
     db8:	31 09       	sbc	r19, r1
     dba:	eb e1       	ldi	r30, 0x1B	; 27
     dbc:	f2 e0       	ldi	r31, 0x02	; 2
     dbe:	31 83       	std	Z+1, r19	; 0x01
     dc0:	20 83       	st	Z, r18
	UBRR3L = (unsigned char)(UART.ubrr>>8);
     dc2:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	UBRR3H = (unsigned char)UART.ubrr;
     dc6:	80 81       	ld	r24, Z
     dc8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	UCSR3A |= (1<<RXC1);
     dcc:	e0 e3       	ldi	r30, 0x30	; 48
     dce:	f1 e0       	ldi	r31, 0x01	; 1
     dd0:	80 81       	ld	r24, Z
     dd2:	80 68       	ori	r24, 0x80	; 128
     dd4:	80 83       	st	Z, r24
	UCSR3B |= (1<<RXCIE3)|(1<<RXEN3)|(1<<TXEN3)|(1<<UCSZ32);
     dd6:	e1 e3       	ldi	r30, 0x31	; 49
     dd8:	f1 e0       	ldi	r31, 0x01	; 1
     dda:	80 81       	ld	r24, Z
     ddc:	8c 69       	ori	r24, 0x9C	; 156
     dde:	80 83       	st	Z, r24
	UCSR3C |= (1<<UCSZ31)|(1<<UCSZ30);
     de0:	e2 e3       	ldi	r30, 0x32	; 50
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	80 81       	ld	r24, Z
     de6:	86 60       	ori	r24, 0x06	; 6
     de8:	80 83       	st	Z, r24
	return 1;
};
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	08 95       	ret

00000df0 <UART_init>:

int initSLAVE(int rate, int UARTReg, int UARTBaudRegList[13][4][3]){
	return 1;
};*/

int UART_init(int mode, int baudRate, int UARTId){
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	28 97       	sbiw	r28, 0x08	; 8
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
	if(UARTId > 3){
     e04:	44 30       	cpi	r20, 0x04	; 4
     e06:	51 05       	cpc	r21, r1
     e08:	f4 f4       	brge	.+60     	; 0xe46 <UART_init+0x56>
     e0a:	cb 01       	movw	r24, r22
		return 0;
	}
	sei();
     e0c:	78 94       	sei
	UART.UARTReg = UARTId;
     e0e:	50 93 1e 02 	sts	0x021E, r21	; 0x80021e <UART+0x3>
     e12:	40 93 1d 02 	sts	0x021D, r20	; 0x80021d <UART+0x2>
	int (*UART_initAsyncFuncs[4])(int rate) = {UART_initASYNC0, UART_initASYNC1, UART_initASYNC2, UART_initASYNC3};
     e16:	28 e0       	ldi	r18, 0x08	; 8
     e18:	e0 e3       	ldi	r30, 0x30	; 48
     e1a:	f2 e0       	ldi	r31, 0x02	; 2
     e1c:	de 01       	movw	r26, r28
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	01 90       	ld	r0, Z+
     e22:	0d 92       	st	X+, r0
     e24:	2a 95       	dec	r18
     e26:	e1 f7       	brne	.-8      	; 0xe20 <UART_init+0x30>
	(*UART_initAsyncFuncs[UARTId])(baudRate);
     e28:	44 0f       	add	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	e1 e0       	ldi	r30, 0x01	; 1
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ec 0f       	add	r30, r28
     e32:	fd 1f       	adc	r31, r29
     e34:	e4 0f       	add	r30, r20
     e36:	f5 1f       	adc	r31, r21
     e38:	01 90       	ld	r0, Z+
     e3a:	f0 81       	ld	r31, Z
     e3c:	e0 2d       	mov	r30, r0
     e3e:	19 95       	eicall
	return 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <UART_init+0x5a>
	return 1;
};*/

int UART_init(int mode, int baudRate, int UARTId){
	if(UARTId > 3){
		return 0;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
	sei();
	UART.UARTReg = UARTId;
	int (*UART_initAsyncFuncs[4])(int rate) = {UART_initASYNC0, UART_initASYNC1, UART_initASYNC2, UART_initASYNC3};
	(*UART_initAsyncFuncs[UARTId])(baudRate);
	return 1;
}
     e4a:	28 96       	adiw	r28, 0x08	; 8
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <UART_transmitChar0>:

int UART_transmitChar0(char transmitionData){
	//while(~(UCSR0A & (1<<UDRE0))){}
	UCSR0B &= ~(1<<TXB80);
     e5c:	e1 ec       	ldi	r30, 0xC1	; 193
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	90 81       	ld	r25, Z
     e62:	9e 7f       	andi	r25, 0xFE	; 254
     e64:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR0B |= (1<<TXB80);
	}
	UDR0 = transmitionData;
     e66:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 1;
};
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	08 95       	ret

00000e70 <UART_transmitChar1>:

int UART_transmitChar1(char transmitionData){
	//while(~(UCSR1A & (1<<UDRE1))){}
	UCSR1B &= ~(1<<TXB81);
     e70:	e9 ec       	ldi	r30, 0xC9	; 201
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	90 81       	ld	r25, Z
     e76:	9e 7f       	andi	r25, 0xFE	; 254
     e78:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR1B |= (1<<TXB81);
	}
	UDR1 = transmitionData;
     e7a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	return 1;
};
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	08 95       	ret

00000e84 <UART_transmitChar2>:

int UART_transmitChar2(char transmitionData){
	//while(~(UCSR2A & (1<<UDRE2))){}
	UCSR2B &= ~(1<<TXB82);
     e84:	e1 ed       	ldi	r30, 0xD1	; 209
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	90 81       	ld	r25, Z
     e8a:	9e 7f       	andi	r25, 0xFE	; 254
     e8c:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR2B |= (1<<TXB82);
	}
	UDR2 = transmitionData;
     e8e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	return 1;
};
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	08 95       	ret

00000e98 <UART_transmitChar3>:

int UART_transmitChar3(char transmitionData){
	//while(~(UCSR3A & (1<<UDRE3))){}
	UCSR3B &= ~(1<<TXB83);
     e98:	e1 e3       	ldi	r30, 0x31	; 49
     e9a:	f1 e0       	ldi	r31, 0x01	; 1
     e9c:	90 81       	ld	r25, Z
     e9e:	9e 7f       	andi	r25, 0xFE	; 254
     ea0:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR3B |= (1<<TXB83);
	}
	UDR3 = transmitionData;
     ea2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
	return 1;
};
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	08 95       	ret

00000eac <UART_transmitChar>:

int UART_transmitChar(char transmitionData){
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	28 97       	sbiw	r28, 0x08	; 8
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
	int (*UART_transmitCharFuncs[4])(char data) = {UART_transmitChar0, UART_transmitChar1, UART_transmitChar2, UART_transmitChar3};
     ec0:	98 e0       	ldi	r25, 0x08	; 8
     ec2:	e8 e3       	ldi	r30, 0x38	; 56
     ec4:	f2 e0       	ldi	r31, 0x02	; 2
     ec6:	de 01       	movw	r26, r28
     ec8:	11 96       	adiw	r26, 0x01	; 1
     eca:	01 90       	ld	r0, Z+
     ecc:	0d 92       	st	X+, r0
     ece:	9a 95       	dec	r25
     ed0:	e1 f7       	brne	.-8      	; 0xeca <UART_transmitChar+0x1e>
	(*UART_transmitCharFuncs[UART.UARTReg])(transmitionData);
     ed2:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <UART+0x2>
     ed6:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <UART+0x3>
     eda:	ee 0f       	add	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	21 e0       	ldi	r18, 0x01	; 1
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	2c 0f       	add	r18, r28
     ee4:	3d 1f       	adc	r19, r29
     ee6:	e2 0f       	add	r30, r18
     ee8:	f3 1f       	adc	r31, r19
     eea:	01 90       	ld	r0, Z+
     eec:	f0 81       	ld	r31, Z
     eee:	e0 2d       	mov	r30, r0
     ef0:	19 95       	eicall
	return 1;
}
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	28 96       	adiw	r28, 0x08	; 8
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <UART_receiveChar0>:

int UART_receiveChar0(){
	UART.RXh = UCSR0B;
     f08:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     f0c:	eb e1       	ldi	r30, 0x1B	; 27
     f0e:	f2 e0       	ldi	r31, 0x02	; 2
     f10:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR0;
     f12:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     f16:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
     f18:	84 81       	ldd	r24, Z+4	; 0x04
     f1a:	86 95       	lsr	r24
     f1c:	81 70       	andi	r24, 0x01	; 1
     f1e:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     f20:	84 81       	ldd	r24, Z+4	; 0x04
     f22:	85 81       	ldd	r24, Z+5	; 0x05
     f24:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	08 95       	ret

00000f2c <UART_receiveChar1>:

int UART_receiveChar1(){
	UART.RXh = UCSR1B;
     f2c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     f30:	eb e1       	ldi	r30, 0x1B	; 27
     f32:	f2 e0       	ldi	r31, 0x02	; 2
     f34:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR1;
     f36:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     f3a:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
     f3c:	84 81       	ldd	r24, Z+4	; 0x04
     f3e:	86 95       	lsr	r24
     f40:	81 70       	andi	r24, 0x01	; 1
     f42:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     f44:	84 81       	ldd	r24, Z+4	; 0x04
     f46:	85 81       	ldd	r24, Z+5	; 0x05
     f48:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	08 95       	ret

00000f50 <UART_receiveChar2>:

int UART_receiveChar2(){
	UART.RXh = UCSR2B;
     f50:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
     f54:	eb e1       	ldi	r30, 0x1B	; 27
     f56:	f2 e0       	ldi	r31, 0x02	; 2
     f58:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR2;
     f5a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     f5e:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
     f60:	84 81       	ldd	r24, Z+4	; 0x04
     f62:	86 95       	lsr	r24
     f64:	81 70       	andi	r24, 0x01	; 1
     f66:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     f68:	84 81       	ldd	r24, Z+4	; 0x04
     f6a:	85 81       	ldd	r24, Z+5	; 0x05
     f6c:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	08 95       	ret

00000f74 <UART_receiveChar3>:

int UART_receiveChar3(){
	UART.RXh = UCSR3B;
     f74:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
     f78:	eb e1       	ldi	r30, 0x1B	; 27
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR3;
     f7e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
     f82:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
     f84:	84 81       	ldd	r24, Z+4	; 0x04
     f86:	86 95       	lsr	r24
     f88:	81 70       	andi	r24, 0x01	; 1
     f8a:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     f8c:	84 81       	ldd	r24, Z+4	; 0x04
     f8e:	85 81       	ldd	r24, Z+5	; 0x05
     f90:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	08 95       	ret

00000f98 <UART_receiveChar>:

int UART_receiveChar(){
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	28 97       	sbiw	r28, 0x08	; 8
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
	int(*UART_receiveCharFuncs[4])() = {UART_receiveChar0, UART_receiveChar1, UART_receiveChar2, UART_receiveChar3};
     fac:	88 e0       	ldi	r24, 0x08	; 8
     fae:	e0 e4       	ldi	r30, 0x40	; 64
     fb0:	f2 e0       	ldi	r31, 0x02	; 2
     fb2:	de 01       	movw	r26, r28
     fb4:	11 96       	adiw	r26, 0x01	; 1
     fb6:	01 90       	ld	r0, Z+
     fb8:	0d 92       	st	X+, r0
     fba:	8a 95       	dec	r24
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <UART_receiveChar+0x1e>
	(*UART_receiveCharFuncs[UART.UARTReg])();
     fbe:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <UART+0x2>
     fc2:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <UART+0x3>
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	8c 0f       	add	r24, r28
     fd0:	9d 1f       	adc	r25, r29
     fd2:	e8 0f       	add	r30, r24
     fd4:	f9 1f       	adc	r31, r25
     fd6:	01 90       	ld	r0, Z+
     fd8:	f0 81       	ld	r31, Z
     fda:	e0 2d       	mov	r30, r0
     fdc:	19 95       	eicall
	return 1;
}
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	28 96       	adiw	r28, 0x08	; 8
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <__vector_25>:
struct uart UART = {
	.UART_init = UART_init,
	.UART_transmitChar = UART_transmitChar,
};

ISR(USART0_RX_vect){
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	0b b6       	in	r0, 0x3b	; 59
    1000:	0f 92       	push	r0
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
	UART_receiveChar();
    101a:	be df       	rcall	.-132    	; 0xf98 <UART_receiveChar>
};
    101c:	ff 91       	pop	r31
    101e:	ef 91       	pop	r30
    1020:	bf 91       	pop	r27
    1022:	af 91       	pop	r26
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	7f 91       	pop	r23
    102a:	6f 91       	pop	r22
    102c:	5f 91       	pop	r21
    102e:	4f 91       	pop	r20
    1030:	3f 91       	pop	r19
    1032:	2f 91       	pop	r18
    1034:	0f 90       	pop	r0
    1036:	0b be       	out	0x3b, r0	; 59
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <__vector_36>:

ISR(USART1_RX_vect){
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	0b b6       	in	r0, 0x3b	; 59
    104e:	0f 92       	push	r0
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
	UART_receiveChar();
    1068:	97 df       	rcall	.-210    	; 0xf98 <UART_receiveChar>
};
    106a:	ff 91       	pop	r31
    106c:	ef 91       	pop	r30
    106e:	bf 91       	pop	r27
    1070:	af 91       	pop	r26
    1072:	9f 91       	pop	r25
    1074:	8f 91       	pop	r24
    1076:	7f 91       	pop	r23
    1078:	6f 91       	pop	r22
    107a:	5f 91       	pop	r21
    107c:	4f 91       	pop	r20
    107e:	3f 91       	pop	r19
    1080:	2f 91       	pop	r18
    1082:	0f 90       	pop	r0
    1084:	0b be       	out	0x3b, r0	; 59
    1086:	0f 90       	pop	r0
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	0f 90       	pop	r0
    108c:	1f 90       	pop	r1
    108e:	18 95       	reti

00001090 <__vector_51>:

ISR(USART2_RX_vect){
    1090:	1f 92       	push	r1
    1092:	0f 92       	push	r0
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	0b b6       	in	r0, 0x3b	; 59
    109c:	0f 92       	push	r0
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
	UART_receiveChar();
    10b6:	70 df       	rcall	.-288    	; 0xf98 <UART_receiveChar>
};
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	7f 91       	pop	r23
    10c6:	6f 91       	pop	r22
    10c8:	5f 91       	pop	r21
    10ca:	4f 91       	pop	r20
    10cc:	3f 91       	pop	r19
    10ce:	2f 91       	pop	r18
    10d0:	0f 90       	pop	r0
    10d2:	0b be       	out	0x3b, r0	; 59
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_54>:

ISR(USART3_RX_vect){
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	0b b6       	in	r0, 0x3b	; 59
    10ea:	0f 92       	push	r0
    10ec:	2f 93       	push	r18
    10ee:	3f 93       	push	r19
    10f0:	4f 93       	push	r20
    10f2:	5f 93       	push	r21
    10f4:	6f 93       	push	r22
    10f6:	7f 93       	push	r23
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	af 93       	push	r26
    10fe:	bf 93       	push	r27
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
	UART_receiveChar();
    1104:	49 df       	rcall	.-366    	; 0xf98 <UART_receiveChar>
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0b be       	out	0x3b, r0	; 59
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__udivmodsi4>:
    112c:	a1 e2       	ldi	r26, 0x21	; 33
    112e:	1a 2e       	mov	r1, r26
    1130:	aa 1b       	sub	r26, r26
    1132:	bb 1b       	sub	r27, r27
    1134:	fd 01       	movw	r30, r26
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <__udivmodsi4_ep>

00001138 <__udivmodsi4_loop>:
    1138:	aa 1f       	adc	r26, r26
    113a:	bb 1f       	adc	r27, r27
    113c:	ee 1f       	adc	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	a2 17       	cp	r26, r18
    1142:	b3 07       	cpc	r27, r19
    1144:	e4 07       	cpc	r30, r20
    1146:	f5 07       	cpc	r31, r21
    1148:	20 f0       	brcs	.+8      	; 0x1152 <__udivmodsi4_ep>
    114a:	a2 1b       	sub	r26, r18
    114c:	b3 0b       	sbc	r27, r19
    114e:	e4 0b       	sbc	r30, r20
    1150:	f5 0b       	sbc	r31, r21

00001152 <__udivmodsi4_ep>:
    1152:	66 1f       	adc	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	1a 94       	dec	r1
    115c:	69 f7       	brne	.-38     	; 0x1138 <__udivmodsi4_loop>
    115e:	60 95       	com	r22
    1160:	70 95       	com	r23
    1162:	80 95       	com	r24
    1164:	90 95       	com	r25
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	bd 01       	movw	r22, r26
    116c:	cf 01       	movw	r24, r30
    116e:	08 95       	ret

00001170 <calloc>:
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	86 9f       	mul	r24, r22
    117a:	80 01       	movw	r16, r0
    117c:	87 9f       	mul	r24, r23
    117e:	10 0d       	add	r17, r0
    1180:	96 9f       	mul	r25, r22
    1182:	10 0d       	add	r17, r0
    1184:	11 24       	eor	r1, r1
    1186:	c8 01       	movw	r24, r16
    1188:	0d d0       	rcall	.+26     	; 0x11a4 <malloc>
    118a:	ec 01       	movw	r28, r24
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	21 f0       	breq	.+8      	; 0x1198 <calloc+0x28>
    1190:	a8 01       	movw	r20, r16
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	27 d1       	rcall	.+590    	; 0x13e6 <memset>
    1198:	ce 01       	movw	r24, r28
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	08 95       	ret

000011a4 <malloc>:
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	91 05       	cpc	r25, r1
    11b0:	10 f4       	brcc	.+4      	; 0x11b6 <malloc+0x12>
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <__flp>
    11ba:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <__flp+0x1>
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	30 97       	sbiw	r30, 0x00	; 0
    11c8:	19 f1       	breq	.+70     	; 0x1210 <malloc+0x6c>
    11ca:	40 81       	ld	r20, Z
    11cc:	51 81       	ldd	r21, Z+1	; 0x01
    11ce:	02 81       	ldd	r16, Z+2	; 0x02
    11d0:	13 81       	ldd	r17, Z+3	; 0x03
    11d2:	48 17       	cp	r20, r24
    11d4:	59 07       	cpc	r21, r25
    11d6:	c8 f0       	brcs	.+50     	; 0x120a <malloc+0x66>
    11d8:	84 17       	cp	r24, r20
    11da:	95 07       	cpc	r25, r21
    11dc:	69 f4       	brne	.+26     	; 0x11f8 <malloc+0x54>
    11de:	10 97       	sbiw	r26, 0x00	; 0
    11e0:	31 f0       	breq	.+12     	; 0x11ee <malloc+0x4a>
    11e2:	12 96       	adiw	r26, 0x02	; 2
    11e4:	0c 93       	st	X, r16
    11e6:	12 97       	sbiw	r26, 0x02	; 2
    11e8:	13 96       	adiw	r26, 0x03	; 3
    11ea:	1c 93       	st	X, r17
    11ec:	27 c0       	rjmp	.+78     	; 0x123c <malloc+0x98>
    11ee:	00 93 4e 02 	sts	0x024E, r16	; 0x80024e <__flp>
    11f2:	10 93 4f 02 	sts	0x024F, r17	; 0x80024f <__flp+0x1>
    11f6:	22 c0       	rjmp	.+68     	; 0x123c <malloc+0x98>
    11f8:	21 15       	cp	r18, r1
    11fa:	31 05       	cpc	r19, r1
    11fc:	19 f0       	breq	.+6      	; 0x1204 <malloc+0x60>
    11fe:	42 17       	cp	r20, r18
    1200:	53 07       	cpc	r21, r19
    1202:	18 f4       	brcc	.+6      	; 0x120a <malloc+0x66>
    1204:	9a 01       	movw	r18, r20
    1206:	bd 01       	movw	r22, r26
    1208:	ef 01       	movw	r28, r30
    120a:	df 01       	movw	r26, r30
    120c:	f8 01       	movw	r30, r16
    120e:	db cf       	rjmp	.-74     	; 0x11c6 <malloc+0x22>
    1210:	21 15       	cp	r18, r1
    1212:	31 05       	cpc	r19, r1
    1214:	f9 f0       	breq	.+62     	; 0x1254 <malloc+0xb0>
    1216:	28 1b       	sub	r18, r24
    1218:	39 0b       	sbc	r19, r25
    121a:	24 30       	cpi	r18, 0x04	; 4
    121c:	31 05       	cpc	r19, r1
    121e:	80 f4       	brcc	.+32     	; 0x1240 <malloc+0x9c>
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	9b 81       	ldd	r25, Y+3	; 0x03
    1224:	61 15       	cp	r22, r1
    1226:	71 05       	cpc	r23, r1
    1228:	21 f0       	breq	.+8      	; 0x1232 <malloc+0x8e>
    122a:	fb 01       	movw	r30, r22
    122c:	93 83       	std	Z+3, r25	; 0x03
    122e:	82 83       	std	Z+2, r24	; 0x02
    1230:	04 c0       	rjmp	.+8      	; 0x123a <malloc+0x96>
    1232:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <__flp+0x1>
    1236:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__flp>
    123a:	fe 01       	movw	r30, r28
    123c:	32 96       	adiw	r30, 0x02	; 2
    123e:	44 c0       	rjmp	.+136    	; 0x12c8 <malloc+0x124>
    1240:	fe 01       	movw	r30, r28
    1242:	e2 0f       	add	r30, r18
    1244:	f3 1f       	adc	r31, r19
    1246:	81 93       	st	Z+, r24
    1248:	91 93       	st	Z+, r25
    124a:	22 50       	subi	r18, 0x02	; 2
    124c:	31 09       	sbc	r19, r1
    124e:	39 83       	std	Y+1, r19	; 0x01
    1250:	28 83       	st	Y, r18
    1252:	3a c0       	rjmp	.+116    	; 0x12c8 <malloc+0x124>
    1254:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__data_end>
    1258:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__data_end+0x1>
    125c:	23 2b       	or	r18, r19
    125e:	41 f4       	brne	.+16     	; 0x1270 <malloc+0xcc>
    1260:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1264:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1268:	30 93 4d 02 	sts	0x024D, r19	; 0x80024d <__data_end+0x1>
    126c:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <__data_end>
    1270:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1274:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1278:	21 15       	cp	r18, r1
    127a:	31 05       	cpc	r19, r1
    127c:	41 f4       	brne	.+16     	; 0x128e <malloc+0xea>
    127e:	2d b7       	in	r18, 0x3d	; 61
    1280:	3e b7       	in	r19, 0x3e	; 62
    1282:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1286:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    128a:	24 1b       	sub	r18, r20
    128c:	35 0b       	sbc	r19, r21
    128e:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    1292:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    1296:	e2 17       	cp	r30, r18
    1298:	f3 07       	cpc	r31, r19
    129a:	a0 f4       	brcc	.+40     	; 0x12c4 <malloc+0x120>
    129c:	2e 1b       	sub	r18, r30
    129e:	3f 0b       	sbc	r19, r31
    12a0:	28 17       	cp	r18, r24
    12a2:	39 07       	cpc	r19, r25
    12a4:	78 f0       	brcs	.+30     	; 0x12c4 <malloc+0x120>
    12a6:	ac 01       	movw	r20, r24
    12a8:	4e 5f       	subi	r20, 0xFE	; 254
    12aa:	5f 4f       	sbci	r21, 0xFF	; 255
    12ac:	24 17       	cp	r18, r20
    12ae:	35 07       	cpc	r19, r21
    12b0:	48 f0       	brcs	.+18     	; 0x12c4 <malloc+0x120>
    12b2:	4e 0f       	add	r20, r30
    12b4:	5f 1f       	adc	r21, r31
    12b6:	50 93 4d 02 	sts	0x024D, r21	; 0x80024d <__data_end+0x1>
    12ba:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <__data_end>
    12be:	81 93       	st	Z+, r24
    12c0:	91 93       	st	Z+, r25
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <malloc+0x124>
    12c4:	e0 e0       	ldi	r30, 0x00	; 0
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	cf 01       	movw	r24, r30
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <free>:
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	09 f4       	brne	.+2      	; 0x12de <free+0xa>
    12dc:	81 c0       	rjmp	.+258    	; 0x13e0 <free+0x10c>
    12de:	fc 01       	movw	r30, r24
    12e0:	32 97       	sbiw	r30, 0x02	; 2
    12e2:	13 82       	std	Z+3, r1	; 0x03
    12e4:	12 82       	std	Z+2, r1	; 0x02
    12e6:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <__flp>
    12ea:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <__flp+0x1>
    12ee:	10 97       	sbiw	r26, 0x00	; 0
    12f0:	81 f4       	brne	.+32     	; 0x1312 <free+0x3e>
    12f2:	20 81       	ld	r18, Z
    12f4:	31 81       	ldd	r19, Z+1	; 0x01
    12f6:	82 0f       	add	r24, r18
    12f8:	93 1f       	adc	r25, r19
    12fa:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__data_end>
    12fe:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__data_end+0x1>
    1302:	28 17       	cp	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	51 f5       	brne	.+84     	; 0x135c <free+0x88>
    1308:	f0 93 4d 02 	sts	0x024D, r31	; 0x80024d <__data_end+0x1>
    130c:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <__data_end>
    1310:	67 c0       	rjmp	.+206    	; 0x13e0 <free+0x10c>
    1312:	ed 01       	movw	r28, r26
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	ce 17       	cp	r28, r30
    131a:	df 07       	cpc	r29, r31
    131c:	40 f4       	brcc	.+16     	; 0x132e <free+0x5a>
    131e:	4a 81       	ldd	r20, Y+2	; 0x02
    1320:	5b 81       	ldd	r21, Y+3	; 0x03
    1322:	9e 01       	movw	r18, r28
    1324:	41 15       	cp	r20, r1
    1326:	51 05       	cpc	r21, r1
    1328:	f1 f0       	breq	.+60     	; 0x1366 <free+0x92>
    132a:	ea 01       	movw	r28, r20
    132c:	f5 cf       	rjmp	.-22     	; 0x1318 <free+0x44>
    132e:	d3 83       	std	Z+3, r29	; 0x03
    1330:	c2 83       	std	Z+2, r28	; 0x02
    1332:	40 81       	ld	r20, Z
    1334:	51 81       	ldd	r21, Z+1	; 0x01
    1336:	84 0f       	add	r24, r20
    1338:	95 1f       	adc	r25, r21
    133a:	c8 17       	cp	r28, r24
    133c:	d9 07       	cpc	r29, r25
    133e:	59 f4       	brne	.+22     	; 0x1356 <free+0x82>
    1340:	88 81       	ld	r24, Y
    1342:	99 81       	ldd	r25, Y+1	; 0x01
    1344:	84 0f       	add	r24, r20
    1346:	95 1f       	adc	r25, r21
    1348:	02 96       	adiw	r24, 0x02	; 2
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	93 83       	std	Z+3, r25	; 0x03
    1354:	82 83       	std	Z+2, r24	; 0x02
    1356:	21 15       	cp	r18, r1
    1358:	31 05       	cpc	r19, r1
    135a:	29 f4       	brne	.+10     	; 0x1366 <free+0x92>
    135c:	f0 93 4f 02 	sts	0x024F, r31	; 0x80024f <__flp+0x1>
    1360:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <__flp>
    1364:	3d c0       	rjmp	.+122    	; 0x13e0 <free+0x10c>
    1366:	e9 01       	movw	r28, r18
    1368:	fb 83       	std	Y+3, r31	; 0x03
    136a:	ea 83       	std	Y+2, r30	; 0x02
    136c:	49 91       	ld	r20, Y+
    136e:	59 91       	ld	r21, Y+
    1370:	c4 0f       	add	r28, r20
    1372:	d5 1f       	adc	r29, r21
    1374:	ec 17       	cp	r30, r28
    1376:	fd 07       	cpc	r31, r29
    1378:	61 f4       	brne	.+24     	; 0x1392 <free+0xbe>
    137a:	80 81       	ld	r24, Z
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	84 0f       	add	r24, r20
    1380:	95 1f       	adc	r25, r21
    1382:	02 96       	adiw	r24, 0x02	; 2
    1384:	e9 01       	movw	r28, r18
    1386:	99 83       	std	Y+1, r25	; 0x01
    1388:	88 83       	st	Y, r24
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	9b 83       	std	Y+3, r25	; 0x03
    1390:	8a 83       	std	Y+2, r24	; 0x02
    1392:	e0 e0       	ldi	r30, 0x00	; 0
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	12 96       	adiw	r26, 0x02	; 2
    1398:	8d 91       	ld	r24, X+
    139a:	9c 91       	ld	r25, X
    139c:	13 97       	sbiw	r26, 0x03	; 3
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	19 f0       	breq	.+6      	; 0x13a8 <free+0xd4>
    13a2:	fd 01       	movw	r30, r26
    13a4:	dc 01       	movw	r26, r24
    13a6:	f7 cf       	rjmp	.-18     	; 0x1396 <free+0xc2>
    13a8:	8d 91       	ld	r24, X+
    13aa:	9c 91       	ld	r25, X
    13ac:	11 97       	sbiw	r26, 0x01	; 1
    13ae:	9d 01       	movw	r18, r26
    13b0:	2e 5f       	subi	r18, 0xFE	; 254
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	82 0f       	add	r24, r18
    13b6:	93 1f       	adc	r25, r19
    13b8:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__data_end>
    13bc:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__data_end+0x1>
    13c0:	28 17       	cp	r18, r24
    13c2:	39 07       	cpc	r19, r25
    13c4:	69 f4       	brne	.+26     	; 0x13e0 <free+0x10c>
    13c6:	30 97       	sbiw	r30, 0x00	; 0
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <free+0x100>
    13ca:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <__flp+0x1>
    13ce:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__flp>
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <free+0x104>
    13d4:	13 82       	std	Z+3, r1	; 0x03
    13d6:	12 82       	std	Z+2, r1	; 0x02
    13d8:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <__data_end+0x1>
    13dc:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <__data_end>
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <memset>:
    13e6:	dc 01       	movw	r26, r24
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <memset+0x6>
    13ea:	6d 93       	st	X+, r22
    13ec:	41 50       	subi	r20, 0x01	; 1
    13ee:	50 40       	sbci	r21, 0x00	; 0
    13f0:	e0 f7       	brcc	.-8      	; 0x13ea <memset+0x4>
    13f2:	08 95       	ret

000013f4 <sprintf>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	2e 97       	sbiw	r28, 0x0e	; 14
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	0e 89       	ldd	r16, Y+22	; 0x16
    140e:	1f 89       	ldd	r17, Y+23	; 0x17
    1410:	86 e0       	ldi	r24, 0x06	; 6
    1412:	8c 83       	std	Y+4, r24	; 0x04
    1414:	1a 83       	std	Y+2, r17	; 0x02
    1416:	09 83       	std	Y+1, r16	; 0x01
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	9f e7       	ldi	r25, 0x7F	; 127
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	8d 83       	std	Y+5, r24	; 0x05
    1420:	ae 01       	movw	r20, r28
    1422:	46 5e       	subi	r20, 0xE6	; 230
    1424:	5f 4f       	sbci	r21, 0xFF	; 255
    1426:	68 8d       	ldd	r22, Y+24	; 0x18
    1428:	79 8d       	ldd	r23, Y+25	; 0x19
    142a:	ce 01       	movw	r24, r28
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	10 d0       	rcall	.+32     	; 0x1450 <vfprintf>
    1430:	ef 81       	ldd	r30, Y+7	; 0x07
    1432:	f8 85       	ldd	r31, Y+8	; 0x08
    1434:	e0 0f       	add	r30, r16
    1436:	f1 1f       	adc	r31, r17
    1438:	10 82       	st	Z, r1
    143a:	2e 96       	adiw	r28, 0x0e	; 14
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <vfprintf>:
    1450:	2f 92       	push	r2
    1452:	3f 92       	push	r3
    1454:	4f 92       	push	r4
    1456:	5f 92       	push	r5
    1458:	6f 92       	push	r6
    145a:	7f 92       	push	r7
    145c:	8f 92       	push	r8
    145e:	9f 92       	push	r9
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	2b 97       	sbiw	r28, 0x0b	; 11
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	6c 01       	movw	r12, r24
    1486:	7b 01       	movw	r14, r22
    1488:	8a 01       	movw	r16, r20
    148a:	fc 01       	movw	r30, r24
    148c:	17 82       	std	Z+7, r1	; 0x07
    148e:	16 82       	std	Z+6, r1	; 0x06
    1490:	83 81       	ldd	r24, Z+3	; 0x03
    1492:	81 ff       	sbrs	r24, 1
    1494:	bf c1       	rjmp	.+894    	; 0x1814 <vfprintf+0x3c4>
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	3c 01       	movw	r6, r24
    149c:	f6 01       	movw	r30, r12
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	f7 01       	movw	r30, r14
    14a2:	93 fd       	sbrc	r25, 3
    14a4:	85 91       	lpm	r24, Z+
    14a6:	93 ff       	sbrs	r25, 3
    14a8:	81 91       	ld	r24, Z+
    14aa:	7f 01       	movw	r14, r30
    14ac:	88 23       	and	r24, r24
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <vfprintf+0x62>
    14b0:	ad c1       	rjmp	.+858    	; 0x180c <vfprintf+0x3bc>
    14b2:	85 32       	cpi	r24, 0x25	; 37
    14b4:	39 f4       	brne	.+14     	; 0x14c4 <vfprintf+0x74>
    14b6:	93 fd       	sbrc	r25, 3
    14b8:	85 91       	lpm	r24, Z+
    14ba:	93 ff       	sbrs	r25, 3
    14bc:	81 91       	ld	r24, Z+
    14be:	7f 01       	movw	r14, r30
    14c0:	85 32       	cpi	r24, 0x25	; 37
    14c2:	21 f4       	brne	.+8      	; 0x14cc <vfprintf+0x7c>
    14c4:	b6 01       	movw	r22, r12
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	d6 d1       	rcall	.+940    	; 0x1876 <fputc>
    14ca:	e8 cf       	rjmp	.-48     	; 0x149c <vfprintf+0x4c>
    14cc:	91 2c       	mov	r9, r1
    14ce:	21 2c       	mov	r2, r1
    14d0:	31 2c       	mov	r3, r1
    14d2:	ff e1       	ldi	r31, 0x1F	; 31
    14d4:	f3 15       	cp	r31, r3
    14d6:	d8 f0       	brcs	.+54     	; 0x150e <vfprintf+0xbe>
    14d8:	8b 32       	cpi	r24, 0x2B	; 43
    14da:	79 f0       	breq	.+30     	; 0x14fa <vfprintf+0xaa>
    14dc:	38 f4       	brcc	.+14     	; 0x14ec <vfprintf+0x9c>
    14de:	80 32       	cpi	r24, 0x20	; 32
    14e0:	79 f0       	breq	.+30     	; 0x1500 <vfprintf+0xb0>
    14e2:	83 32       	cpi	r24, 0x23	; 35
    14e4:	a1 f4       	brne	.+40     	; 0x150e <vfprintf+0xbe>
    14e6:	23 2d       	mov	r18, r3
    14e8:	20 61       	ori	r18, 0x10	; 16
    14ea:	1d c0       	rjmp	.+58     	; 0x1526 <vfprintf+0xd6>
    14ec:	8d 32       	cpi	r24, 0x2D	; 45
    14ee:	61 f0       	breq	.+24     	; 0x1508 <vfprintf+0xb8>
    14f0:	80 33       	cpi	r24, 0x30	; 48
    14f2:	69 f4       	brne	.+26     	; 0x150e <vfprintf+0xbe>
    14f4:	23 2d       	mov	r18, r3
    14f6:	21 60       	ori	r18, 0x01	; 1
    14f8:	16 c0       	rjmp	.+44     	; 0x1526 <vfprintf+0xd6>
    14fa:	83 2d       	mov	r24, r3
    14fc:	82 60       	ori	r24, 0x02	; 2
    14fe:	38 2e       	mov	r3, r24
    1500:	e3 2d       	mov	r30, r3
    1502:	e4 60       	ori	r30, 0x04	; 4
    1504:	3e 2e       	mov	r3, r30
    1506:	2a c0       	rjmp	.+84     	; 0x155c <vfprintf+0x10c>
    1508:	f3 2d       	mov	r31, r3
    150a:	f8 60       	ori	r31, 0x08	; 8
    150c:	1d c0       	rjmp	.+58     	; 0x1548 <vfprintf+0xf8>
    150e:	37 fc       	sbrc	r3, 7
    1510:	2d c0       	rjmp	.+90     	; 0x156c <vfprintf+0x11c>
    1512:	20 ed       	ldi	r18, 0xD0	; 208
    1514:	28 0f       	add	r18, r24
    1516:	2a 30       	cpi	r18, 0x0A	; 10
    1518:	40 f0       	brcs	.+16     	; 0x152a <vfprintf+0xda>
    151a:	8e 32       	cpi	r24, 0x2E	; 46
    151c:	b9 f4       	brne	.+46     	; 0x154c <vfprintf+0xfc>
    151e:	36 fc       	sbrc	r3, 6
    1520:	75 c1       	rjmp	.+746    	; 0x180c <vfprintf+0x3bc>
    1522:	23 2d       	mov	r18, r3
    1524:	20 64       	ori	r18, 0x40	; 64
    1526:	32 2e       	mov	r3, r18
    1528:	19 c0       	rjmp	.+50     	; 0x155c <vfprintf+0x10c>
    152a:	36 fe       	sbrs	r3, 6
    152c:	06 c0       	rjmp	.+12     	; 0x153a <vfprintf+0xea>
    152e:	8a e0       	ldi	r24, 0x0A	; 10
    1530:	98 9e       	mul	r9, r24
    1532:	20 0d       	add	r18, r0
    1534:	11 24       	eor	r1, r1
    1536:	92 2e       	mov	r9, r18
    1538:	11 c0       	rjmp	.+34     	; 0x155c <vfprintf+0x10c>
    153a:	ea e0       	ldi	r30, 0x0A	; 10
    153c:	2e 9e       	mul	r2, r30
    153e:	20 0d       	add	r18, r0
    1540:	11 24       	eor	r1, r1
    1542:	22 2e       	mov	r2, r18
    1544:	f3 2d       	mov	r31, r3
    1546:	f0 62       	ori	r31, 0x20	; 32
    1548:	3f 2e       	mov	r3, r31
    154a:	08 c0       	rjmp	.+16     	; 0x155c <vfprintf+0x10c>
    154c:	8c 36       	cpi	r24, 0x6C	; 108
    154e:	21 f4       	brne	.+8      	; 0x1558 <vfprintf+0x108>
    1550:	83 2d       	mov	r24, r3
    1552:	80 68       	ori	r24, 0x80	; 128
    1554:	38 2e       	mov	r3, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x10c>
    1558:	88 36       	cpi	r24, 0x68	; 104
    155a:	41 f4       	brne	.+16     	; 0x156c <vfprintf+0x11c>
    155c:	f7 01       	movw	r30, r14
    155e:	93 fd       	sbrc	r25, 3
    1560:	85 91       	lpm	r24, Z+
    1562:	93 ff       	sbrs	r25, 3
    1564:	81 91       	ld	r24, Z+
    1566:	7f 01       	movw	r14, r30
    1568:	81 11       	cpse	r24, r1
    156a:	b3 cf       	rjmp	.-154    	; 0x14d2 <vfprintf+0x82>
    156c:	98 2f       	mov	r25, r24
    156e:	9f 7d       	andi	r25, 0xDF	; 223
    1570:	95 54       	subi	r25, 0x45	; 69
    1572:	93 30       	cpi	r25, 0x03	; 3
    1574:	28 f4       	brcc	.+10     	; 0x1580 <vfprintf+0x130>
    1576:	0c 5f       	subi	r16, 0xFC	; 252
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	9f e3       	ldi	r25, 0x3F	; 63
    157c:	99 83       	std	Y+1, r25	; 0x01
    157e:	0d c0       	rjmp	.+26     	; 0x159a <vfprintf+0x14a>
    1580:	83 36       	cpi	r24, 0x63	; 99
    1582:	31 f0       	breq	.+12     	; 0x1590 <vfprintf+0x140>
    1584:	83 37       	cpi	r24, 0x73	; 115
    1586:	71 f0       	breq	.+28     	; 0x15a4 <vfprintf+0x154>
    1588:	83 35       	cpi	r24, 0x53	; 83
    158a:	09 f0       	breq	.+2      	; 0x158e <vfprintf+0x13e>
    158c:	55 c0       	rjmp	.+170    	; 0x1638 <vfprintf+0x1e8>
    158e:	20 c0       	rjmp	.+64     	; 0x15d0 <vfprintf+0x180>
    1590:	f8 01       	movw	r30, r16
    1592:	80 81       	ld	r24, Z
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	0e 5f       	subi	r16, 0xFE	; 254
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
    159a:	88 24       	eor	r8, r8
    159c:	83 94       	inc	r8
    159e:	91 2c       	mov	r9, r1
    15a0:	53 01       	movw	r10, r6
    15a2:	12 c0       	rjmp	.+36     	; 0x15c8 <vfprintf+0x178>
    15a4:	28 01       	movw	r4, r16
    15a6:	f2 e0       	ldi	r31, 0x02	; 2
    15a8:	4f 0e       	add	r4, r31
    15aa:	51 1c       	adc	r5, r1
    15ac:	f8 01       	movw	r30, r16
    15ae:	a0 80       	ld	r10, Z
    15b0:	b1 80       	ldd	r11, Z+1	; 0x01
    15b2:	36 fe       	sbrs	r3, 6
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <vfprintf+0x16c>
    15b6:	69 2d       	mov	r22, r9
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <vfprintf+0x170>
    15bc:	6f ef       	ldi	r22, 0xFF	; 255
    15be:	7f ef       	ldi	r23, 0xFF	; 255
    15c0:	c5 01       	movw	r24, r10
    15c2:	4e d1       	rcall	.+668    	; 0x1860 <strnlen>
    15c4:	4c 01       	movw	r8, r24
    15c6:	82 01       	movw	r16, r4
    15c8:	f3 2d       	mov	r31, r3
    15ca:	ff 77       	andi	r31, 0x7F	; 127
    15cc:	3f 2e       	mov	r3, r31
    15ce:	15 c0       	rjmp	.+42     	; 0x15fa <vfprintf+0x1aa>
    15d0:	28 01       	movw	r4, r16
    15d2:	22 e0       	ldi	r18, 0x02	; 2
    15d4:	42 0e       	add	r4, r18
    15d6:	51 1c       	adc	r5, r1
    15d8:	f8 01       	movw	r30, r16
    15da:	a0 80       	ld	r10, Z
    15dc:	b1 80       	ldd	r11, Z+1	; 0x01
    15de:	36 fe       	sbrs	r3, 6
    15e0:	03 c0       	rjmp	.+6      	; 0x15e8 <vfprintf+0x198>
    15e2:	69 2d       	mov	r22, r9
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <vfprintf+0x19c>
    15e8:	6f ef       	ldi	r22, 0xFF	; 255
    15ea:	7f ef       	ldi	r23, 0xFF	; 255
    15ec:	c5 01       	movw	r24, r10
    15ee:	2d d1       	rcall	.+602    	; 0x184a <strnlen_P>
    15f0:	4c 01       	movw	r8, r24
    15f2:	f3 2d       	mov	r31, r3
    15f4:	f0 68       	ori	r31, 0x80	; 128
    15f6:	3f 2e       	mov	r3, r31
    15f8:	82 01       	movw	r16, r4
    15fa:	33 fc       	sbrc	r3, 3
    15fc:	19 c0       	rjmp	.+50     	; 0x1630 <vfprintf+0x1e0>
    15fe:	82 2d       	mov	r24, r2
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	88 16       	cp	r8, r24
    1604:	99 06       	cpc	r9, r25
    1606:	a0 f4       	brcc	.+40     	; 0x1630 <vfprintf+0x1e0>
    1608:	b6 01       	movw	r22, r12
    160a:	80 e2       	ldi	r24, 0x20	; 32
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	33 d1       	rcall	.+614    	; 0x1876 <fputc>
    1610:	2a 94       	dec	r2
    1612:	f5 cf       	rjmp	.-22     	; 0x15fe <vfprintf+0x1ae>
    1614:	f5 01       	movw	r30, r10
    1616:	37 fc       	sbrc	r3, 7
    1618:	85 91       	lpm	r24, Z+
    161a:	37 fe       	sbrs	r3, 7
    161c:	81 91       	ld	r24, Z+
    161e:	5f 01       	movw	r10, r30
    1620:	b6 01       	movw	r22, r12
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	28 d1       	rcall	.+592    	; 0x1876 <fputc>
    1626:	21 10       	cpse	r2, r1
    1628:	2a 94       	dec	r2
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	82 1a       	sub	r8, r18
    162e:	91 08       	sbc	r9, r1
    1630:	81 14       	cp	r8, r1
    1632:	91 04       	cpc	r9, r1
    1634:	79 f7       	brne	.-34     	; 0x1614 <vfprintf+0x1c4>
    1636:	e1 c0       	rjmp	.+450    	; 0x17fa <vfprintf+0x3aa>
    1638:	84 36       	cpi	r24, 0x64	; 100
    163a:	11 f0       	breq	.+4      	; 0x1640 <vfprintf+0x1f0>
    163c:	89 36       	cpi	r24, 0x69	; 105
    163e:	39 f5       	brne	.+78     	; 0x168e <vfprintf+0x23e>
    1640:	f8 01       	movw	r30, r16
    1642:	37 fe       	sbrs	r3, 7
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <vfprintf+0x204>
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	0c 5f       	subi	r16, 0xFC	; 252
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <vfprintf+0x214>
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	07 2e       	mov	r0, r23
    165a:	00 0c       	add	r0, r0
    165c:	88 0b       	sbc	r24, r24
    165e:	99 0b       	sbc	r25, r25
    1660:	0e 5f       	subi	r16, 0xFE	; 254
    1662:	1f 4f       	sbci	r17, 0xFF	; 255
    1664:	f3 2d       	mov	r31, r3
    1666:	ff 76       	andi	r31, 0x6F	; 111
    1668:	3f 2e       	mov	r3, r31
    166a:	97 ff       	sbrs	r25, 7
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <vfprintf+0x230>
    166e:	90 95       	com	r25
    1670:	80 95       	com	r24
    1672:	70 95       	com	r23
    1674:	61 95       	neg	r22
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	8f 4f       	sbci	r24, 0xFF	; 255
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	f0 68       	ori	r31, 0x80	; 128
    167e:	3f 2e       	mov	r3, r31
    1680:	2a e0       	ldi	r18, 0x0A	; 10
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	a3 01       	movw	r20, r6
    1686:	33 d1       	rcall	.+614    	; 0x18ee <__ultoa_invert>
    1688:	88 2e       	mov	r8, r24
    168a:	86 18       	sub	r8, r6
    168c:	44 c0       	rjmp	.+136    	; 0x1716 <vfprintf+0x2c6>
    168e:	85 37       	cpi	r24, 0x75	; 117
    1690:	31 f4       	brne	.+12     	; 0x169e <vfprintf+0x24e>
    1692:	23 2d       	mov	r18, r3
    1694:	2f 7e       	andi	r18, 0xEF	; 239
    1696:	b2 2e       	mov	r11, r18
    1698:	2a e0       	ldi	r18, 0x0A	; 10
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	25 c0       	rjmp	.+74     	; 0x16e8 <vfprintf+0x298>
    169e:	93 2d       	mov	r25, r3
    16a0:	99 7f       	andi	r25, 0xF9	; 249
    16a2:	b9 2e       	mov	r11, r25
    16a4:	8f 36       	cpi	r24, 0x6F	; 111
    16a6:	c1 f0       	breq	.+48     	; 0x16d8 <vfprintf+0x288>
    16a8:	18 f4       	brcc	.+6      	; 0x16b0 <vfprintf+0x260>
    16aa:	88 35       	cpi	r24, 0x58	; 88
    16ac:	79 f0       	breq	.+30     	; 0x16cc <vfprintf+0x27c>
    16ae:	ae c0       	rjmp	.+348    	; 0x180c <vfprintf+0x3bc>
    16b0:	80 37       	cpi	r24, 0x70	; 112
    16b2:	19 f0       	breq	.+6      	; 0x16ba <vfprintf+0x26a>
    16b4:	88 37       	cpi	r24, 0x78	; 120
    16b6:	21 f0       	breq	.+8      	; 0x16c0 <vfprintf+0x270>
    16b8:	a9 c0       	rjmp	.+338    	; 0x180c <vfprintf+0x3bc>
    16ba:	e9 2f       	mov	r30, r25
    16bc:	e0 61       	ori	r30, 0x10	; 16
    16be:	be 2e       	mov	r11, r30
    16c0:	b4 fe       	sbrs	r11, 4
    16c2:	0d c0       	rjmp	.+26     	; 0x16de <vfprintf+0x28e>
    16c4:	fb 2d       	mov	r31, r11
    16c6:	f4 60       	ori	r31, 0x04	; 4
    16c8:	bf 2e       	mov	r11, r31
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <vfprintf+0x28e>
    16cc:	34 fe       	sbrs	r3, 4
    16ce:	0a c0       	rjmp	.+20     	; 0x16e4 <vfprintf+0x294>
    16d0:	29 2f       	mov	r18, r25
    16d2:	26 60       	ori	r18, 0x06	; 6
    16d4:	b2 2e       	mov	r11, r18
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x294>
    16d8:	28 e0       	ldi	r18, 0x08	; 8
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <vfprintf+0x298>
    16de:	20 e1       	ldi	r18, 0x10	; 16
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0x298>
    16e4:	20 e1       	ldi	r18, 0x10	; 16
    16e6:	32 e0       	ldi	r19, 0x02	; 2
    16e8:	f8 01       	movw	r30, r16
    16ea:	b7 fe       	sbrs	r11, 7
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <vfprintf+0x2ac>
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	82 81       	ldd	r24, Z+2	; 0x02
    16f4:	93 81       	ldd	r25, Z+3	; 0x03
    16f6:	0c 5f       	subi	r16, 0xFC	; 252
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <vfprintf+0x2b8>
    16fc:	60 81       	ld	r22, Z
    16fe:	71 81       	ldd	r23, Z+1	; 0x01
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 5f       	subi	r16, 0xFE	; 254
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	a3 01       	movw	r20, r6
    170a:	f1 d0       	rcall	.+482    	; 0x18ee <__ultoa_invert>
    170c:	88 2e       	mov	r8, r24
    170e:	86 18       	sub	r8, r6
    1710:	fb 2d       	mov	r31, r11
    1712:	ff 77       	andi	r31, 0x7F	; 127
    1714:	3f 2e       	mov	r3, r31
    1716:	36 fe       	sbrs	r3, 6
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <vfprintf+0x2e4>
    171a:	23 2d       	mov	r18, r3
    171c:	2e 7f       	andi	r18, 0xFE	; 254
    171e:	a2 2e       	mov	r10, r18
    1720:	89 14       	cp	r8, r9
    1722:	58 f4       	brcc	.+22     	; 0x173a <vfprintf+0x2ea>
    1724:	34 fe       	sbrs	r3, 4
    1726:	0b c0       	rjmp	.+22     	; 0x173e <vfprintf+0x2ee>
    1728:	32 fc       	sbrc	r3, 2
    172a:	09 c0       	rjmp	.+18     	; 0x173e <vfprintf+0x2ee>
    172c:	83 2d       	mov	r24, r3
    172e:	8e 7e       	andi	r24, 0xEE	; 238
    1730:	a8 2e       	mov	r10, r24
    1732:	05 c0       	rjmp	.+10     	; 0x173e <vfprintf+0x2ee>
    1734:	b8 2c       	mov	r11, r8
    1736:	a3 2c       	mov	r10, r3
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <vfprintf+0x2f0>
    173a:	b8 2c       	mov	r11, r8
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <vfprintf+0x2f0>
    173e:	b9 2c       	mov	r11, r9
    1740:	a4 fe       	sbrs	r10, 4
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <vfprintf+0x312>
    1744:	fe 01       	movw	r30, r28
    1746:	e8 0d       	add	r30, r8
    1748:	f1 1d       	adc	r31, r1
    174a:	80 81       	ld	r24, Z
    174c:	80 33       	cpi	r24, 0x30	; 48
    174e:	21 f4       	brne	.+8      	; 0x1758 <vfprintf+0x308>
    1750:	9a 2d       	mov	r25, r10
    1752:	99 7e       	andi	r25, 0xE9	; 233
    1754:	a9 2e       	mov	r10, r25
    1756:	09 c0       	rjmp	.+18     	; 0x176a <vfprintf+0x31a>
    1758:	a2 fe       	sbrs	r10, 2
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <vfprintf+0x318>
    175c:	b3 94       	inc	r11
    175e:	b3 94       	inc	r11
    1760:	04 c0       	rjmp	.+8      	; 0x176a <vfprintf+0x31a>
    1762:	8a 2d       	mov	r24, r10
    1764:	86 78       	andi	r24, 0x86	; 134
    1766:	09 f0       	breq	.+2      	; 0x176a <vfprintf+0x31a>
    1768:	b3 94       	inc	r11
    176a:	a3 fc       	sbrc	r10, 3
    176c:	10 c0       	rjmp	.+32     	; 0x178e <vfprintf+0x33e>
    176e:	a0 fe       	sbrs	r10, 0
    1770:	06 c0       	rjmp	.+12     	; 0x177e <vfprintf+0x32e>
    1772:	b2 14       	cp	r11, r2
    1774:	80 f4       	brcc	.+32     	; 0x1796 <vfprintf+0x346>
    1776:	28 0c       	add	r2, r8
    1778:	92 2c       	mov	r9, r2
    177a:	9b 18       	sub	r9, r11
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <vfprintf+0x348>
    177e:	b2 14       	cp	r11, r2
    1780:	58 f4       	brcc	.+22     	; 0x1798 <vfprintf+0x348>
    1782:	b6 01       	movw	r22, r12
    1784:	80 e2       	ldi	r24, 0x20	; 32
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	76 d0       	rcall	.+236    	; 0x1876 <fputc>
    178a:	b3 94       	inc	r11
    178c:	f8 cf       	rjmp	.-16     	; 0x177e <vfprintf+0x32e>
    178e:	b2 14       	cp	r11, r2
    1790:	18 f4       	brcc	.+6      	; 0x1798 <vfprintf+0x348>
    1792:	2b 18       	sub	r2, r11
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x34a>
    1796:	98 2c       	mov	r9, r8
    1798:	21 2c       	mov	r2, r1
    179a:	a4 fe       	sbrs	r10, 4
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <vfprintf+0x36c>
    179e:	b6 01       	movw	r22, r12
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	68 d0       	rcall	.+208    	; 0x1876 <fputc>
    17a6:	a2 fe       	sbrs	r10, 2
    17a8:	16 c0       	rjmp	.+44     	; 0x17d6 <vfprintf+0x386>
    17aa:	a1 fc       	sbrc	r10, 1
    17ac:	03 c0       	rjmp	.+6      	; 0x17b4 <vfprintf+0x364>
    17ae:	88 e7       	ldi	r24, 0x78	; 120
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x368>
    17b4:	88 e5       	ldi	r24, 0x58	; 88
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	b6 01       	movw	r22, r12
    17ba:	0c c0       	rjmp	.+24     	; 0x17d4 <vfprintf+0x384>
    17bc:	8a 2d       	mov	r24, r10
    17be:	86 78       	andi	r24, 0x86	; 134
    17c0:	51 f0       	breq	.+20     	; 0x17d6 <vfprintf+0x386>
    17c2:	a1 fe       	sbrs	r10, 1
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <vfprintf+0x37a>
    17c6:	8b e2       	ldi	r24, 0x2B	; 43
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <vfprintf+0x37c>
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	a7 fc       	sbrc	r10, 7
    17ce:	8d e2       	ldi	r24, 0x2D	; 45
    17d0:	b6 01       	movw	r22, r12
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	50 d0       	rcall	.+160    	; 0x1876 <fputc>
    17d6:	89 14       	cp	r8, r9
    17d8:	30 f4       	brcc	.+12     	; 0x17e6 <vfprintf+0x396>
    17da:	b6 01       	movw	r22, r12
    17dc:	80 e3       	ldi	r24, 0x30	; 48
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	4a d0       	rcall	.+148    	; 0x1876 <fputc>
    17e2:	9a 94       	dec	r9
    17e4:	f8 cf       	rjmp	.-16     	; 0x17d6 <vfprintf+0x386>
    17e6:	8a 94       	dec	r8
    17e8:	f3 01       	movw	r30, r6
    17ea:	e8 0d       	add	r30, r8
    17ec:	f1 1d       	adc	r31, r1
    17ee:	80 81       	ld	r24, Z
    17f0:	b6 01       	movw	r22, r12
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	40 d0       	rcall	.+128    	; 0x1876 <fputc>
    17f6:	81 10       	cpse	r8, r1
    17f8:	f6 cf       	rjmp	.-20     	; 0x17e6 <vfprintf+0x396>
    17fa:	22 20       	and	r2, r2
    17fc:	09 f4       	brne	.+2      	; 0x1800 <vfprintf+0x3b0>
    17fe:	4e ce       	rjmp	.-868    	; 0x149c <vfprintf+0x4c>
    1800:	b6 01       	movw	r22, r12
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	37 d0       	rcall	.+110    	; 0x1876 <fputc>
    1808:	2a 94       	dec	r2
    180a:	f7 cf       	rjmp	.-18     	; 0x17fa <vfprintf+0x3aa>
    180c:	f6 01       	movw	r30, r12
    180e:	86 81       	ldd	r24, Z+6	; 0x06
    1810:	97 81       	ldd	r25, Z+7	; 0x07
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x3c8>
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	9f ef       	ldi	r25, 0xFF	; 255
    1818:	2b 96       	adiw	r28, 0x0b	; 11
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	9f 90       	pop	r9
    183a:	8f 90       	pop	r8
    183c:	7f 90       	pop	r7
    183e:	6f 90       	pop	r6
    1840:	5f 90       	pop	r5
    1842:	4f 90       	pop	r4
    1844:	3f 90       	pop	r3
    1846:	2f 90       	pop	r2
    1848:	08 95       	ret

0000184a <strnlen_P>:
    184a:	fc 01       	movw	r30, r24
    184c:	05 90       	lpm	r0, Z+
    184e:	61 50       	subi	r22, 0x01	; 1
    1850:	70 40       	sbci	r23, 0x00	; 0
    1852:	01 10       	cpse	r0, r1
    1854:	d8 f7       	brcc	.-10     	; 0x184c <strnlen_P+0x2>
    1856:	80 95       	com	r24
    1858:	90 95       	com	r25
    185a:	8e 0f       	add	r24, r30
    185c:	9f 1f       	adc	r25, r31
    185e:	08 95       	ret

00001860 <strnlen>:
    1860:	fc 01       	movw	r30, r24
    1862:	61 50       	subi	r22, 0x01	; 1
    1864:	70 40       	sbci	r23, 0x00	; 0
    1866:	01 90       	ld	r0, Z+
    1868:	01 10       	cpse	r0, r1
    186a:	d8 f7       	brcc	.-10     	; 0x1862 <strnlen+0x2>
    186c:	80 95       	com	r24
    186e:	90 95       	com	r25
    1870:	8e 0f       	add	r24, r30
    1872:	9f 1f       	adc	r25, r31
    1874:	08 95       	ret

00001876 <fputc>:
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	fb 01       	movw	r30, r22
    1880:	23 81       	ldd	r18, Z+3	; 0x03
    1882:	21 fd       	sbrc	r18, 1
    1884:	03 c0       	rjmp	.+6      	; 0x188c <fputc+0x16>
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	9f ef       	ldi	r25, 0xFF	; 255
    188a:	2c c0       	rjmp	.+88     	; 0x18e4 <fputc+0x6e>
    188c:	22 ff       	sbrs	r18, 2
    188e:	16 c0       	rjmp	.+44     	; 0x18bc <fputc+0x46>
    1890:	46 81       	ldd	r20, Z+6	; 0x06
    1892:	57 81       	ldd	r21, Z+7	; 0x07
    1894:	24 81       	ldd	r18, Z+4	; 0x04
    1896:	35 81       	ldd	r19, Z+5	; 0x05
    1898:	42 17       	cp	r20, r18
    189a:	53 07       	cpc	r21, r19
    189c:	44 f4       	brge	.+16     	; 0x18ae <fputc+0x38>
    189e:	a0 81       	ld	r26, Z
    18a0:	b1 81       	ldd	r27, Z+1	; 0x01
    18a2:	9d 01       	movw	r18, r26
    18a4:	2f 5f       	subi	r18, 0xFF	; 255
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	31 83       	std	Z+1, r19	; 0x01
    18aa:	20 83       	st	Z, r18
    18ac:	8c 93       	st	X, r24
    18ae:	26 81       	ldd	r18, Z+6	; 0x06
    18b0:	37 81       	ldd	r19, Z+7	; 0x07
    18b2:	2f 5f       	subi	r18, 0xFF	; 255
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
    18b6:	37 83       	std	Z+7, r19	; 0x07
    18b8:	26 83       	std	Z+6, r18	; 0x06
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <fputc+0x6e>
    18bc:	8b 01       	movw	r16, r22
    18be:	ec 01       	movw	r28, r24
    18c0:	fb 01       	movw	r30, r22
    18c2:	00 84       	ldd	r0, Z+8	; 0x08
    18c4:	f1 85       	ldd	r31, Z+9	; 0x09
    18c6:	e0 2d       	mov	r30, r0
    18c8:	19 95       	eicall
    18ca:	89 2b       	or	r24, r25
    18cc:	e1 f6       	brne	.-72     	; 0x1886 <fputc+0x10>
    18ce:	d8 01       	movw	r26, r16
    18d0:	16 96       	adiw	r26, 0x06	; 6
    18d2:	8d 91       	ld	r24, X+
    18d4:	9c 91       	ld	r25, X
    18d6:	17 97       	sbiw	r26, 0x07	; 7
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	17 96       	adiw	r26, 0x07	; 7
    18dc:	9c 93       	st	X, r25
    18de:	8e 93       	st	-X, r24
    18e0:	16 97       	sbiw	r26, 0x06	; 6
    18e2:	ce 01       	movw	r24, r28
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	08 95       	ret

000018ee <__ultoa_invert>:
    18ee:	fa 01       	movw	r30, r20
    18f0:	aa 27       	eor	r26, r26
    18f2:	28 30       	cpi	r18, 0x08	; 8
    18f4:	51 f1       	breq	.+84     	; 0x194a <__ultoa_invert+0x5c>
    18f6:	20 31       	cpi	r18, 0x10	; 16
    18f8:	81 f1       	breq	.+96     	; 0x195a <__ultoa_invert+0x6c>
    18fa:	e8 94       	clt
    18fc:	6f 93       	push	r22
    18fe:	6e 7f       	andi	r22, 0xFE	; 254
    1900:	6e 5f       	subi	r22, 0xFE	; 254
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	af 4f       	sbci	r26, 0xFF	; 255
    190a:	b1 e0       	ldi	r27, 0x01	; 1
    190c:	3e d0       	rcall	.+124    	; 0x198a <__ultoa_invert+0x9c>
    190e:	b4 e0       	ldi	r27, 0x04	; 4
    1910:	3c d0       	rcall	.+120    	; 0x198a <__ultoa_invert+0x9c>
    1912:	67 0f       	add	r22, r23
    1914:	78 1f       	adc	r23, r24
    1916:	89 1f       	adc	r24, r25
    1918:	9a 1f       	adc	r25, r26
    191a:	a1 1d       	adc	r26, r1
    191c:	68 0f       	add	r22, r24
    191e:	79 1f       	adc	r23, r25
    1920:	8a 1f       	adc	r24, r26
    1922:	91 1d       	adc	r25, r1
    1924:	a1 1d       	adc	r26, r1
    1926:	6a 0f       	add	r22, r26
    1928:	71 1d       	adc	r23, r1
    192a:	81 1d       	adc	r24, r1
    192c:	91 1d       	adc	r25, r1
    192e:	a1 1d       	adc	r26, r1
    1930:	20 d0       	rcall	.+64     	; 0x1972 <__ultoa_invert+0x84>
    1932:	09 f4       	brne	.+2      	; 0x1936 <__ultoa_invert+0x48>
    1934:	68 94       	set
    1936:	3f 91       	pop	r19
    1938:	2a e0       	ldi	r18, 0x0A	; 10
    193a:	26 9f       	mul	r18, r22
    193c:	11 24       	eor	r1, r1
    193e:	30 19       	sub	r19, r0
    1940:	30 5d       	subi	r19, 0xD0	; 208
    1942:	31 93       	st	Z+, r19
    1944:	de f6       	brtc	.-74     	; 0x18fc <__ultoa_invert+0xe>
    1946:	cf 01       	movw	r24, r30
    1948:	08 95       	ret
    194a:	46 2f       	mov	r20, r22
    194c:	47 70       	andi	r20, 0x07	; 7
    194e:	40 5d       	subi	r20, 0xD0	; 208
    1950:	41 93       	st	Z+, r20
    1952:	b3 e0       	ldi	r27, 0x03	; 3
    1954:	0f d0       	rcall	.+30     	; 0x1974 <__ultoa_invert+0x86>
    1956:	c9 f7       	brne	.-14     	; 0x194a <__ultoa_invert+0x5c>
    1958:	f6 cf       	rjmp	.-20     	; 0x1946 <__ultoa_invert+0x58>
    195a:	46 2f       	mov	r20, r22
    195c:	4f 70       	andi	r20, 0x0F	; 15
    195e:	40 5d       	subi	r20, 0xD0	; 208
    1960:	4a 33       	cpi	r20, 0x3A	; 58
    1962:	18 f0       	brcs	.+6      	; 0x196a <__ultoa_invert+0x7c>
    1964:	49 5d       	subi	r20, 0xD9	; 217
    1966:	31 fd       	sbrc	r19, 1
    1968:	40 52       	subi	r20, 0x20	; 32
    196a:	41 93       	st	Z+, r20
    196c:	02 d0       	rcall	.+4      	; 0x1972 <__ultoa_invert+0x84>
    196e:	a9 f7       	brne	.-22     	; 0x195a <__ultoa_invert+0x6c>
    1970:	ea cf       	rjmp	.-44     	; 0x1946 <__ultoa_invert+0x58>
    1972:	b4 e0       	ldi	r27, 0x04	; 4
    1974:	a6 95       	lsr	r26
    1976:	97 95       	ror	r25
    1978:	87 95       	ror	r24
    197a:	77 95       	ror	r23
    197c:	67 95       	ror	r22
    197e:	ba 95       	dec	r27
    1980:	c9 f7       	brne	.-14     	; 0x1974 <__ultoa_invert+0x86>
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	61 05       	cpc	r22, r1
    1986:	71 05       	cpc	r23, r1
    1988:	08 95       	ret
    198a:	9b 01       	movw	r18, r22
    198c:	ac 01       	movw	r20, r24
    198e:	0a 2e       	mov	r0, r26
    1990:	06 94       	lsr	r0
    1992:	57 95       	ror	r21
    1994:	47 95       	ror	r20
    1996:	37 95       	ror	r19
    1998:	27 95       	ror	r18
    199a:	ba 95       	dec	r27
    199c:	c9 f7       	brne	.-14     	; 0x1990 <__ultoa_invert+0xa2>
    199e:	62 0f       	add	r22, r18
    19a0:	73 1f       	adc	r23, r19
    19a2:	84 1f       	adc	r24, r20
    19a4:	95 1f       	adc	r25, r21
    19a6:	a0 1d       	adc	r26, r0
    19a8:	08 95       	ret

000019aa <_exit>:
    19aa:	f8 94       	cli

000019ac <__stop_program>:
    19ac:	ff cf       	rjmp	.-2      	; 0x19ac <__stop_program>
