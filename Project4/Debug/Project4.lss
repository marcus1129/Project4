
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800200  000013d0  00001464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800298  00800298  000014fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cfb  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001388  00000000  00000000  000044ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016c7  00000000  00000000  00005887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000092c  00000000  00000000  00006f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b29  00000000  00000000  0000787c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c60  00000000  00000000  000083a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000a005  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
       2:	00 00       	nop
       4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
       a:	00 00       	nop
       c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
       e:	00 00       	nop
      10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
      12:	00 00       	nop
      14:	6e c5       	rjmp	.+2780   	; 0xaf2 <__vector_5>
      16:	00 00       	nop
      18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c3       	rjmp	.+1930   	; 0x7c0 <__vector_13>
      36:	00 00       	nop
      38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
      42:	00 00       	nop
      44:	79 c3       	rjmp	.+1778   	; 0x738 <__vector_17>
      46:	00 00       	nop
      48:	ec c1       	rjmp	.+984    	; 0x422 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
      52:	00 00       	nop
      54:	2d c3       	rjmp	.+1626   	; 0x6b0 <__vector_21>
      56:	00 00       	nop
      58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e0 c1       	rjmp	.+960    	; 0x422 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c7       	rjmp	.+3676   	; 0xec2 <__vector_25>
      66:	00 00       	nop
      68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e2 c7       	rjmp	.+4036   	; 0x1032 <__vector_27>
      6e:	00 00       	nop
      70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
      72:	00 00       	nop
      74:	d6 c1       	rjmp	.+940    	; 0x422 <__bad_interrupt>
      76:	00 00       	nop
      78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c3       	rjmp	.+1990   	; 0x848 <__vector_32>
      82:	00 00       	nop
      84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
      86:	00 00       	nop
      88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
      8e:	00 00       	nop
      90:	46 c7       	rjmp	.+3724   	; 0xf1e <__vector_36>
      92:	00 00       	nop
      94:	c6 c1       	rjmp	.+908    	; 0x422 <__bad_interrupt>
      96:	00 00       	nop
      98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c4       	rjmp	.+2086   	; 0x8d0 <__vector_42>
      aa:	00 00       	nop
      ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	56 c7       	rjmp	.+3756   	; 0xf7a <__vector_51>
      ce:	00 00       	nop
      d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	7e c7       	rjmp	.+3836   	; 0xfd6 <__vector_54>
      da:	00 00       	nop
      dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
      ec:	00 00       	nop
      ee:	5f 00       	.word	0x005f	; ????
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	07 00       	.word	0x0007	; ????
      f8:	07 00       	.word	0x0007	; ????
      fa:	00 00       	nop
      fc:	00 14       	cp	r0, r0
      fe:	7f 14       	cp	r7, r15
     100:	7f 14       	cp	r7, r15
     102:	00 00       	nop
     104:	00 24       	eor	r0, r0
     106:	2a 7f       	andi	r18, 0xFA	; 250
     108:	2a 12       	cpse	r2, r26
     10a:	00 00       	nop
     10c:	00 23       	and	r16, r16
     10e:	13 08       	sbc	r1, r3
     110:	64 62       	ori	r22, 0x24	; 36
     112:	00 00       	nop
     114:	00 36       	cpi	r16, 0x60	; 96
     116:	49 55       	subi	r20, 0x59	; 89
     118:	22 50       	subi	r18, 0x02	; 2
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	05 03       	mulsu	r16, r21
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 1c       	adc	r0, r0
     126:	22 41       	sbci	r18, 0x12	; 18
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 41       	sbci	r16, 0x10	; 16
     12e:	22 1c       	adc	r2, r2
     130:	00 00       	nop
     132:	00 00       	nop
     134:	00 08       	sbc	r0, r0
     136:	2a 1c       	adc	r2, r10
     138:	2a 08       	sbc	r2, r10
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	08 3e       	cpi	r16, 0xE8	; 232
     140:	08 08       	sbc	r0, r8
     142:	00 00       	nop
     144:	00 a0       	ldd	r0, Z+32	; 0x20
     146:	60 00       	.word	0x0060	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 08       	sbc	r0, r0
     14e:	08 08       	sbc	r0, r8
     150:	08 08       	sbc	r0, r8
     152:	00 00       	nop
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 20       	and	r0, r0
     15e:	10 08       	sbc	r1, r0
     160:	04 02       	muls	r16, r20
     162:	00 00       	nop
     164:	00 3e       	cpi	r16, 0xE0	; 224
     166:	51 49       	sbci	r21, 0x91	; 145
     168:	45 3e       	cpi	r20, 0xE5	; 229
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	42 7f       	andi	r20, 0xF2	; 242
     170:	40 00       	.word	0x0040	; ????
     172:	00 00       	nop
     174:	00 62       	ori	r16, 0x20	; 32
     176:	51 49       	sbci	r21, 0x91	; 145
     178:	49 46       	sbci	r20, 0x69	; 105
     17a:	00 00       	nop
     17c:	00 22       	and	r0, r16
     17e:	41 49       	sbci	r20, 0x91	; 145
     180:	49 36       	cpi	r20, 0x69	; 105
     182:	00 00       	nop
     184:	00 18       	sub	r0, r0
     186:	14 12       	cpse	r1, r20
     188:	7f 10       	cpse	r7, r15
     18a:	00 00       	nop
     18c:	00 27       	eor	r16, r16
     18e:	45 45       	sbci	r20, 0x55	; 85
     190:	45 39       	cpi	r20, 0x95	; 149
     192:	00 00       	nop
     194:	00 3c       	cpi	r16, 0xC0	; 192
     196:	4a 49       	sbci	r20, 0x9A	; 154
     198:	49 30       	cpi	r20, 0x09	; 9
     19a:	00 00       	nop
     19c:	00 01       	movw	r0, r0
     19e:	71 09       	sbc	r23, r1
     1a0:	05 03       	mulsu	r16, r21
     1a2:	00 00       	nop
     1a4:	00 36       	cpi	r16, 0x60	; 96
     1a6:	49 49       	sbci	r20, 0x99	; 153
     1a8:	49 36       	cpi	r20, 0x69	; 105
     1aa:	00 00       	nop
     1ac:	00 06       	cpc	r0, r16
     1ae:	49 49       	sbci	r20, 0x99	; 153
     1b0:	29 1e       	adc	r2, r25
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	36 36       	cpi	r19, 0x66	; 102
     1b8:	00 00       	nop
     1ba:	00 00       	nop
     1bc:	00 00       	nop
     1be:	ac 6c       	ori	r26, 0xCC	; 204
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 00       	.word	0x0041	; ????
     1ca:	00 00       	nop
     1cc:	00 14       	cp	r0, r0
     1ce:	14 14       	cp	r1, r4
     1d0:	14 14       	cp	r1, r4
     1d2:	00 00       	nop
     1d4:	00 41       	sbci	r16, 0x10	; 16
     1d6:	22 14       	cp	r2, r2
     1d8:	08 00       	.word	0x0008	; ????
     1da:	00 00       	nop
     1dc:	00 02       	muls	r16, r16
     1de:	01 51       	subi	r16, 0x11	; 17
     1e0:	09 06       	cpc	r0, r25
     1e2:	00 00       	nop
     1e4:	00 32       	cpi	r16, 0x20	; 32
     1e6:	49 79       	andi	r20, 0x99	; 153
     1e8:	41 3e       	cpi	r20, 0xE1	; 225
     1ea:	00 00       	nop
     1ec:	00 7e       	andi	r16, 0xE0	; 224
     1ee:	09 09       	sbc	r16, r9
     1f0:	09 7e       	andi	r16, 0xE9	; 233
     1f2:	00 00       	nop
     1f4:	00 7f       	andi	r16, 0xF0	; 240
     1f6:	49 49       	sbci	r20, 0x99	; 153
     1f8:	49 36       	cpi	r20, 0x69	; 105
     1fa:	00 00       	nop
     1fc:	00 3e       	cpi	r16, 0xE0	; 224
     1fe:	41 41       	sbci	r20, 0x11	; 17
     200:	41 22       	and	r4, r17
     202:	00 00       	nop
     204:	00 7f       	andi	r16, 0xF0	; 240
     206:	41 41       	sbci	r20, 0x11	; 17
     208:	22 1c       	adc	r2, r2
     20a:	00 00       	nop
     20c:	00 7f       	andi	r16, 0xF0	; 240
     20e:	49 49       	sbci	r20, 0x99	; 153
     210:	49 41       	sbci	r20, 0x19	; 25
     212:	00 00       	nop
     214:	00 7f       	andi	r16, 0xF0	; 240
     216:	09 09       	sbc	r16, r9
     218:	09 01       	movw	r0, r18
     21a:	00 00       	nop
     21c:	00 3e       	cpi	r16, 0xE0	; 224
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	51 72       	andi	r21, 0x21	; 33
     222:	00 00       	nop
     224:	00 7f       	andi	r16, 0xF0	; 240
     226:	08 08       	sbc	r0, r8
     228:	08 7f       	andi	r16, 0xF8	; 248
     22a:	00 00       	nop
     22c:	00 41       	sbci	r16, 0x10	; 16
     22e:	7f 41       	sbci	r23, 0x1F	; 31
     230:	00 00       	nop
     232:	00 00       	nop
     234:	00 20       	and	r0, r0
     236:	40 41       	sbci	r20, 0x10	; 16
     238:	3f 01       	movw	r6, r30
     23a:	00 00       	nop
     23c:	00 7f       	andi	r16, 0xF0	; 240
     23e:	08 14       	cp	r0, r8
     240:	22 41       	sbci	r18, 0x12	; 18
     242:	00 00       	nop
     244:	00 7f       	andi	r16, 0xF0	; 240
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	00 00       	nop
     24c:	00 7f       	andi	r16, 0xF0	; 240
     24e:	02 0c       	add	r0, r2
     250:	02 7f       	andi	r16, 0xF2	; 242
     252:	00 00       	nop
     254:	00 7f       	andi	r16, 0xF0	; 240
     256:	04 08       	sbc	r0, r4
     258:	10 7f       	andi	r17, 0xF0	; 240
     25a:	00 00       	nop
     25c:	00 3e       	cpi	r16, 0xE0	; 224
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	41 3e       	cpi	r20, 0xE1	; 225
     262:	00 00       	nop
     264:	00 7f       	andi	r16, 0xF0	; 240
     266:	09 09       	sbc	r16, r9
     268:	09 06       	cpc	r0, r25
     26a:	00 00       	nop
     26c:	00 3e       	cpi	r16, 0xE0	; 224
     26e:	41 51       	subi	r20, 0x11	; 17
     270:	21 5e       	subi	r18, 0xE1	; 225
     272:	00 00       	nop
     274:	00 7f       	andi	r16, 0xF0	; 240
     276:	09 19       	sub	r16, r9
     278:	29 46       	sbci	r18, 0x69	; 105
     27a:	00 00       	nop
     27c:	00 26       	eor	r0, r16
     27e:	49 49       	sbci	r20, 0x99	; 153
     280:	49 32       	cpi	r20, 0x29	; 41
     282:	00 00       	nop
     284:	00 01       	movw	r0, r0
     286:	01 7f       	andi	r16, 0xF1	; 241
     288:	01 01       	movw	r0, r2
     28a:	00 00       	nop
     28c:	00 3f       	cpi	r16, 0xF0	; 240
     28e:	40 40       	sbci	r20, 0x00	; 0
     290:	40 3f       	cpi	r20, 0xF0	; 240
     292:	00 00       	nop
     294:	00 1f       	adc	r16, r16
     296:	20 40       	sbci	r18, 0x00	; 0
     298:	20 1f       	adc	r18, r16
     29a:	00 00       	nop
     29c:	00 3f       	cpi	r16, 0xF0	; 240
     29e:	40 38       	cpi	r20, 0x80	; 128
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 63       	ori	r16, 0x30	; 48
     2a6:	14 08       	sbc	r1, r4
     2a8:	14 63       	ori	r17, 0x34	; 52
     2aa:	00 00       	nop
     2ac:	00 03       	mulsu	r16, r16
     2ae:	04 78       	andi	r16, 0x84	; 132
     2b0:	04 03       	mulsu	r16, r20
     2b2:	00 00       	nop
     2b4:	00 61       	ori	r16, 0x10	; 16
     2b6:	51 49       	sbci	r21, 0x91	; 145
     2b8:	45 43       	sbci	r20, 0x35	; 53
     2ba:	00 00       	nop
     2bc:	00 7f       	andi	r16, 0xF0	; 240
     2be:	41 41       	sbci	r20, 0x11	; 17
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 02       	muls	r16, r16
     2c6:	04 08       	sbc	r0, r4
     2c8:	10 20       	and	r1, r0
     2ca:	00 00       	nop
     2cc:	00 41       	sbci	r16, 0x10	; 16
     2ce:	41 7f       	andi	r20, 0xF1	; 241
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 04       	cpc	r0, r0
     2d6:	02 01       	movw	r0, r4
     2d8:	02 04       	cpc	r0, r2
     2da:	00 00       	nop
     2dc:	00 80       	ld	r0, Z
     2de:	80 80       	ld	r8, Z
     2e0:	80 80       	ld	r8, Z
     2e2:	00 00       	nop
     2e4:	00 01       	movw	r0, r0
     2e6:	02 04       	cpc	r0, r2
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	00 20       	and	r0, r0
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	54 78       	andi	r21, 0x84	; 132
     2f2:	00 00       	nop
     2f4:	00 7f       	andi	r16, 0xF0	; 240
     2f6:	48 44       	sbci	r20, 0x48	; 72
     2f8:	44 38       	cpi	r20, 0x84	; 132
     2fa:	00 00       	nop
     2fc:	00 38       	cpi	r16, 0x80	; 128
     2fe:	44 44       	sbci	r20, 0x44	; 68
     300:	28 00       	.word	0x0028	; ????
     302:	00 00       	nop
     304:	00 38       	cpi	r16, 0x80	; 128
     306:	44 44       	sbci	r20, 0x44	; 68
     308:	48 7f       	andi	r20, 0xF8	; 248
     30a:	00 00       	nop
     30c:	00 38       	cpi	r16, 0x80	; 128
     30e:	54 54       	subi	r21, 0x44	; 68
     310:	54 18       	sub	r5, r4
     312:	00 00       	nop
     314:	00 08       	sbc	r0, r0
     316:	7e 09       	sbc	r23, r14
     318:	02 00       	.word	0x0002	; ????
     31a:	00 00       	nop
     31c:	00 18       	sub	r0, r0
     31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     320:	a4 7c       	andi	r26, 0xC4	; 196
     322:	00 00       	nop
     324:	00 7f       	andi	r16, 0xF0	; 240
     326:	08 04       	cpc	r0, r8
     328:	04 78       	andi	r16, 0x84	; 132
     32a:	00 00       	nop
     32c:	00 00       	nop
     32e:	7d 00       	.word	0x007d	; ????
     330:	00 00       	nop
     332:	00 00       	nop
     334:	00 80       	ld	r0, Z
     336:	84 7d       	andi	r24, 0xD4	; 212
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	00 7f       	andi	r16, 0xF0	; 240
     33e:	10 28       	or	r1, r0
     340:	44 00       	.word	0x0044	; ????
     342:	00 00       	nop
     344:	00 41       	sbci	r16, 0x10	; 16
     346:	7f 40       	sbci	r23, 0x0F	; 15
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	00 7c       	andi	r16, 0xC0	; 192
     34e:	04 18       	sub	r0, r4
     350:	04 78       	andi	r16, 0x84	; 132
     352:	00 00       	nop
     354:	00 7c       	andi	r16, 0xC0	; 192
     356:	08 04       	cpc	r0, r8
     358:	7c 00       	.word	0x007c	; ????
     35a:	00 00       	nop
     35c:	00 38       	cpi	r16, 0x80	; 128
     35e:	44 44       	sbci	r20, 0x44	; 68
     360:	38 00       	.word	0x0038	; ????
     362:	00 00       	nop
     364:	00 fc       	sbrc	r0, 0
     366:	24 24       	eor	r2, r4
     368:	18 00       	.word	0x0018	; ????
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	24 24       	eor	r2, r4
     370:	fc 00       	.word	0x00fc	; ????
     372:	00 00       	nop
     374:	00 00       	nop
     376:	7c 08       	sbc	r7, r12
     378:	04 00       	.word	0x0004	; ????
     37a:	00 00       	nop
     37c:	00 48       	sbci	r16, 0x80	; 128
     37e:	54 54       	subi	r21, 0x44	; 68
     380:	24 00       	.word	0x0024	; ????
     382:	00 00       	nop
     384:	00 04       	cpc	r0, r0
     386:	7f 44       	sbci	r23, 0x4F	; 79
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 3c       	cpi	r16, 0xC0	; 192
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	7c 00       	.word	0x007c	; ????
     392:	00 00       	nop
     394:	00 1c       	adc	r0, r0
     396:	20 40       	sbci	r18, 0x00	; 0
     398:	20 1c       	adc	r2, r0
     39a:	00 00       	nop
     39c:	00 3c       	cpi	r16, 0xC0	; 192
     39e:	40 30       	cpi	r20, 0x00	; 0
     3a0:	40 3c       	cpi	r20, 0xC0	; 192
     3a2:	00 00       	nop
     3a4:	00 44       	sbci	r16, 0x40	; 64
     3a6:	28 10       	cpse	r2, r8
     3a8:	28 44       	sbci	r18, 0x48	; 72
     3aa:	00 00       	nop
     3ac:	00 1c       	adc	r0, r0
     3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
     3b0:	7c 00       	.word	0x007c	; ????
     3b2:	00 00       	nop
     3b4:	00 44       	sbci	r16, 0x40	; 64
     3b6:	64 54       	subi	r22, 0x44	; 68
     3b8:	4c 44       	sbci	r20, 0x4C	; 76
     3ba:	00 00       	nop
     3bc:	00 08       	sbc	r0, r0
     3be:	36 41       	sbci	r19, 0x16	; 22
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 00       	nop
     3c6:	7f 00       	.word	0x007f	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	00 41       	sbci	r16, 0x10	; 16
     3ce:	36 08       	sbc	r3, r6
     3d0:	00 00       	nop
     3d2:	00 00       	nop
     3d4:	00 02       	muls	r16, r16
     3d6:	01 01       	movw	r0, r2
     3d8:	02 01       	movw	r0, r4
     3da:	00 00       	nop
     3dc:	00 02       	muls	r16, r16
     3de:	05 05       	cpc	r16, r5
     3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d1 e2       	ldi	r29, 0x21	; 33
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
     3f4:	12 e0       	ldi	r17, 0x02	; 2
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	e0 ed       	ldi	r30, 0xD0	; 208
     3fc:	f3 e1       	ldi	r31, 0x13	; 19
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0b bf       	out	0x3b, r16	; 59
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	07 90       	elpm	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	a8 39       	cpi	r26, 0x98	; 152
     40a:	b1 07       	cpc	r27, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	a8 e9       	ldi	r26, 0x98	; 152
     412:	b2 e0       	ldi	r27, 0x02	; 2
     414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
     416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
     418:	a0 3a       	cpi	r26, 0xA0	; 160
     41a:	b2 07       	cpc	r27, r18
     41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
     41e:	03 d3       	rcall	.+1542   	; 0xa26 <main>
     420:	d5 c7       	rjmp	.+4010   	; 0x13cc <_exit>

00000422 <__bad_interrupt>:
     422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <clock_init>:
#include <avr/interrupt.h>
#include "clock.h"


int clock_init(){
	CLOCK.second = 0;
     424:	e6 e0       	ldi	r30, 0x06	; 6
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	17 82       	std	Z+7, r1	; 0x07
     42a:	16 82       	std	Z+6, r1	; 0x06
	CLOCK.minute = 0;
     42c:	11 86       	std	Z+9, r1	; 0x09
     42e:	10 86       	std	Z+8, r1	; 0x08
	CLOCK.hour = 0;
     430:	13 86       	std	Z+11, r1	; 0x0b
     432:	12 86       	std	Z+10, r1	; 0x0a
	CLOCK.counter = 0;
     434:	11 82       	std	Z+1, r1	; 0x01
     436:	10 82       	st	Z, r1
	CLOCK.interruptFlag = 1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	93 83       	std	Z+3, r25	; 0x03
     43e:	82 83       	std	Z+2, r24	; 0x02
	CLOCK.clock_makeTimeStr();
     440:	02 88       	ldd	r0, Z+18	; 0x12
     442:	f3 89       	ldd	r31, Z+19	; 0x13
     444:	e0 2d       	mov	r30, r0
     446:	19 95       	eicall
	return 1;
}
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	08 95       	ret

0000044e <clock_increment>:

int clock_increment(){
	if(CLOCK.second == 59){
     44e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <CLOCK+0x6>
     452:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <CLOCK+0x7>
     456:	8b 33       	cpi	r24, 0x3B	; 59
     458:	91 05       	cpc	r25, r1
     45a:	39 f5       	brne	.+78     	; 0x4aa <clock_increment+0x5c>
		if(CLOCK.minute == 59){
     45c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CLOCK+0x8>
     460:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CLOCK+0x9>
     464:	8b 33       	cpi	r24, 0x3B	; 59
     466:	91 05       	cpc	r25, r1
     468:	b1 f4       	brne	.+44     	; 0x496 <clock_increment+0x48>
			if(CLOCK.hour == 23){
     46a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <CLOCK+0xa>
     46e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <CLOCK+0xb>
     472:	87 31       	cpi	r24, 0x17	; 23
     474:	91 05       	cpc	r25, r1
     476:	29 f4       	brne	.+10     	; 0x482 <clock_increment+0x34>
				CLOCK.hour = 0;
     478:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <CLOCK+0xb>
     47c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <CLOCK+0xa>
     480:	05 c0       	rjmp	.+10     	; 0x48c <clock_increment+0x3e>
			}
			else{
				CLOCK.hour += 1;
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <CLOCK+0xb>
     488:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <CLOCK+0xa>
			}
			CLOCK.minute = 0;
     48c:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <CLOCK+0x9>
     490:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <CLOCK+0x8>
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <clock_increment+0x52>
		}
		else{
			CLOCK.minute += 1;
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <CLOCK+0x9>
     49c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CLOCK+0x8>
		}
		CLOCK.second = 0;
     4a0:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <CLOCK+0x7>
     4a4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <CLOCK+0x6>
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <clock_increment+0x66>
	}
	else{
		CLOCK.second += 1;
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <CLOCK+0x7>
     4b0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <CLOCK+0x6>
	}
	CLOCK.clock_makeTimeStr();
     4b4:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <CLOCK+0x12>
     4b8:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <CLOCK+0x13>
     4bc:	19 95       	eicall
	return 1;
}
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <initTimer0>:
	CLOCK.timeStr[9] = '\r';
	return 1;
}

int initTimer0(){
	TCCR0A = (1<<WGM01);	     //Sets mode to CTC
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);		//Sets prescaler to 1024
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0xF9;				//Sets compare value to 249
     4cc:	99 ef       	ldi	r25, 0xF9	; 249
     4ce:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0xF9;
     4d0:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
     4d2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
     4d6:	85 bb       	out	0x15, r24	; 21
	return 1;
};
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	08 95       	ret

000004de <clock_enableTimerInterrupt>:
	TIMSK4 = (1<<OCIE4A);
	TIFR4 = (1<<OCF4A);
	return 1;
};*/

int clock_enableTimerInterrupt(int timerId){
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	2a 97       	sbiw	r28, 0x0a	; 10
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
	sei();
     4f2:	78 94       	sei
	int (*clock_interruptInitFuncs[5])() = {initTimer0/*, initTimer1, initTimer2, initTimer3, initTimer4*/};
     4f4:	fe 01       	movw	r30, r28
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	2a e0       	ldi	r18, 0x0A	; 10
     4fa:	df 01       	movw	r26, r30
     4fc:	1d 92       	st	X+, r1
     4fe:	2a 95       	dec	r18
     500:	e9 f7       	brne	.-6      	; 0x4fc <clock_enableTimerInterrupt+0x1e>
     502:	22 e6       	ldi	r18, 0x62	; 98
     504:	32 e0       	ldi	r19, 0x02	; 2
     506:	3a 83       	std	Y+2, r19	; 0x02
     508:	29 83       	std	Y+1, r18	; 0x01
	(*clock_interruptInitFuncs[timerId])();
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	e8 0f       	add	r30, r24
     510:	f9 1f       	adc	r31, r25
     512:	01 90       	ld	r0, Z+
     514:	f0 81       	ld	r31, Z
     516:	e0 2d       	mov	r30, r0
     518:	19 95       	eicall
	return 1;
}
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	2a 96       	adiw	r28, 0x0a	; 10
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <clock_makeTimeStr>:
	}
	CLOCK.clock_makeTimeStr();
	return 1;
}

int clock_makeTimeStr(){
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
	if(CLOCK.timeStr == NULL){
     534:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <CLOCK+0x4>
     538:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <CLOCK+0x5>
     53c:	89 2b       	or	r24, r25
     53e:	49 f4       	brne	.+18     	; 0x552 <clock_makeTimeStr+0x22>
		CLOCK.timeStr = (char*)calloc(10, sizeof(char));
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	8a e0       	ldi	r24, 0x0A	; 10
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	cb d5       	rcall	.+2966   	; 0x10e0 <calloc>
     54a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <CLOCK+0x5>
     54e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <CLOCK+0x4>
	}
	char tempHour[2];
	char tempMinute[2];
	char tempSecond[2];
	if(CLOCK.hour >= 10){
     552:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <CLOCK+0xa>
     556:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <CLOCK+0xb>
     55a:	8a 30       	cpi	r24, 0x0A	; 10
     55c:	91 05       	cpc	r25, r1
     55e:	64 f0       	brlt	.+24     	; 0x578 <clock_makeTimeStr+0x48>
		tempHour[1] = CLOCK.hour%10 + '0';
     560:	2a e0       	ldi	r18, 0x0A	; 10
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	b9 01       	movw	r22, r18
     566:	73 d5       	rcall	.+2790   	; 0x104e <__divmodhi4>
     568:	40 e3       	ldi	r20, 0x30	; 48
     56a:	48 0f       	add	r20, r24
		tempHour[0] = (CLOCK.hour/10)%10 + '0';
     56c:	cb 01       	movw	r24, r22
     56e:	b9 01       	movw	r22, r18
     570:	6e d5       	rcall	.+2780   	; 0x104e <__divmodhi4>
     572:	d0 e3       	ldi	r29, 0x30	; 48
     574:	d8 0f       	add	r29, r24
     576:	06 c0       	rjmp	.+12     	; 0x584 <clock_makeTimeStr+0x54>
	} else{
		tempHour[1] = CLOCK.hour%10 + '0';
     578:	6a e0       	ldi	r22, 0x0A	; 10
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	68 d5       	rcall	.+2768   	; 0x104e <__divmodhi4>
     57e:	40 e3       	ldi	r20, 0x30	; 48
     580:	48 0f       	add	r20, r24
     582:	d0 e3       	ldi	r29, 0x30	; 48
		tempHour[0] = '0';
     584:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CLOCK+0x8>
	}
	if(CLOCK.minute >= 10){
     588:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CLOCK+0x9>
     58c:	8a 30       	cpi	r24, 0x0A	; 10
     58e:	91 05       	cpc	r25, r1
     590:	64 f0       	brlt	.+24     	; 0x5aa <clock_makeTimeStr+0x7a>
		tempMinute[1] = CLOCK.minute%10 + '0';
     592:	ea e0       	ldi	r30, 0x0A	; 10
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	bf 01       	movw	r22, r30
     598:	5a d5       	rcall	.+2740   	; 0x104e <__divmodhi4>
     59a:	30 e3       	ldi	r19, 0x30	; 48
     59c:	38 0f       	add	r19, r24
		tempMinute[0] = (CLOCK.minute/10)%10 + '0';
     59e:	cb 01       	movw	r24, r22
     5a0:	bf 01       	movw	r22, r30
     5a2:	55 d5       	rcall	.+2730   	; 0x104e <__divmodhi4>
     5a4:	c0 e3       	ldi	r28, 0x30	; 48
     5a6:	c8 0f       	add	r28, r24
     5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <clock_makeTimeStr+0x86>
		} else{
		tempMinute[1] = CLOCK.minute%10 + '0';
     5aa:	6a e0       	ldi	r22, 0x0A	; 10
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	4f d5       	rcall	.+2718   	; 0x104e <__divmodhi4>
     5b0:	30 e3       	ldi	r19, 0x30	; 48
     5b2:	38 0f       	add	r19, r24
     5b4:	c0 e3       	ldi	r28, 0x30	; 48
		tempMinute[0] = '0';
     5b6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <CLOCK+0x6>
	}
	if(CLOCK.second >= 10){
     5ba:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <CLOCK+0x7>
     5be:	8a 30       	cpi	r24, 0x0A	; 10
     5c0:	91 05       	cpc	r25, r1
     5c2:	5c f0       	brlt	.+22     	; 0x5da <clock_makeTimeStr+0xaa>
		tempSecond[1] = CLOCK.second%10 + '0';
     5c4:	ea e0       	ldi	r30, 0x0A	; 10
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	bf 01       	movw	r22, r30
     5ca:	41 d5       	rcall	.+2690   	; 0x104e <__divmodhi4>
     5cc:	20 e3       	ldi	r18, 0x30	; 48
     5ce:	28 0f       	add	r18, r24
		tempSecond[0] = (CLOCK.second/10)%10 + '0';
     5d0:	cb 01       	movw	r24, r22
     5d2:	bf 01       	movw	r22, r30
     5d4:	3c d5       	rcall	.+2680   	; 0x104e <__divmodhi4>
     5d6:	80 5d       	subi	r24, 0xD0	; 208
     5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <clock_makeTimeStr+0xb6>
     5da:	6a e0       	ldi	r22, 0x0A	; 10
		} else{
		tempSecond[1] = CLOCK.second%10 + '0';
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	37 d5       	rcall	.+2670   	; 0x104e <__divmodhi4>
     5e0:	20 e3       	ldi	r18, 0x30	; 48
     5e2:	28 0f       	add	r18, r24
     5e4:	80 e3       	ldi	r24, 0x30	; 48
     5e6:	e6 e0       	ldi	r30, 0x06	; 6
		tempSecond[0] = '0';
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
	}
	CLOCK.timeStr[0] = tempHour[0];
     5ea:	a4 81       	ldd	r26, Z+4	; 0x04
     5ec:	b5 81       	ldd	r27, Z+5	; 0x05
     5ee:	dc 93       	st	X, r29
     5f0:	a4 81       	ldd	r26, Z+4	; 0x04
     5f2:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[1] = tempHour[1];
     5f4:	11 96       	adiw	r26, 0x01	; 1
     5f6:	4c 93       	st	X, r20
     5f8:	a4 81       	ldd	r26, Z+4	; 0x04
     5fa:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[2] = ':';
     5fc:	9a e3       	ldi	r25, 0x3A	; 58
     5fe:	12 96       	adiw	r26, 0x02	; 2
     600:	9c 93       	st	X, r25
     602:	a4 81       	ldd	r26, Z+4	; 0x04
     604:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[3] = tempMinute[0];
     606:	13 96       	adiw	r26, 0x03	; 3
     608:	cc 93       	st	X, r28
     60a:	a4 81       	ldd	r26, Z+4	; 0x04
     60c:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[4] = tempMinute[1];
     60e:	14 96       	adiw	r26, 0x04	; 4
     610:	3c 93       	st	X, r19
     612:	a4 81       	ldd	r26, Z+4	; 0x04
     614:	b5 81       	ldd	r27, Z+5	; 0x05
	CLOCK.timeStr[5] = ':';
     616:	15 96       	adiw	r26, 0x05	; 5
     618:	9c 93       	st	X, r25
     61a:	04 80       	ldd	r0, Z+4	; 0x04
     61c:	f5 81       	ldd	r31, Z+5	; 0x05
	CLOCK.timeStr[6] = tempSecond[0];
     61e:	e0 2d       	mov	r30, r0
     620:	86 83       	std	Z+6, r24	; 0x06
     622:	27 83       	std	Z+7, r18	; 0x07
     624:	8a e0       	ldi	r24, 0x0A	; 10
	CLOCK.timeStr[7] = tempSecond[1];
     626:	80 87       	std	Z+8, r24	; 0x08
	CLOCK.timeStr[8] = '\n';
     628:	8d e0       	ldi	r24, 0x0D	; 13
     62a:	81 87       	std	Z+9, r24	; 0x09
	CLOCK.timeStr[9] = '\r';
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <clock_updateClock>:
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
	int (*clock_interruptInitFuncs[5])() = {initTimer0/*, initTimer1, initTimer2, initTimer3, initTimer4*/};
	(*clock_interruptInitFuncs[timerId])();
	return 1;
}

int clock_updateClock(char* clockVal){
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	1f 92       	push	r1
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	8c 01       	movw	r16, r24
	char buffer[2];
	buffer[0] = clockVal[0];
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
     650:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[1];
     652:	81 81       	ldd	r24, Z+1	; 0x01
     654:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.hour = atoi(buffer);
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	7d d6       	rcall	.+3322   	; 0x1356 <atoi>
     65c:	0f 2e       	mov	r0, r31
     65e:	f6 e0       	ldi	r31, 0x06	; 6
     660:	ef 2e       	mov	r14, r31
     662:	f2 e0       	ldi	r31, 0x02	; 2
     664:	ff 2e       	mov	r15, r31
     666:	f0 2d       	mov	r31, r0
     668:	f7 01       	movw	r30, r14
     66a:	93 87       	std	Z+11, r25	; 0x0b
     66c:	82 87       	std	Z+10, r24	; 0x0a
	buffer[0] = clockVal[3];
     66e:	f8 01       	movw	r30, r16
     670:	83 81       	ldd	r24, Z+3	; 0x03
     672:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[4];
     674:	84 81       	ldd	r24, Z+4	; 0x04
     676:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.minute = atoi(buffer);
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	6c d6       	rcall	.+3288   	; 0x1356 <atoi>
     67e:	f7 01       	movw	r30, r14
     680:	91 87       	std	Z+9, r25	; 0x09
     682:	80 87       	std	Z+8, r24	; 0x08
	buffer[0] = clockVal[6];
     684:	f8 01       	movw	r30, r16
     686:	86 81       	ldd	r24, Z+6	; 0x06
     688:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = clockVal[7];
     68a:	87 81       	ldd	r24, Z+7	; 0x07
     68c:	8a 83       	std	Y+2, r24	; 0x02
	CLOCK.second = atoi(buffer);
     68e:	ce 01       	movw	r24, r28
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	61 d6       	rcall	.+3266   	; 0x1356 <atoi>
     694:	f7 01       	movw	r30, r14
     696:	97 83       	std	Z+7, r25	; 0x07
     698:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	08 95       	ret

000006b0 <__vector_21>:
	.clock_makeTimeStr = clock_makeTimeStr,
	.clock_updateClock = clock_updateClock
};


ISR(TIMER0_COMPA_vect){
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	0b b6       	in	r0, 0x3b	; 59
     6bc:	0f 92       	push	r0
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
	CLOCK.counter += 1;
     6da:	e6 e0       	ldi	r30, 0x06	; 6
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	80 81       	ld	r24, Z
     6e0:	91 81       	ldd	r25, Z+1	; 0x01
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	91 83       	std	Z+1, r25	; 0x01
     6e6:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	88 3e       	cpi	r24, 0xE8	; 232
     6ee:	93 40       	sbci	r25, 0x03	; 3
     6f0:	71 f4       	brne	.+28     	; 0x70e <__vector_21+0x5e>
		CLOCK.clock_makeTimeStr();
     6f2:	ef 01       	movw	r28, r30
     6f4:	02 88       	ldd	r0, Z+18	; 0x12
     6f6:	f3 89       	ldd	r31, Z+19	; 0x13
     6f8:	e0 2d       	mov	r30, r0
     6fa:	19 95       	eicall
		CLOCK.clock_increment();
     6fc:	e8 89       	ldd	r30, Y+16	; 0x10
     6fe:	f9 89       	ldd	r31, Y+17	; 0x11
     700:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	9b 83       	std	Y+3, r25	; 0x03
     708:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     70a:	19 82       	std	Y+1, r1	; 0x01
     70c:	18 82       	st	Y, r1
	}
}
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	0f 90       	pop	r0
     72c:	0b be       	out	0x3b, r0	; 59
     72e:	0f 90       	pop	r0
     730:	0f be       	out	0x3f, r0	; 63
     732:	0f 90       	pop	r0
     734:	1f 90       	pop	r1
     736:	18 95       	reti

00000738 <__vector_17>:

ISR(TIMER1_COMPA_vect){
     738:	1f 92       	push	r1
     73a:	0f 92       	push	r0
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	0f 92       	push	r0
     740:	11 24       	eor	r1, r1
     742:	0b b6       	in	r0, 0x3b	; 59
     744:	0f 92       	push	r0
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
	CLOCK.counter += 1;
     762:	e6 e0       	ldi	r30, 0x06	; 6
     764:	f2 e0       	ldi	r31, 0x02	; 2
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	91 83       	std	Z+1, r25	; 0x01
     76e:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	88 3e       	cpi	r24, 0xE8	; 232
     776:	93 40       	sbci	r25, 0x03	; 3
     778:	71 f4       	brne	.+28     	; 0x796 <__vector_17+0x5e>
		CLOCK.clock_makeTimeStr();
     77a:	ef 01       	movw	r28, r30
     77c:	02 88       	ldd	r0, Z+18	; 0x12
     77e:	f3 89       	ldd	r31, Z+19	; 0x13
     780:	e0 2d       	mov	r30, r0
     782:	19 95       	eicall
		CLOCK.clock_increment();
     784:	e8 89       	ldd	r30, Y+16	; 0x10
     786:	f9 89       	ldd	r31, Y+17	; 0x11
     788:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	9b 83       	std	Y+3, r25	; 0x03
     790:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     792:	19 82       	std	Y+1, r1	; 0x01
     794:	18 82       	st	Y, r1
	}
}
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	bf 91       	pop	r27
     7a0:	af 91       	pop	r26
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	7f 91       	pop	r23
     7a8:	6f 91       	pop	r22
     7aa:	5f 91       	pop	r21
     7ac:	4f 91       	pop	r20
     7ae:	3f 91       	pop	r19
     7b0:	2f 91       	pop	r18
     7b2:	0f 90       	pop	r0
     7b4:	0b be       	out	0x3b, r0	; 59
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti

000007c0 <__vector_13>:

ISR(TIMER2_COMPA_vect){
     7c0:	1f 92       	push	r1
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	0f 92       	push	r0
     7c8:	11 24       	eor	r1, r1
     7ca:	0b b6       	in	r0, 0x3b	; 59
     7cc:	0f 92       	push	r0
     7ce:	2f 93       	push	r18
     7d0:	3f 93       	push	r19
     7d2:	4f 93       	push	r20
     7d4:	5f 93       	push	r21
     7d6:	6f 93       	push	r22
     7d8:	7f 93       	push	r23
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	af 93       	push	r26
     7e0:	bf 93       	push	r27
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	CLOCK.counter += 1;
     7ea:	e6 e0       	ldi	r30, 0x06	; 6
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	88 3e       	cpi	r24, 0xE8	; 232
     7fe:	93 40       	sbci	r25, 0x03	; 3
     800:	71 f4       	brne	.+28     	; 0x81e <__vector_13+0x5e>
		CLOCK.clock_makeTimeStr();
     802:	ef 01       	movw	r28, r30
     804:	02 88       	ldd	r0, Z+18	; 0x12
     806:	f3 89       	ldd	r31, Z+19	; 0x13
     808:	e0 2d       	mov	r30, r0
     80a:	19 95       	eicall
		CLOCK.clock_increment();
     80c:	e8 89       	ldd	r30, Y+16	; 0x10
     80e:	f9 89       	ldd	r31, Y+17	; 0x11
     810:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	9b 83       	std	Y+3, r25	; 0x03
     818:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     81a:	19 82       	std	Y+1, r1	; 0x01
     81c:	18 82       	st	Y, r1
	}
}
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	bf 91       	pop	r27
     828:	af 91       	pop	r26
     82a:	9f 91       	pop	r25
     82c:	8f 91       	pop	r24
     82e:	7f 91       	pop	r23
     830:	6f 91       	pop	r22
     832:	5f 91       	pop	r21
     834:	4f 91       	pop	r20
     836:	3f 91       	pop	r19
     838:	2f 91       	pop	r18
     83a:	0f 90       	pop	r0
     83c:	0b be       	out	0x3b, r0	; 59
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <__vector_32>:

ISR(TIMER3_COMPA_vect){
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	0b b6       	in	r0, 0x3b	; 59
     854:	0f 92       	push	r0
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
	CLOCK.counter += 1;
     872:	e6 e0       	ldi	r30, 0x06	; 6
     874:	f2 e0       	ldi	r31, 0x02	; 2
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	91 83       	std	Z+1, r25	; 0x01
     87e:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     880:	80 81       	ld	r24, Z
     882:	91 81       	ldd	r25, Z+1	; 0x01
     884:	88 3e       	cpi	r24, 0xE8	; 232
     886:	93 40       	sbci	r25, 0x03	; 3
     888:	71 f4       	brne	.+28     	; 0x8a6 <__vector_32+0x5e>
		CLOCK.clock_makeTimeStr();
     88a:	ef 01       	movw	r28, r30
     88c:	02 88       	ldd	r0, Z+18	; 0x12
     88e:	f3 89       	ldd	r31, Z+19	; 0x13
     890:	e0 2d       	mov	r30, r0
     892:	19 95       	eicall
		CLOCK.clock_increment();
     894:	e8 89       	ldd	r30, Y+16	; 0x10
     896:	f9 89       	ldd	r31, Y+17	; 0x11
     898:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9b 83       	std	Y+3, r25	; 0x03
     8a0:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     8a2:	19 82       	std	Y+1, r1	; 0x01
     8a4:	18 82       	st	Y, r1
	}
}
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <__vector_42>:

ISR(TIMER4_COMPA_vect){
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	0b b6       	in	r0, 0x3b	; 59
     8dc:	0f 92       	push	r0
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
	CLOCK.counter += 1;
     8fa:	e6 e0       	ldi	r30, 0x06	; 6
     8fc:	f2 e0       	ldi	r31, 0x02	; 2
     8fe:	80 81       	ld	r24, Z
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	91 83       	std	Z+1, r25	; 0x01
     906:	80 83       	st	Z, r24
	if(CLOCK.counter == 1000){
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	88 3e       	cpi	r24, 0xE8	; 232
     90e:	93 40       	sbci	r25, 0x03	; 3
     910:	71 f4       	brne	.+28     	; 0x92e <__vector_42+0x5e>
		CLOCK.clock_makeTimeStr();
     912:	ef 01       	movw	r28, r30
     914:	02 88       	ldd	r0, Z+18	; 0x12
     916:	f3 89       	ldd	r31, Z+19	; 0x13
     918:	e0 2d       	mov	r30, r0
     91a:	19 95       	eicall
		CLOCK.clock_increment();
     91c:	e8 89       	ldd	r30, Y+16	; 0x10
     91e:	f9 89       	ldd	r31, Y+17	; 0x11
     920:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	9b 83       	std	Y+3, r25	; 0x03
     928:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     92a:	19 82       	std	Y+1, r1	; 0x01
     92c:	18 82       	st	Y, r1
	}
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0b be       	out	0x3b, r0	; 59
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
     958:	81 b1       	in	r24, 0x01	; 1
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	81 b9       	out	0x01, r24	; 1
     95e:	82 b1       	in	r24, 0x02	; 2
     960:	81 60       	ori	r24, 0x01	; 1
     962:	82 b9       	out	0x02, r24	; 2
     964:	2f ef       	ldi	r18, 0xFF	; 255
     966:	83 ed       	ldi	r24, 0xD3	; 211
     968:	90 e3       	ldi	r25, 0x30	; 48
     96a:	21 50       	subi	r18, 0x01	; 1
     96c:	80 40       	sbci	r24, 0x00	; 0
     96e:	90 40       	sbci	r25, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <I2C_Init+0x12>
     972:	00 c0       	rjmp	.+0      	; 0x974 <I2C_Init+0x1c>
     974:	00 00       	nop
     976:	82 e1       	ldi	r24, 0x12	; 18
     978:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     97c:	e9 eb       	ldi	r30, 0xB9	; 185
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	8c 7f       	andi	r24, 0xFC	; 252
     984:	80 83       	st	Z, r24
     986:	85 e0       	ldi	r24, 0x05	; 5
     988:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     98c:	08 95       	ret

0000098e <I2C_Start>:
     98e:	94 ea       	ldi	r25, 0xA4	; 164
     990:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     994:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     998:	99 23       	and	r25, r25
     99a:	e4 f7       	brge	.-8      	; 0x994 <I2C_Start+0x6>
     99c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     9a0:	98 7f       	andi	r25, 0xF8	; 248
     9a2:	98 30       	cpi	r25, 0x08	; 8
     9a4:	91 f4       	brne	.+36     	; 0x9ca <I2C_Start+0x3c>
     9a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     9aa:	84 e8       	ldi	r24, 0x84	; 132
     9ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9b4:	88 23       	and	r24, r24
     9b6:	e4 f7       	brge	.-8      	; 0x9b0 <I2C_Start+0x22>
     9b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     9bc:	88 7f       	andi	r24, 0xF8	; 248
     9be:	88 31       	cpi	r24, 0x18	; 24
     9c0:	31 f0       	breq	.+12     	; 0x9ce <I2C_Start+0x40>
     9c2:	80 32       	cpi	r24, 0x20	; 32
     9c4:	31 f4       	brne	.+12     	; 0x9d2 <I2C_Start+0x44>
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	08 95       	ret
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 95       	ret
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	08 95       	ret

000009d6 <I2C_Write>:
     9d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     9da:	84 e8       	ldi	r24, 0x84	; 132
     9dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     9e4:	88 23       	and	r24, r24
     9e6:	e4 f7       	brge	.-8      	; 0x9e0 <I2C_Write+0xa>
     9e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     9ec:	88 7f       	andi	r24, 0xF8	; 248
     9ee:	88 32       	cpi	r24, 0x28	; 40
     9f0:	21 f0       	breq	.+8      	; 0x9fa <I2C_Write+0x24>
     9f2:	80 33       	cpi	r24, 0x30	; 48
     9f4:	21 f4       	brne	.+8      	; 0x9fe <I2C_Write+0x28>
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	08 95       	ret
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	08 95       	ret
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	08 95       	ret

00000a02 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     a02:	84 e9       	ldi	r24, 0x94	; 148
     a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     a08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     a0c:	84 fd       	sbrc	r24, 4
     a0e:	fc cf       	rjmp	.-8      	; 0xa08 <I2C_Stop+0x6>
     a10:	08 95       	ret

00000a12 <initExternalInterrupt>:
#include "UARTLib.h"
#include "clock.h"
#include <util/delay.h>

void initExternalInterrupt(){
	DDRE = 0x00; //E4
     a12:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0xFF;
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	8e b9       	out	0x0e, r24	; 14
	EICRB = 0b00000010;
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
	EIMSK = 0b00010000;
     a1e:	80 e1       	ldi	r24, 0x10	; 16
     a20:	8d bb       	out	0x1d, r24	; 29
	sei();
     a22:	78 94       	sei
     a24:	08 95       	ret

00000a26 <main>:
}

volatile int gate1 = 0;

int main(void){
	_i2c_address = 0X78;
     a26:	88 e7       	ldi	r24, 0x78	; 120
     a28:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_i2c_address>
	I2C_Init();
     a2c:	95 df       	rcall	.-214    	; 0x958 <I2C_Init>
	InitializeDisplay();
     a2e:	81 d0       	rcall	.+258    	; 0xb32 <InitializeDisplay>
	print_fonts();
     a30:	0d d1       	rcall	.+538    	; 0xc4c <print_fonts>
     a32:	d1 d0       	rcall	.+418    	; 0xbd6 <clear_display>
	clear_display();
     a34:	c6 e0       	ldi	r28, 0x06	; 6
     a36:	d2 e0       	ldi	r29, 0x02	; 2
	
	CLOCK.clock_init();
     a38:	8e 85       	ldd	r24, Y+14	; 0x0e
     a3a:	9f 85       	ldd	r25, Y+15	; 0x0f
     a3c:	fc 01       	movw	r30, r24
     a3e:	19 95       	eicall
     a40:	ec 85       	ldd	r30, Y+12	; 0x0c
     a42:	fd 85       	ldd	r31, Y+13	; 0x0d
	CLOCK.clock_enableTimerInterrupt(0);
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	19 95       	eicall
     a4a:	cd e1       	ldi	r28, 0x1D	; 29
     a4c:	d2 e0       	ldi	r29, 0x02	; 2
	UART.UART_init(ASYNC, 19200, 0);
     a4e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     a50:	fe 8d       	ldd	r31, Y+30	; 0x1e
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	7b e4       	ldi	r23, 0x4B	; 75
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	19 95       	eicall
     a60:	d8 df       	rcall	.-80     	; 0xa12 <initExternalInterrupt>
	initExternalInterrupt();
     a62:	e9 a1       	ldd	r30, Y+33	; 0x21
     a64:	fa a1       	ldd	r31, Y+34	; 0x22
	UART.UART_transmitStr("To set the clock, enter a time in the format: \"hh:mm:ss\" and press the button.");
     a66:	88 e4       	ldi	r24, 0x48	; 72
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	19 95       	eicall
     a6c:	ff ef       	ldi	r31, 0xFF	; 255
     a6e:	23 ed       	ldi	r18, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a70:	80 e3       	ldi	r24, 0x30	; 48
     a72:	f1 50       	subi	r31, 0x01	; 1
     a74:	20 40       	sbci	r18, 0x00	; 0
     a76:	80 40       	sbci	r24, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <main+0x4c>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <main+0x56>
     a7c:	00 00       	nop
     a7e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <CLOCK+0x12>
	_delay_ms(1000);
    while (1){
		CLOCK.clock_makeTimeStr();
     a82:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <CLOCK+0x13>
     a86:	19 95       	eicall
     a88:	c0 e0       	ldi	r28, 0x00	; 0
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
		//UART.UART_transmitStr(CLOCK.timeStr);
		for(int i = 0; i < 8; i++){
     a8c:	12 c0       	rjmp	.+36     	; 0xab2 <main+0x8c>
     a8e:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <UART+0x1f>
			UART.UART_transmitChar('w');
     a92:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <UART+0x20>
     a96:	87 e7       	ldi	r24, 0x77	; 119
     a98:	19 95       	eicall
     a9a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <CLOCK+0x4>
			sendCharXY(CLOCK.timeStr[i], 0, i);
     a9e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <CLOCK+0x5>
     aa2:	ec 0f       	add	r30, r28
     aa4:	fd 1f       	adc	r31, r29
     aa6:	ae 01       	movw	r20, r28
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	a7 d0       	rcall	.+334    	; 0xbfe <sendCharXY>
     ab0:	21 96       	adiw	r28, 0x01	; 1
     ab2:	c8 30       	cpi	r28, 0x08	; 8
	UART.UART_transmitStr("To set the clock, enter a time in the format: \"hh:mm:ss\" and press the button.");
	_delay_ms(1000);
    while (1){
		CLOCK.clock_makeTimeStr();
		//UART.UART_transmitStr(CLOCK.timeStr);
		for(int i = 0; i < 8; i++){
     ab4:	d1 05       	cpc	r29, r1
     ab6:	5c f3       	brlt	.-42     	; 0xa8e <main+0x68>
     ab8:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
			UART.UART_transmitChar('w');
			sendCharXY(CLOCK.timeStr[i], 0, i);
		}
		if(gate1){
     abc:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__data_end+0x1>
     ac0:	89 2b       	or	r24, r25
     ac2:	59 f0       	breq	.+22     	; 0xada <main+0xb4>
     ac4:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <CLOCK+0x14>
			CLOCK.clock_updateClock(UART.timeVal);
     ac8:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <CLOCK+0x15>
     acc:	8d e2       	ldi	r24, 0x2D	; 45
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	19 95       	eicall
     ad2:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <__data_end+0x1>
			gate1 = 0;
     ad6:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <__data_end>
     ada:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <CLOCK+0x2>
		}
		if(CLOCK.interruptFlag){
     ade:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <CLOCK+0x3>
     ae2:	89 2b       	or	r24, r25
     ae4:	61 f2       	breq	.-104    	; 0xa7e <main+0x58>
     ae6:	77 d0       	rcall	.+238    	; 0xbd6 <clear_display>
			clear_display();
     ae8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <CLOCK+0x3>
			CLOCK.interruptFlag = 0;
     aec:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <CLOCK+0x2>
     af0:	c6 cf       	rjmp	.-116    	; 0xa7e <main+0x58>

00000af2 <__vector_5>:
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
		}
    }
}

ISR(INT4_vect){
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
	gate1 = 1;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <__data_end+0x1>
     b08:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <ssd1306_command>:

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
     b1a:	cf 93       	push	r28
     b1c:	c8 2f       	mov	r28, r24
     b1e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_i2c_address>
     b22:	35 df       	rcall	.-406    	; 0x98e <I2C_Start>
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	57 df       	rcall	.-338    	; 0x9d6 <I2C_Write>
     b28:	8c 2f       	mov	r24, r28
     b2a:	55 df       	rcall	.-342    	; 0x9d6 <I2C_Write>
     b2c:	6a df       	rcall	.-300    	; 0xa02 <I2C_Stop>
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <InitializeDisplay>:
     b32:	8e ea       	ldi	r24, 0xAE	; 174
     b34:	f2 df       	rcall	.-28     	; 0xb1a <ssd1306_command>
     b36:	85 ed       	ldi	r24, 0xD5	; 213
     b38:	f0 df       	rcall	.-32     	; 0xb1a <ssd1306_command>
     b3a:	80 e8       	ldi	r24, 0x80	; 128
     b3c:	ee df       	rcall	.-36     	; 0xb1a <ssd1306_command>
     b3e:	88 ea       	ldi	r24, 0xA8	; 168
     b40:	ec df       	rcall	.-40     	; 0xb1a <ssd1306_command>
     b42:	8f e3       	ldi	r24, 0x3F	; 63
     b44:	ea df       	rcall	.-44     	; 0xb1a <ssd1306_command>
     b46:	83 ed       	ldi	r24, 0xD3	; 211
     b48:	e8 df       	rcall	.-48     	; 0xb1a <ssd1306_command>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e6 df       	rcall	.-52     	; 0xb1a <ssd1306_command>
     b4e:	80 e4       	ldi	r24, 0x40	; 64
     b50:	e4 df       	rcall	.-56     	; 0xb1a <ssd1306_command>
     b52:	8d e8       	ldi	r24, 0x8D	; 141
     b54:	e2 df       	rcall	.-60     	; 0xb1a <ssd1306_command>
     b56:	84 e1       	ldi	r24, 0x14	; 20
     b58:	e0 df       	rcall	.-64     	; 0xb1a <ssd1306_command>
     b5a:	80 e2       	ldi	r24, 0x20	; 32
     b5c:	de df       	rcall	.-68     	; 0xb1a <ssd1306_command>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	dc df       	rcall	.-72     	; 0xb1a <ssd1306_command>
     b62:	81 ea       	ldi	r24, 0xA1	; 161
     b64:	da df       	rcall	.-76     	; 0xb1a <ssd1306_command>
     b66:	88 ec       	ldi	r24, 0xC8	; 200
     b68:	d8 df       	rcall	.-80     	; 0xb1a <ssd1306_command>
     b6a:	8a ed       	ldi	r24, 0xDA	; 218
     b6c:	d6 df       	rcall	.-84     	; 0xb1a <ssd1306_command>
     b6e:	82 e1       	ldi	r24, 0x12	; 18
     b70:	d4 df       	rcall	.-88     	; 0xb1a <ssd1306_command>
     b72:	81 e8       	ldi	r24, 0x81	; 129
     b74:	d2 df       	rcall	.-92     	; 0xb1a <ssd1306_command>
     b76:	8f ec       	ldi	r24, 0xCF	; 207
     b78:	d0 df       	rcall	.-96     	; 0xb1a <ssd1306_command>
     b7a:	89 ed       	ldi	r24, 0xD9	; 217
     b7c:	ce df       	rcall	.-100    	; 0xb1a <ssd1306_command>
     b7e:	81 ef       	ldi	r24, 0xF1	; 241
     b80:	cc df       	rcall	.-104    	; 0xb1a <ssd1306_command>
     b82:	8b ed       	ldi	r24, 0xDB	; 219
     b84:	ca df       	rcall	.-108    	; 0xb1a <ssd1306_command>
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	c8 df       	rcall	.-112    	; 0xb1a <ssd1306_command>
     b8a:	84 ea       	ldi	r24, 0xA4	; 164
     b8c:	c6 df       	rcall	.-116    	; 0xb1a <ssd1306_command>
     b8e:	86 ea       	ldi	r24, 0xA6	; 166
     b90:	c4 df       	rcall	.-120    	; 0xb1a <ssd1306_command>
     b92:	8f ea       	ldi	r24, 0xAF	; 175
     b94:	c2 cf       	rjmp	.-124    	; 0xb1a <ssd1306_command>
     b96:	08 95       	ret

00000b98 <SendChar>:
     b98:	cf 93       	push	r28
     b9a:	c8 2f       	mov	r28, r24
     b9c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_i2c_address>
     ba0:	f6 de       	rcall	.-532    	; 0x98e <I2C_Start>
     ba2:	80 e4       	ldi	r24, 0x40	; 64
     ba4:	18 df       	rcall	.-464    	; 0x9d6 <I2C_Write>
     ba6:	8c 2f       	mov	r24, r28
     ba8:	16 df       	rcall	.-468    	; 0x9d6 <I2C_Write>
     baa:	2b df       	rcall	.-426    	; 0xa02 <I2C_Stop>
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <setXY>:
     bb0:	cf 93       	push	r28
     bb2:	c6 2f       	mov	r28, r22
     bb4:	80 55       	subi	r24, 0x50	; 80
     bb6:	b1 df       	rcall	.-158    	; 0xb1a <ssd1306_command>
     bb8:	8c 2f       	mov	r24, r28
     bba:	88 0f       	add	r24, r24
     bbc:	88 0f       	add	r24, r24
     bbe:	88 0f       	add	r24, r24
     bc0:	88 70       	andi	r24, 0x08	; 8
     bc2:	ab df       	rcall	.-170    	; 0xb1a <ssd1306_command>
     bc4:	8c 2f       	mov	r24, r28
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	96 95       	lsr	r25
     bca:	87 95       	ror	r24
     bcc:	8f 70       	andi	r24, 0x0F	; 15
     bce:	80 5f       	subi	r24, 0xF0	; 240
     bd0:	a4 df       	rcall	.-184    	; 0xb1a <ssd1306_command>
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <clear_display>:
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	d0 e0       	ldi	r29, 0x00	; 0
     bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <clear_display+0x1e>
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	8d 2f       	mov	r24, r29
     be2:	e6 df       	rcall	.-52     	; 0xbb0 <setXY>
     be4:	c0 e0       	ldi	r28, 0x00	; 0
     be6:	03 c0       	rjmp	.+6      	; 0xbee <clear_display+0x18>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	d6 df       	rcall	.-84     	; 0xb98 <SendChar>
     bec:	cf 5f       	subi	r28, 0xFF	; 255
     bee:	cc 23       	and	r28, r28
     bf0:	dc f7       	brge	.-10     	; 0xbe8 <clear_display+0x12>
     bf2:	df 5f       	subi	r29, 0xFF	; 255
     bf4:	d8 30       	cpi	r29, 0x08	; 8
     bf6:	98 f3       	brcs	.-26     	; 0xbde <clear_display+0x8>
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <sendCharXY>:
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	18 2f       	mov	r17, r24
     c06:	86 2f       	mov	r24, r22
     c08:	64 2f       	mov	r22, r20
     c0a:	d2 df       	rcall	.-92     	; 0xbb0 <setXY>
     c0c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_i2c_address>
     c10:	be de       	rcall	.-644    	; 0x98e <I2C_Start>
     c12:	80 e4       	ldi	r24, 0x40	; 64
     c14:	e0 de       	rcall	.-576    	; 0x9d6 <I2C_Write>
     c16:	c0 e0       	ldi	r28, 0x00	; 0
     c18:	d0 e0       	ldi	r29, 0x00	; 0
     c1a:	10 c0       	rjmp	.+32     	; 0xc3c <sendCharXY+0x3e>
     c1c:	e1 2f       	mov	r30, r17
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	b0 97       	sbiw	r30, 0x20	; 32
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	ec 51       	subi	r30, 0x1C	; 28
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	ec 0f       	add	r30, r28
     c34:	fd 1f       	adc	r31, r29
     c36:	84 91       	lpm	r24, Z
     c38:	ce de       	rcall	.-612    	; 0x9d6 <I2C_Write>
     c3a:	21 96       	adiw	r28, 0x01	; 1
     c3c:	c8 30       	cpi	r28, 0x08	; 8
     c3e:	d1 05       	cpc	r29, r1
     c40:	6c f3       	brlt	.-38     	; 0xc1c <sendCharXY+0x1e>
     c42:	df de       	rcall	.-578    	; 0xa02 <I2C_Stop>
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	08 95       	ret

00000c4c <print_fonts>:
void print_fonts(){
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
	clear_display();
     c5a:	bd df       	rcall	.-134    	; 0xbd6 <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
     c5c:	e1 2c       	mov	r14, r1
     c5e:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
     c60:	68 94       	set
     c62:	dd 24       	eor	r13, r13
     c64:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
     c66:	27 c0       	rjmp	.+78     	; 0xcb6 <print_fonts+0x6a>
		setXY(k,0);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	8e 2d       	mov	r24, r14
     c6c:	a1 df       	rcall	.-190    	; 0xbb0 <setXY>

		for (int j=0;j<16;j++)
     c6e:	00 e0       	ldi	r16, 0x00	; 0
     c70:	10 e0       	ldi	r17, 0x00	; 0
     c72:	19 c0       	rjmp	.+50     	; 0xca6 <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
     c74:	f8 01       	movw	r30, r16
     c76:	ed 0d       	add	r30, r13
     c78:	f1 1d       	adc	r31, r1
     c7a:	b0 97       	sbiw	r30, 0x20	; 32
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	ec 51       	subi	r30, 0x1C	; 28
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	ec 0f       	add	r30, r28
     c8e:	fd 1f       	adc	r31, r29
     c90:	84 91       	lpm	r24, Z
     c92:	82 df       	rcall	.-252    	; 0xb98 <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
     c94:	21 96       	adiw	r28, 0x01	; 1
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <print_fonts+0x50>
     c98:	c0 e0       	ldi	r28, 0x00	; 0
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
     c9c:	c8 30       	cpi	r28, 0x08	; 8
     c9e:	d1 05       	cpc	r29, r1
     ca0:	4c f3       	brlt	.-46     	; 0xc74 <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
     ca2:	0f 5f       	subi	r16, 0xFF	; 255
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	00 31       	cpi	r16, 0x10	; 16
     ca8:	11 05       	cpc	r17, r1
     caa:	b4 f3       	brlt	.-20     	; 0xc98 <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
     cac:	80 e1       	ldi	r24, 0x10	; 16
     cae:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	e8 1a       	sub	r14, r24
     cb4:	f8 0a       	sbc	r15, r24
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	e8 16       	cp	r14, r24
     cba:	f1 04       	cpc	r15, r1
     cbc:	ac f2       	brlt	.-86     	; 0xc68 <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	08 95       	ret

00000cce <UART_receiveChar0>:
	if(transmitionData & 0x0100){
		UCSR3B |= (1<<TXB83);
	}
	UDR3 = transmitionData;
	return 1;
};
     cce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     cd2:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <UART+0x1c>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	08 95       	ret

00000cdc <UART_receiveChar1>:
     cdc:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     ce0:	ed e1       	ldi	r30, 0x1D	; 29
     ce2:	f2 e0       	ldi	r31, 0x02	; 2
     ce4:	82 8f       	std	Z+26, r24	; 0x1a
     ce6:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     cea:	93 8f       	std	Z+27, r25	; 0x1b
     cec:	86 95       	lsr	r24
     cee:	81 70       	andi	r24, 0x01	; 1
     cf0:	82 8f       	std	Z+26, r24	; 0x1a
     cf2:	94 8f       	std	Z+28, r25	; 0x1c
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	08 95       	ret

00000cfa <UART_receiveChar2>:
     cfa:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
     cfe:	ed e1       	ldi	r30, 0x1D	; 29
     d00:	f2 e0       	ldi	r31, 0x02	; 2
     d02:	82 8f       	std	Z+26, r24	; 0x1a
     d04:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     d08:	93 8f       	std	Z+27, r25	; 0x1b
     d0a:	86 95       	lsr	r24
     d0c:	81 70       	andi	r24, 0x01	; 1
     d0e:	82 8f       	std	Z+26, r24	; 0x1a
     d10:	94 8f       	std	Z+28, r25	; 0x1c
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	08 95       	ret

00000d18 <UART_receiveChar3>:
     d18:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
     d1c:	ed e1       	ldi	r30, 0x1D	; 29
     d1e:	f2 e0       	ldi	r31, 0x02	; 2
     d20:	82 8f       	std	Z+26, r24	; 0x1a
     d22:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
     d26:	93 8f       	std	Z+27, r25	; 0x1b
     d28:	86 95       	lsr	r24
     d2a:	81 70       	andi	r24, 0x01	; 1
     d2c:	82 8f       	std	Z+26, r24	; 0x1a
     d2e:	94 8f       	std	Z+28, r25	; 0x1c
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	08 95       	ret

00000d36 <UART_initASYNC0>:
     d36:	82 95       	swap	r24
     d38:	92 95       	swap	r25
     d3a:	90 7f       	andi	r25, 0xF0	; 240
     d3c:	98 27       	eor	r25, r24
     d3e:	80 7f       	andi	r24, 0xF0	; 240
     d40:	98 27       	eor	r25, r24
     d42:	9c 01       	movw	r18, r24
     d44:	99 0f       	add	r25, r25
     d46:	44 0b       	sbc	r20, r20
     d48:	55 0b       	sbc	r21, r21
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	74 e2       	ldi	r23, 0x24	; 36
     d4e:	84 ef       	ldi	r24, 0xF4	; 244
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 d1       	rcall	.+800    	; 0x1074 <__udivmodsi4>
     d54:	c9 01       	movw	r24, r18
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <UART+0x1>
     d5c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <UART>
     d60:	da 01       	movw	r26, r20
     d62:	c9 01       	movw	r24, r18
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	a1 09       	sbc	r26, r1
     d68:	b1 09       	sbc	r27, r1
     d6a:	89 2f       	mov	r24, r25
     d6c:	9a 2f       	mov	r25, r26
     d6e:	ab 2f       	mov	r26, r27
     d70:	bb 27       	eor	r27, r27
     d72:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
     d76:	21 50       	subi	r18, 0x01	; 1
     d78:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
     d7c:	e1 ec       	ldi	r30, 0xC1	; 193
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 6d       	ori	r24, 0xD8	; 216
     d84:	80 83       	st	Z, r24
     d86:	e2 ec       	ldi	r30, 0xC2	; 194
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	86 60       	ori	r24, 0x06	; 6
     d8e:	80 83       	st	Z, r24
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	08 95       	ret

00000d96 <UART_init>:
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	44 30       	cpi	r20, 0x04	; 4
     d9c:	51 05       	cpc	r21, r1
     d9e:	74 f4       	brge	.+28     	; 0xdbc <UART_init+0x26>
     da0:	cb 01       	movw	r24, r22
     da2:	78 94       	sei
     da4:	cd e1       	ldi	r28, 0x1D	; 29
     da6:	d2 e0       	ldi	r29, 0x02	; 2
     da8:	5b 83       	std	Y+3, r21	; 0x03
     daa:	4a 83       	std	Y+2, r20	; 0x02
     dac:	c4 df       	rcall	.-120    	; 0xd36 <UART_initASYNC0>
     dae:	1d 82       	std	Y+5, r1	; 0x05
     db0:	1c 82       	std	Y+4, r1	; 0x04
     db2:	18 8a       	std	Y+16, r1	; 0x10
     db4:	1e 82       	std	Y+6, r1	; 0x06
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <UART_init+0x2a>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <UART_transmitChar0>:
     dc6:	81 e3       	ldi	r24, 0x31	; 49
     dc8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     dcc:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <gate>
     dd0:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <gate+0x1>
     dd4:	89 2b       	or	r24, r25
     dd6:	49 f4       	brne	.+18     	; 0xdea <UART_transmitChar0+0x24>
     dd8:	81 e3       	ldi	r24, 0x31	; 49
     dda:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <gate+0x1>
     de6:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <gate>
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	08 95       	ret

00000df0 <UART_transmitChar>:
     df0:	83 e7       	ldi	r24, 0x73	; 115
     df2:	e9 df       	rcall	.-46     	; 0xdc6 <UART_transmitChar0>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	08 95       	ret

00000dfa <UART_transmitStr>:
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	8c 01       	movw	r16, r24
     e04:	c0 e0       	ldi	r28, 0x00	; 0
     e06:	d0 e0       	ldi	r29, 0x00	; 0
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <UART_transmitStr+0x14>
     e0a:	f2 df       	rcall	.-28     	; 0xdf0 <UART_transmitChar>
     e0c:	21 96       	adiw	r28, 0x01	; 1
     e0e:	f8 01       	movw	r30, r16
     e10:	ec 0f       	add	r30, r28
     e12:	fd 1f       	adc	r31, r29
     e14:	80 81       	ld	r24, Z
     e16:	81 11       	cpse	r24, r1
     e18:	f8 cf       	rjmp	.-16     	; 0xe0a <UART_transmitStr+0x10>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret

00000e28 <UART_receiveChar>:
	UART.RXh = (UART.RXh >> 1) & 0x01;
	UART.RX = ((UART.RXh << 8) | UART.RXl);
	return 1;
}

int UART_receiveChar(){
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	28 97       	sbiw	r28, 0x08	; 8
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
	int(*UART_receiveCharFuncs[4])() = {UART_receiveChar0, UART_receiveChar1, UART_receiveChar2, UART_receiveChar3};
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	e0 e4       	ldi	r30, 0x40	; 64
     e44:	f2 e0       	ldi	r31, 0x02	; 2
     e46:	de 01       	movw	r26, r28
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	01 90       	ld	r0, Z+
     e4c:	0d 92       	st	X+, r0
     e4e:	8a 95       	dec	r24
     e50:	e1 f7       	brne	.-8      	; 0xe4a <UART_receiveChar+0x22>
	(*UART_receiveCharFuncs[UART.UARTReg])();
     e52:	0d e1       	ldi	r16, 0x1D	; 29
     e54:	12 e0       	ldi	r17, 0x02	; 2
     e56:	d8 01       	movw	r26, r16
     e58:	12 96       	adiw	r26, 0x02	; 2
     e5a:	ed 91       	ld	r30, X+
     e5c:	fc 91       	ld	r31, X
     e5e:	13 97       	sbiw	r26, 0x03	; 3
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	8c 0f       	add	r24, r28
     e6a:	9d 1f       	adc	r25, r29
     e6c:	e8 0f       	add	r30, r24
     e6e:	f9 1f       	adc	r31, r25
     e70:	01 90       	ld	r0, Z+
     e72:	f0 81       	ld	r31, Z
     e74:	e0 2d       	mov	r30, r0
     e76:	19 95       	eicall
	UART.buffer[UART.bufferIndex] = UART.RX;
     e78:	d8 01       	movw	r26, r16
     e7a:	14 96       	adiw	r26, 0x04	; 4
     e7c:	8d 91       	ld	r24, X+
     e7e:	9c 91       	ld	r25, X
     e80:	15 97       	sbiw	r26, 0x05	; 5
     e82:	5c 96       	adiw	r26, 0x1c	; 28
     e84:	2c 91       	ld	r18, X
     e86:	fc 01       	movw	r30, r24
     e88:	e3 5e       	subi	r30, 0xE3	; 227
     e8a:	fd 4f       	sbci	r31, 0xFD	; 253
     e8c:	26 83       	std	Z+6, r18	; 0x06
	if(UART.bufferIndex == 10){
     e8e:	0a 97       	sbiw	r24, 0x0a	; 10
     e90:	59 f4       	brne	.+22     	; 0xea8 <UART_receiveChar+0x80>
		strncpy(UART.timeVal, UART.buffer, 10);
     e92:	4a e0       	ldi	r20, 0x0A	; 10
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	63 e2       	ldi	r22, 0x23	; 35
     e98:	72 e0       	ldi	r23, 0x02	; 2
     e9a:	8d e2       	ldi	r24, 0x2D	; 45
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	7f d2       	rcall	.+1278   	; 0x139e <strncpy>
		UART.bufferIndex = 0;
     ea0:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <UART+0x5>
     ea4:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <UART+0x4>
	}

	return 1;
}
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	28 96       	adiw	r28, 0x08	; 8
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <__vector_25>:
	.UART_init = UART_init,
	.UART_transmitChar = UART_transmitChar,
	.UART_transmitStr = UART_transmitStr
};

ISR(USART0_RX_vect){
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	11 24       	eor	r1, r1
     ecc:	0b b6       	in	r0, 0x3b	; 59
     ece:	0f 92       	push	r0
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
	UART_receiveChar();
     ee8:	9f df       	rcall	.-194    	; 0xe28 <UART_receiveChar>
	UART.bufferIndex += 1;
     eea:	ed e1       	ldi	r30, 0x1D	; 29
     eec:	f2 e0       	ldi	r31, 0x02	; 2
     eee:	84 81       	ldd	r24, Z+4	; 0x04
     ef0:	95 81       	ldd	r25, Z+5	; 0x05
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	95 83       	std	Z+5, r25	; 0x05
     ef6:	84 83       	std	Z+4, r24	; 0x04
};
     ef8:	ff 91       	pop	r31
     efa:	ef 91       	pop	r30
     efc:	bf 91       	pop	r27
     efe:	af 91       	pop	r26
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	7f 91       	pop	r23
     f06:	6f 91       	pop	r22
     f08:	5f 91       	pop	r21
     f0a:	4f 91       	pop	r20
     f0c:	3f 91       	pop	r19
     f0e:	2f 91       	pop	r18
     f10:	0f 90       	pop	r0
     f12:	0b be       	out	0x3b, r0	; 59
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_36>:

ISR(USART1_RX_vect){
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	0b b6       	in	r0, 0x3b	; 59
     f2a:	0f 92       	push	r0
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
	UART_receiveChar();
     f44:	71 df       	rcall	.-286    	; 0xe28 <UART_receiveChar>
	UART.bufferIndex += 1;
     f46:	ed e1       	ldi	r30, 0x1D	; 29
     f48:	f2 e0       	ldi	r31, 0x02	; 2
     f4a:	84 81       	ldd	r24, Z+4	; 0x04
     f4c:	95 81       	ldd	r25, Z+5	; 0x05
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	95 83       	std	Z+5, r25	; 0x05
     f52:	84 83       	std	Z+4, r24	; 0x04
};
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_51>:

ISR(USART2_RX_vect){
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	0b b6       	in	r0, 0x3b	; 59
     f86:	0f 92       	push	r0
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
	UART_receiveChar();
     fa0:	43 df       	rcall	.-378    	; 0xe28 <UART_receiveChar>
	UART.bufferIndex += 1;
     fa2:	ed e1       	ldi	r30, 0x1D	; 29
     fa4:	f2 e0       	ldi	r31, 0x02	; 2
     fa6:	84 81       	ldd	r24, Z+4	; 0x04
     fa8:	95 81       	ldd	r25, Z+5	; 0x05
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	95 83       	std	Z+5, r25	; 0x05
     fae:	84 83       	std	Z+4, r24	; 0x04
};
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_54>:

ISR(USART3_RX_vect){
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	0b b6       	in	r0, 0x3b	; 59
     fe2:	0f 92       	push	r0
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	UART_receiveChar();
     ffc:	15 df       	rcall	.-470    	; 0xe28 <UART_receiveChar>
	UART.bufferIndex += 1;
     ffe:	ed e1       	ldi	r30, 0x1D	; 29
    1000:	f2 e0       	ldi	r31, 0x02	; 2
    1002:	84 81       	ldd	r24, Z+4	; 0x04
    1004:	95 81       	ldd	r25, Z+5	; 0x05
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	95 83       	std	Z+5, r25	; 0x05
    100a:	84 83       	std	Z+4, r24	; 0x04
};
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0b be       	out	0x3b, r0	; 59
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <__vector_27>:

ISR(USART0_TX_vect){
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
	gate = 0;
    103c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <gate+0x1>
    1040:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <gate>
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__divmodhi4>:
    104e:	97 fb       	bst	r25, 7
    1050:	07 2e       	mov	r0, r23
    1052:	16 f4       	brtc	.+4      	; 0x1058 <__divmodhi4+0xa>
    1054:	00 94       	com	r0
    1056:	06 d0       	rcall	.+12     	; 0x1064 <__divmodhi4_neg1>
    1058:	77 fd       	sbrc	r23, 7
    105a:	08 d0       	rcall	.+16     	; 0x106c <__divmodhi4_neg2>
    105c:	2d d0       	rcall	.+90     	; 0x10b8 <__udivmodhi4>
    105e:	07 fc       	sbrc	r0, 7
    1060:	05 d0       	rcall	.+10     	; 0x106c <__divmodhi4_neg2>
    1062:	3e f4       	brtc	.+14     	; 0x1072 <__divmodhi4_exit>

00001064 <__divmodhi4_neg1>:
    1064:	90 95       	com	r25
    1066:	81 95       	neg	r24
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	08 95       	ret

0000106c <__divmodhi4_neg2>:
    106c:	70 95       	com	r23
    106e:	61 95       	neg	r22
    1070:	7f 4f       	sbci	r23, 0xFF	; 255

00001072 <__divmodhi4_exit>:
    1072:	08 95       	ret

00001074 <__udivmodsi4>:
    1074:	a1 e2       	ldi	r26, 0x21	; 33
    1076:	1a 2e       	mov	r1, r26
    1078:	aa 1b       	sub	r26, r26
    107a:	bb 1b       	sub	r27, r27
    107c:	fd 01       	movw	r30, r26
    107e:	0d c0       	rjmp	.+26     	; 0x109a <__udivmodsi4_ep>

00001080 <__udivmodsi4_loop>:
    1080:	aa 1f       	adc	r26, r26
    1082:	bb 1f       	adc	r27, r27
    1084:	ee 1f       	adc	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	a2 17       	cp	r26, r18
    108a:	b3 07       	cpc	r27, r19
    108c:	e4 07       	cpc	r30, r20
    108e:	f5 07       	cpc	r31, r21
    1090:	20 f0       	brcs	.+8      	; 0x109a <__udivmodsi4_ep>
    1092:	a2 1b       	sub	r26, r18
    1094:	b3 0b       	sbc	r27, r19
    1096:	e4 0b       	sbc	r30, r20
    1098:	f5 0b       	sbc	r31, r21

0000109a <__udivmodsi4_ep>:
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	1a 94       	dec	r1
    10a4:	69 f7       	brne	.-38     	; 0x1080 <__udivmodsi4_loop>
    10a6:	60 95       	com	r22
    10a8:	70 95       	com	r23
    10aa:	80 95       	com	r24
    10ac:	90 95       	com	r25
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	bd 01       	movw	r22, r26
    10b4:	cf 01       	movw	r24, r30
    10b6:	08 95       	ret

000010b8 <__udivmodhi4>:
    10b8:	aa 1b       	sub	r26, r26
    10ba:	bb 1b       	sub	r27, r27
    10bc:	51 e1       	ldi	r21, 0x11	; 17
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <__udivmodhi4_ep>

000010c0 <__udivmodhi4_loop>:
    10c0:	aa 1f       	adc	r26, r26
    10c2:	bb 1f       	adc	r27, r27
    10c4:	a6 17       	cp	r26, r22
    10c6:	b7 07       	cpc	r27, r23
    10c8:	10 f0       	brcs	.+4      	; 0x10ce <__udivmodhi4_ep>
    10ca:	a6 1b       	sub	r26, r22
    10cc:	b7 0b       	sbc	r27, r23

000010ce <__udivmodhi4_ep>:
    10ce:	88 1f       	adc	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	5a 95       	dec	r21
    10d4:	a9 f7       	brne	.-22     	; 0x10c0 <__udivmodhi4_loop>
    10d6:	80 95       	com	r24
    10d8:	90 95       	com	r25
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	08 95       	ret

000010e0 <calloc>:
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	86 9f       	mul	r24, r22
    10ea:	80 01       	movw	r16, r0
    10ec:	87 9f       	mul	r24, r23
    10ee:	10 0d       	add	r17, r0
    10f0:	96 9f       	mul	r25, r22
    10f2:	10 0d       	add	r17, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	c8 01       	movw	r24, r16
    10f8:	0d d0       	rcall	.+26     	; 0x1114 <malloc>
    10fa:	ec 01       	movw	r28, r24
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	21 f0       	breq	.+8      	; 0x1108 <calloc+0x28>
    1100:	a8 01       	movw	r20, r16
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	44 d1       	rcall	.+648    	; 0x1390 <memset>
    1108:	ce 01       	movw	r24, r28
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <malloc>:
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	91 05       	cpc	r25, r1
    1120:	10 f4       	brcc	.+4      	; 0x1126 <malloc+0x12>
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <__flp>
    112a:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <__flp+0x1>
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	a0 e0       	ldi	r26, 0x00	; 0
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	30 97       	sbiw	r30, 0x00	; 0
    1138:	19 f1       	breq	.+70     	; 0x1180 <malloc+0x6c>
    113a:	40 81       	ld	r20, Z
    113c:	51 81       	ldd	r21, Z+1	; 0x01
    113e:	02 81       	ldd	r16, Z+2	; 0x02
    1140:	13 81       	ldd	r17, Z+3	; 0x03
    1142:	48 17       	cp	r20, r24
    1144:	59 07       	cpc	r21, r25
    1146:	c8 f0       	brcs	.+50     	; 0x117a <malloc+0x66>
    1148:	84 17       	cp	r24, r20
    114a:	95 07       	cpc	r25, r21
    114c:	69 f4       	brne	.+26     	; 0x1168 <malloc+0x54>
    114e:	10 97       	sbiw	r26, 0x00	; 0
    1150:	31 f0       	breq	.+12     	; 0x115e <malloc+0x4a>
    1152:	12 96       	adiw	r26, 0x02	; 2
    1154:	0c 93       	st	X, r16
    1156:	12 97       	sbiw	r26, 0x02	; 2
    1158:	13 96       	adiw	r26, 0x03	; 3
    115a:	1c 93       	st	X, r17
    115c:	27 c0       	rjmp	.+78     	; 0x11ac <malloc+0x98>
    115e:	00 93 9e 02 	sts	0x029E, r16	; 0x80029e <__flp>
    1162:	10 93 9f 02 	sts	0x029F, r17	; 0x80029f <__flp+0x1>
    1166:	22 c0       	rjmp	.+68     	; 0x11ac <malloc+0x98>
    1168:	21 15       	cp	r18, r1
    116a:	31 05       	cpc	r19, r1
    116c:	19 f0       	breq	.+6      	; 0x1174 <malloc+0x60>
    116e:	42 17       	cp	r20, r18
    1170:	53 07       	cpc	r21, r19
    1172:	18 f4       	brcc	.+6      	; 0x117a <malloc+0x66>
    1174:	9a 01       	movw	r18, r20
    1176:	bd 01       	movw	r22, r26
    1178:	ef 01       	movw	r28, r30
    117a:	df 01       	movw	r26, r30
    117c:	f8 01       	movw	r30, r16
    117e:	db cf       	rjmp	.-74     	; 0x1136 <malloc+0x22>
    1180:	21 15       	cp	r18, r1
    1182:	31 05       	cpc	r19, r1
    1184:	f9 f0       	breq	.+62     	; 0x11c4 <malloc+0xb0>
    1186:	28 1b       	sub	r18, r24
    1188:	39 0b       	sbc	r19, r25
    118a:	24 30       	cpi	r18, 0x04	; 4
    118c:	31 05       	cpc	r19, r1
    118e:	80 f4       	brcc	.+32     	; 0x11b0 <malloc+0x9c>
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	61 15       	cp	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	21 f0       	breq	.+8      	; 0x11a2 <malloc+0x8e>
    119a:	fb 01       	movw	r30, r22
    119c:	93 83       	std	Z+3, r25	; 0x03
    119e:	82 83       	std	Z+2, r24	; 0x02
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <malloc+0x96>
    11a2:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__flp+0x1>
    11a6:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__flp>
    11aa:	fe 01       	movw	r30, r28
    11ac:	32 96       	adiw	r30, 0x02	; 2
    11ae:	44 c0       	rjmp	.+136    	; 0x1238 <malloc+0x124>
    11b0:	fe 01       	movw	r30, r28
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	81 93       	st	Z+, r24
    11b8:	91 93       	st	Z+, r25
    11ba:	22 50       	subi	r18, 0x02	; 2
    11bc:	31 09       	sbc	r19, r1
    11be:	39 83       	std	Y+1, r19	; 0x01
    11c0:	28 83       	st	Y, r18
    11c2:	3a c0       	rjmp	.+116    	; 0x1238 <malloc+0x124>
    11c4:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <__brkval>
    11c8:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <__brkval+0x1>
    11cc:	23 2b       	or	r18, r19
    11ce:	41 f4       	brne	.+16     	; 0x11e0 <malloc+0xcc>
    11d0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    11d4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    11d8:	30 93 9d 02 	sts	0x029D, r19	; 0x80029d <__brkval+0x1>
    11dc:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <__brkval>
    11e0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    11e4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	41 f4       	brne	.+16     	; 0x11fe <malloc+0xea>
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    11f6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    11fa:	24 1b       	sub	r18, r20
    11fc:	35 0b       	sbc	r19, r21
    11fe:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__brkval>
    1202:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <__brkval+0x1>
    1206:	e2 17       	cp	r30, r18
    1208:	f3 07       	cpc	r31, r19
    120a:	a0 f4       	brcc	.+40     	; 0x1234 <malloc+0x120>
    120c:	2e 1b       	sub	r18, r30
    120e:	3f 0b       	sbc	r19, r31
    1210:	28 17       	cp	r18, r24
    1212:	39 07       	cpc	r19, r25
    1214:	78 f0       	brcs	.+30     	; 0x1234 <malloc+0x120>
    1216:	ac 01       	movw	r20, r24
    1218:	4e 5f       	subi	r20, 0xFE	; 254
    121a:	5f 4f       	sbci	r21, 0xFF	; 255
    121c:	24 17       	cp	r18, r20
    121e:	35 07       	cpc	r19, r21
    1220:	48 f0       	brcs	.+18     	; 0x1234 <malloc+0x120>
    1222:	4e 0f       	add	r20, r30
    1224:	5f 1f       	adc	r21, r31
    1226:	50 93 9d 02 	sts	0x029D, r21	; 0x80029d <__brkval+0x1>
    122a:	40 93 9c 02 	sts	0x029C, r20	; 0x80029c <__brkval>
    122e:	81 93       	st	Z+, r24
    1230:	91 93       	st	Z+, r25
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <malloc+0x124>
    1234:	e0 e0       	ldi	r30, 0x00	; 0
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	cf 01       	movw	r24, r30
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	08 95       	ret

00001244 <free>:
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	09 f4       	brne	.+2      	; 0x124e <free+0xa>
    124c:	81 c0       	rjmp	.+258    	; 0x1350 <free+0x10c>
    124e:	fc 01       	movw	r30, r24
    1250:	32 97       	sbiw	r30, 0x02	; 2
    1252:	13 82       	std	Z+3, r1	; 0x03
    1254:	12 82       	std	Z+2, r1	; 0x02
    1256:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <__flp>
    125a:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <__flp+0x1>
    125e:	10 97       	sbiw	r26, 0x00	; 0
    1260:	81 f4       	brne	.+32     	; 0x1282 <free+0x3e>
    1262:	20 81       	ld	r18, Z
    1264:	31 81       	ldd	r19, Z+1	; 0x01
    1266:	82 0f       	add	r24, r18
    1268:	93 1f       	adc	r25, r19
    126a:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <__brkval>
    126e:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <__brkval+0x1>
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	51 f5       	brne	.+84     	; 0x12cc <free+0x88>
    1278:	f0 93 9d 02 	sts	0x029D, r31	; 0x80029d <__brkval+0x1>
    127c:	e0 93 9c 02 	sts	0x029C, r30	; 0x80029c <__brkval>
    1280:	67 c0       	rjmp	.+206    	; 0x1350 <free+0x10c>
    1282:	ed 01       	movw	r28, r26
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	ce 17       	cp	r28, r30
    128a:	df 07       	cpc	r29, r31
    128c:	40 f4       	brcc	.+16     	; 0x129e <free+0x5a>
    128e:	4a 81       	ldd	r20, Y+2	; 0x02
    1290:	5b 81       	ldd	r21, Y+3	; 0x03
    1292:	9e 01       	movw	r18, r28
    1294:	41 15       	cp	r20, r1
    1296:	51 05       	cpc	r21, r1
    1298:	f1 f0       	breq	.+60     	; 0x12d6 <free+0x92>
    129a:	ea 01       	movw	r28, r20
    129c:	f5 cf       	rjmp	.-22     	; 0x1288 <free+0x44>
    129e:	d3 83       	std	Z+3, r29	; 0x03
    12a0:	c2 83       	std	Z+2, r28	; 0x02
    12a2:	40 81       	ld	r20, Z
    12a4:	51 81       	ldd	r21, Z+1	; 0x01
    12a6:	84 0f       	add	r24, r20
    12a8:	95 1f       	adc	r25, r21
    12aa:	c8 17       	cp	r28, r24
    12ac:	d9 07       	cpc	r29, r25
    12ae:	59 f4       	brne	.+22     	; 0x12c6 <free+0x82>
    12b0:	88 81       	ld	r24, Y
    12b2:	99 81       	ldd	r25, Y+1	; 0x01
    12b4:	84 0f       	add	r24, r20
    12b6:	95 1f       	adc	r25, r21
    12b8:	02 96       	adiw	r24, 0x02	; 2
    12ba:	91 83       	std	Z+1, r25	; 0x01
    12bc:	80 83       	st	Z, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	9b 81       	ldd	r25, Y+3	; 0x03
    12c2:	93 83       	std	Z+3, r25	; 0x03
    12c4:	82 83       	std	Z+2, r24	; 0x02
    12c6:	21 15       	cp	r18, r1
    12c8:	31 05       	cpc	r19, r1
    12ca:	29 f4       	brne	.+10     	; 0x12d6 <free+0x92>
    12cc:	f0 93 9f 02 	sts	0x029F, r31	; 0x80029f <__flp+0x1>
    12d0:	e0 93 9e 02 	sts	0x029E, r30	; 0x80029e <__flp>
    12d4:	3d c0       	rjmp	.+122    	; 0x1350 <free+0x10c>
    12d6:	e9 01       	movw	r28, r18
    12d8:	fb 83       	std	Y+3, r31	; 0x03
    12da:	ea 83       	std	Y+2, r30	; 0x02
    12dc:	49 91       	ld	r20, Y+
    12de:	59 91       	ld	r21, Y+
    12e0:	c4 0f       	add	r28, r20
    12e2:	d5 1f       	adc	r29, r21
    12e4:	ec 17       	cp	r30, r28
    12e6:	fd 07       	cpc	r31, r29
    12e8:	61 f4       	brne	.+24     	; 0x1302 <free+0xbe>
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	84 0f       	add	r24, r20
    12f0:	95 1f       	adc	r25, r21
    12f2:	02 96       	adiw	r24, 0x02	; 2
    12f4:	e9 01       	movw	r28, r18
    12f6:	99 83       	std	Y+1, r25	; 0x01
    12f8:	88 83       	st	Y, r24
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
    12fe:	9b 83       	std	Y+3, r25	; 0x03
    1300:	8a 83       	std	Y+2, r24	; 0x02
    1302:	e0 e0       	ldi	r30, 0x00	; 0
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	19 f0       	breq	.+6      	; 0x1318 <free+0xd4>
    1312:	fd 01       	movw	r30, r26
    1314:	dc 01       	movw	r26, r24
    1316:	f7 cf       	rjmp	.-18     	; 0x1306 <free+0xc2>
    1318:	8d 91       	ld	r24, X+
    131a:	9c 91       	ld	r25, X
    131c:	11 97       	sbiw	r26, 0x01	; 1
    131e:	9d 01       	movw	r18, r26
    1320:	2e 5f       	subi	r18, 0xFE	; 254
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	82 0f       	add	r24, r18
    1326:	93 1f       	adc	r25, r19
    1328:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <__brkval>
    132c:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <__brkval+0x1>
    1330:	28 17       	cp	r18, r24
    1332:	39 07       	cpc	r19, r25
    1334:	69 f4       	brne	.+26     	; 0x1350 <free+0x10c>
    1336:	30 97       	sbiw	r30, 0x00	; 0
    1338:	29 f4       	brne	.+10     	; 0x1344 <free+0x100>
    133a:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__flp+0x1>
    133e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__flp>
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <free+0x104>
    1344:	13 82       	std	Z+3, r1	; 0x03
    1346:	12 82       	std	Z+2, r1	; 0x02
    1348:	b0 93 9d 02 	sts	0x029D, r27	; 0x80029d <__brkval+0x1>
    134c:	a0 93 9c 02 	sts	0x029C, r26	; 0x80029c <__brkval>
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <atoi>:
    1356:	fc 01       	movw	r30, r24
    1358:	88 27       	eor	r24, r24
    135a:	99 27       	eor	r25, r25
    135c:	e8 94       	clt
    135e:	21 91       	ld	r18, Z+
    1360:	20 32       	cpi	r18, 0x20	; 32
    1362:	e9 f3       	breq	.-6      	; 0x135e <atoi+0x8>
    1364:	29 30       	cpi	r18, 0x09	; 9
    1366:	10 f0       	brcs	.+4      	; 0x136c <atoi+0x16>
    1368:	2e 30       	cpi	r18, 0x0E	; 14
    136a:	c8 f3       	brcs	.-14     	; 0x135e <atoi+0x8>
    136c:	2b 32       	cpi	r18, 0x2B	; 43
    136e:	39 f0       	breq	.+14     	; 0x137e <atoi+0x28>
    1370:	2d 32       	cpi	r18, 0x2D	; 45
    1372:	31 f4       	brne	.+12     	; 0x1380 <atoi+0x2a>
    1374:	68 94       	set
    1376:	03 c0       	rjmp	.+6      	; 0x137e <atoi+0x28>
    1378:	21 d0       	rcall	.+66     	; 0x13bc <__mulhi_const_10>
    137a:	82 0f       	add	r24, r18
    137c:	91 1d       	adc	r25, r1
    137e:	21 91       	ld	r18, Z+
    1380:	20 53       	subi	r18, 0x30	; 48
    1382:	2a 30       	cpi	r18, 0x0A	; 10
    1384:	c8 f3       	brcs	.-14     	; 0x1378 <atoi+0x22>
    1386:	1e f4       	brtc	.+6      	; 0x138e <atoi+0x38>
    1388:	90 95       	com	r25
    138a:	81 95       	neg	r24
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	08 95       	ret

00001390 <memset>:
    1390:	dc 01       	movw	r26, r24
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <memset+0x6>
    1394:	6d 93       	st	X+, r22
    1396:	41 50       	subi	r20, 0x01	; 1
    1398:	50 40       	sbci	r21, 0x00	; 0
    139a:	e0 f7       	brcc	.-8      	; 0x1394 <memset+0x4>
    139c:	08 95       	ret

0000139e <strncpy>:
    139e:	fb 01       	movw	r30, r22
    13a0:	dc 01       	movw	r26, r24
    13a2:	41 50       	subi	r20, 0x01	; 1
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	48 f0       	brcs	.+18     	; 0x13ba <strncpy+0x1c>
    13a8:	01 90       	ld	r0, Z+
    13aa:	0d 92       	st	X+, r0
    13ac:	00 20       	and	r0, r0
    13ae:	c9 f7       	brne	.-14     	; 0x13a2 <strncpy+0x4>
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <strncpy+0x16>
    13b2:	1d 92       	st	X+, r1
    13b4:	41 50       	subi	r20, 0x01	; 1
    13b6:	50 40       	sbci	r21, 0x00	; 0
    13b8:	e0 f7       	brcc	.-8      	; 0x13b2 <strncpy+0x14>
    13ba:	08 95       	ret

000013bc <__mulhi_const_10>:
    13bc:	7a e0       	ldi	r23, 0x0A	; 10
    13be:	97 9f       	mul	r25, r23
    13c0:	90 2d       	mov	r25, r0
    13c2:	87 9f       	mul	r24, r23
    13c4:	80 2d       	mov	r24, r0
    13c6:	91 0d       	add	r25, r1
    13c8:	11 24       	eor	r1, r1
    13ca:	08 95       	ret

000013cc <_exit>:
    13cc:	f8 94       	cli

000013ce <__stop_program>:
    13ce:	ff cf       	rjmp	.-2      	; 0x13ce <__stop_program>
