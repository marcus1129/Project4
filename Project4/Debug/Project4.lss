
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00001702  00001776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001702  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000288  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ada  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000123a  00000000  00000000  000045b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000153c  00000000  00000000  000057f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008c0  00000000  00000000  00006d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ac1  00000000  00000000  000075ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a91  00000000  00000000  000080ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  00009b3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
       2:	00 00       	nop
       4:	0f c2       	rjmp	.+1054   	; 0x424 <__bad_interrupt>
       6:	00 00       	nop
       8:	0d c2       	rjmp	.+1050   	; 0x424 <__bad_interrupt>
       a:	00 00       	nop
       c:	0b c2       	rjmp	.+1046   	; 0x424 <__bad_interrupt>
       e:	00 00       	nop
      10:	09 c2       	rjmp	.+1042   	; 0x424 <__bad_interrupt>
      12:	00 00       	nop
      14:	07 c2       	rjmp	.+1038   	; 0x424 <__bad_interrupt>
      16:	00 00       	nop
      18:	05 c2       	rjmp	.+1034   	; 0x424 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	03 c2       	rjmp	.+1030   	; 0x424 <__bad_interrupt>
      1e:	00 00       	nop
      20:	01 c2       	rjmp	.+1026   	; 0x424 <__bad_interrupt>
      22:	00 00       	nop
      24:	ff c1       	rjmp	.+1022   	; 0x424 <__bad_interrupt>
      26:	00 00       	nop
      28:	fd c1       	rjmp	.+1018   	; 0x424 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fb c1       	rjmp	.+1014   	; 0x424 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f9 c1       	rjmp	.+1010   	; 0x424 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c3       	rjmp	.+1710   	; 0x6e4 <__vector_13>
      36:	00 00       	nop
      38:	f5 c1       	rjmp	.+1002   	; 0x424 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f3 c1       	rjmp	.+998    	; 0x424 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c1       	rjmp	.+994    	; 0x424 <__bad_interrupt>
      42:	00 00       	nop
      44:	0e c3       	rjmp	.+1564   	; 0x662 <__vector_17>
      46:	00 00       	nop
      48:	ed c1       	rjmp	.+986    	; 0x424 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	eb c1       	rjmp	.+982    	; 0x424 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e9 c1       	rjmp	.+978    	; 0x424 <__bad_interrupt>
      52:	00 00       	nop
      54:	c5 c2       	rjmp	.+1418   	; 0x5e0 <__vector_21>
      56:	00 00       	nop
      58:	e5 c1       	rjmp	.+970    	; 0x424 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e3 c1       	rjmp	.+966    	; 0x424 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e1 c1       	rjmp	.+962    	; 0x424 <__bad_interrupt>
      62:	00 00       	nop
      64:	b3 c7       	rjmp	.+3942   	; 0xfcc <__vector_25>
      66:	00 00       	nop
      68:	dd c1       	rjmp	.+954    	; 0x424 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	db c1       	rjmp	.+950    	; 0x424 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d9 c1       	rjmp	.+946    	; 0x424 <__bad_interrupt>
      72:	00 00       	nop
      74:	d7 c1       	rjmp	.+942    	; 0x424 <__bad_interrupt>
      76:	00 00       	nop
      78:	d5 c1       	rjmp	.+938    	; 0x424 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d3 c1       	rjmp	.+934    	; 0x424 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c3       	rjmp	.+1764   	; 0x766 <__vector_32>
      82:	00 00       	nop
      84:	cf c1       	rjmp	.+926    	; 0x424 <__bad_interrupt>
      86:	00 00       	nop
      88:	cd c1       	rjmp	.+922    	; 0x424 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cb c1       	rjmp	.+918    	; 0x424 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c4 c7       	rjmp	.+3976   	; 0x101a <__vector_36>
      92:	00 00       	nop
      94:	c7 c1       	rjmp	.+910    	; 0x424 <__bad_interrupt>
      96:	00 00       	nop
      98:	c5 c1       	rjmp	.+906    	; 0x424 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c3 c1       	rjmp	.+902    	; 0x424 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c1 c1       	rjmp	.+898    	; 0x424 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bf c1       	rjmp	.+894    	; 0x424 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9f c3       	rjmp	.+1854   	; 0x7e8 <__vector_42>
      aa:	00 00       	nop
      ac:	bb c1       	rjmp	.+886    	; 0x424 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b9 c1       	rjmp	.+882    	; 0x424 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b7 c1       	rjmp	.+878    	; 0x424 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b5 c1       	rjmp	.+874    	; 0x424 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b3 c1       	rjmp	.+870    	; 0x424 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b1 c1       	rjmp	.+866    	; 0x424 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	af c1       	rjmp	.+862    	; 0x424 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ad c1       	rjmp	.+858    	; 0x424 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	cd c7       	rjmp	.+3994   	; 0x1068 <__vector_51>
      ce:	00 00       	nop
      d0:	a9 c1       	rjmp	.+850    	; 0x424 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a7 c1       	rjmp	.+846    	; 0x424 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ee c7       	rjmp	.+4060   	; 0x10b6 <__vector_54>
      da:	00 00       	nop
      dc:	a3 c1       	rjmp	.+838    	; 0x424 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a1 c1       	rjmp	.+834    	; 0x424 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
      ec:	00 00       	nop
      ee:	5f 00       	.word	0x005f	; ????
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	07 00       	.word	0x0007	; ????
      f8:	07 00       	.word	0x0007	; ????
      fa:	00 00       	nop
      fc:	00 14       	cp	r0, r0
      fe:	7f 14       	cp	r7, r15
     100:	7f 14       	cp	r7, r15
     102:	00 00       	nop
     104:	00 24       	eor	r0, r0
     106:	2a 7f       	andi	r18, 0xFA	; 250
     108:	2a 12       	cpse	r2, r26
     10a:	00 00       	nop
     10c:	00 23       	and	r16, r16
     10e:	13 08       	sbc	r1, r3
     110:	64 62       	ori	r22, 0x24	; 36
     112:	00 00       	nop
     114:	00 36       	cpi	r16, 0x60	; 96
     116:	49 55       	subi	r20, 0x59	; 89
     118:	22 50       	subi	r18, 0x02	; 2
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	05 03       	mulsu	r16, r21
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 1c       	adc	r0, r0
     126:	22 41       	sbci	r18, 0x12	; 18
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 41       	sbci	r16, 0x10	; 16
     12e:	22 1c       	adc	r2, r2
     130:	00 00       	nop
     132:	00 00       	nop
     134:	00 08       	sbc	r0, r0
     136:	2a 1c       	adc	r2, r10
     138:	2a 08       	sbc	r2, r10
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	08 3e       	cpi	r16, 0xE8	; 232
     140:	08 08       	sbc	r0, r8
     142:	00 00       	nop
     144:	00 a0       	ldd	r0, Z+32	; 0x20
     146:	60 00       	.word	0x0060	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 08       	sbc	r0, r0
     14e:	08 08       	sbc	r0, r8
     150:	08 08       	sbc	r0, r8
     152:	00 00       	nop
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 20       	and	r0, r0
     15e:	10 08       	sbc	r1, r0
     160:	04 02       	muls	r16, r20
     162:	00 00       	nop
     164:	00 3e       	cpi	r16, 0xE0	; 224
     166:	51 49       	sbci	r21, 0x91	; 145
     168:	45 3e       	cpi	r20, 0xE5	; 229
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	42 7f       	andi	r20, 0xF2	; 242
     170:	40 00       	.word	0x0040	; ????
     172:	00 00       	nop
     174:	00 62       	ori	r16, 0x20	; 32
     176:	51 49       	sbci	r21, 0x91	; 145
     178:	49 46       	sbci	r20, 0x69	; 105
     17a:	00 00       	nop
     17c:	00 22       	and	r0, r16
     17e:	41 49       	sbci	r20, 0x91	; 145
     180:	49 36       	cpi	r20, 0x69	; 105
     182:	00 00       	nop
     184:	00 18       	sub	r0, r0
     186:	14 12       	cpse	r1, r20
     188:	7f 10       	cpse	r7, r15
     18a:	00 00       	nop
     18c:	00 27       	eor	r16, r16
     18e:	45 45       	sbci	r20, 0x55	; 85
     190:	45 39       	cpi	r20, 0x95	; 149
     192:	00 00       	nop
     194:	00 3c       	cpi	r16, 0xC0	; 192
     196:	4a 49       	sbci	r20, 0x9A	; 154
     198:	49 30       	cpi	r20, 0x09	; 9
     19a:	00 00       	nop
     19c:	00 01       	movw	r0, r0
     19e:	71 09       	sbc	r23, r1
     1a0:	05 03       	mulsu	r16, r21
     1a2:	00 00       	nop
     1a4:	00 36       	cpi	r16, 0x60	; 96
     1a6:	49 49       	sbci	r20, 0x99	; 153
     1a8:	49 36       	cpi	r20, 0x69	; 105
     1aa:	00 00       	nop
     1ac:	00 06       	cpc	r0, r16
     1ae:	49 49       	sbci	r20, 0x99	; 153
     1b0:	29 1e       	adc	r2, r25
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	36 36       	cpi	r19, 0x66	; 102
     1b8:	00 00       	nop
     1ba:	00 00       	nop
     1bc:	00 00       	nop
     1be:	ac 6c       	ori	r26, 0xCC	; 204
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 00       	.word	0x0041	; ????
     1ca:	00 00       	nop
     1cc:	00 14       	cp	r0, r0
     1ce:	14 14       	cp	r1, r4
     1d0:	14 14       	cp	r1, r4
     1d2:	00 00       	nop
     1d4:	00 41       	sbci	r16, 0x10	; 16
     1d6:	22 14       	cp	r2, r2
     1d8:	08 00       	.word	0x0008	; ????
     1da:	00 00       	nop
     1dc:	00 02       	muls	r16, r16
     1de:	01 51       	subi	r16, 0x11	; 17
     1e0:	09 06       	cpc	r0, r25
     1e2:	00 00       	nop
     1e4:	00 32       	cpi	r16, 0x20	; 32
     1e6:	49 79       	andi	r20, 0x99	; 153
     1e8:	41 3e       	cpi	r20, 0xE1	; 225
     1ea:	00 00       	nop
     1ec:	00 7e       	andi	r16, 0xE0	; 224
     1ee:	09 09       	sbc	r16, r9
     1f0:	09 7e       	andi	r16, 0xE9	; 233
     1f2:	00 00       	nop
     1f4:	00 7f       	andi	r16, 0xF0	; 240
     1f6:	49 49       	sbci	r20, 0x99	; 153
     1f8:	49 36       	cpi	r20, 0x69	; 105
     1fa:	00 00       	nop
     1fc:	00 3e       	cpi	r16, 0xE0	; 224
     1fe:	41 41       	sbci	r20, 0x11	; 17
     200:	41 22       	and	r4, r17
     202:	00 00       	nop
     204:	00 7f       	andi	r16, 0xF0	; 240
     206:	41 41       	sbci	r20, 0x11	; 17
     208:	22 1c       	adc	r2, r2
     20a:	00 00       	nop
     20c:	00 7f       	andi	r16, 0xF0	; 240
     20e:	49 49       	sbci	r20, 0x99	; 153
     210:	49 41       	sbci	r20, 0x19	; 25
     212:	00 00       	nop
     214:	00 7f       	andi	r16, 0xF0	; 240
     216:	09 09       	sbc	r16, r9
     218:	09 01       	movw	r0, r18
     21a:	00 00       	nop
     21c:	00 3e       	cpi	r16, 0xE0	; 224
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	51 72       	andi	r21, 0x21	; 33
     222:	00 00       	nop
     224:	00 7f       	andi	r16, 0xF0	; 240
     226:	08 08       	sbc	r0, r8
     228:	08 7f       	andi	r16, 0xF8	; 248
     22a:	00 00       	nop
     22c:	00 41       	sbci	r16, 0x10	; 16
     22e:	7f 41       	sbci	r23, 0x1F	; 31
     230:	00 00       	nop
     232:	00 00       	nop
     234:	00 20       	and	r0, r0
     236:	40 41       	sbci	r20, 0x10	; 16
     238:	3f 01       	movw	r6, r30
     23a:	00 00       	nop
     23c:	00 7f       	andi	r16, 0xF0	; 240
     23e:	08 14       	cp	r0, r8
     240:	22 41       	sbci	r18, 0x12	; 18
     242:	00 00       	nop
     244:	00 7f       	andi	r16, 0xF0	; 240
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	00 00       	nop
     24c:	00 7f       	andi	r16, 0xF0	; 240
     24e:	02 0c       	add	r0, r2
     250:	02 7f       	andi	r16, 0xF2	; 242
     252:	00 00       	nop
     254:	00 7f       	andi	r16, 0xF0	; 240
     256:	04 08       	sbc	r0, r4
     258:	10 7f       	andi	r17, 0xF0	; 240
     25a:	00 00       	nop
     25c:	00 3e       	cpi	r16, 0xE0	; 224
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	41 3e       	cpi	r20, 0xE1	; 225
     262:	00 00       	nop
     264:	00 7f       	andi	r16, 0xF0	; 240
     266:	09 09       	sbc	r16, r9
     268:	09 06       	cpc	r0, r25
     26a:	00 00       	nop
     26c:	00 3e       	cpi	r16, 0xE0	; 224
     26e:	41 51       	subi	r20, 0x11	; 17
     270:	21 5e       	subi	r18, 0xE1	; 225
     272:	00 00       	nop
     274:	00 7f       	andi	r16, 0xF0	; 240
     276:	09 19       	sub	r16, r9
     278:	29 46       	sbci	r18, 0x69	; 105
     27a:	00 00       	nop
     27c:	00 26       	eor	r0, r16
     27e:	49 49       	sbci	r20, 0x99	; 153
     280:	49 32       	cpi	r20, 0x29	; 41
     282:	00 00       	nop
     284:	00 01       	movw	r0, r0
     286:	01 7f       	andi	r16, 0xF1	; 241
     288:	01 01       	movw	r0, r2
     28a:	00 00       	nop
     28c:	00 3f       	cpi	r16, 0xF0	; 240
     28e:	40 40       	sbci	r20, 0x00	; 0
     290:	40 3f       	cpi	r20, 0xF0	; 240
     292:	00 00       	nop
     294:	00 1f       	adc	r16, r16
     296:	20 40       	sbci	r18, 0x00	; 0
     298:	20 1f       	adc	r18, r16
     29a:	00 00       	nop
     29c:	00 3f       	cpi	r16, 0xF0	; 240
     29e:	40 38       	cpi	r20, 0x80	; 128
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 63       	ori	r16, 0x30	; 48
     2a6:	14 08       	sbc	r1, r4
     2a8:	14 63       	ori	r17, 0x34	; 52
     2aa:	00 00       	nop
     2ac:	00 03       	mulsu	r16, r16
     2ae:	04 78       	andi	r16, 0x84	; 132
     2b0:	04 03       	mulsu	r16, r20
     2b2:	00 00       	nop
     2b4:	00 61       	ori	r16, 0x10	; 16
     2b6:	51 49       	sbci	r21, 0x91	; 145
     2b8:	45 43       	sbci	r20, 0x35	; 53
     2ba:	00 00       	nop
     2bc:	00 7f       	andi	r16, 0xF0	; 240
     2be:	41 41       	sbci	r20, 0x11	; 17
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 02       	muls	r16, r16
     2c6:	04 08       	sbc	r0, r4
     2c8:	10 20       	and	r1, r0
     2ca:	00 00       	nop
     2cc:	00 41       	sbci	r16, 0x10	; 16
     2ce:	41 7f       	andi	r20, 0xF1	; 241
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 04       	cpc	r0, r0
     2d6:	02 01       	movw	r0, r4
     2d8:	02 04       	cpc	r0, r2
     2da:	00 00       	nop
     2dc:	00 80       	ld	r0, Z
     2de:	80 80       	ld	r8, Z
     2e0:	80 80       	ld	r8, Z
     2e2:	00 00       	nop
     2e4:	00 01       	movw	r0, r0
     2e6:	02 04       	cpc	r0, r2
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	00 20       	and	r0, r0
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	54 78       	andi	r21, 0x84	; 132
     2f2:	00 00       	nop
     2f4:	00 7f       	andi	r16, 0xF0	; 240
     2f6:	48 44       	sbci	r20, 0x48	; 72
     2f8:	44 38       	cpi	r20, 0x84	; 132
     2fa:	00 00       	nop
     2fc:	00 38       	cpi	r16, 0x80	; 128
     2fe:	44 44       	sbci	r20, 0x44	; 68
     300:	28 00       	.word	0x0028	; ????
     302:	00 00       	nop
     304:	00 38       	cpi	r16, 0x80	; 128
     306:	44 44       	sbci	r20, 0x44	; 68
     308:	48 7f       	andi	r20, 0xF8	; 248
     30a:	00 00       	nop
     30c:	00 38       	cpi	r16, 0x80	; 128
     30e:	54 54       	subi	r21, 0x44	; 68
     310:	54 18       	sub	r5, r4
     312:	00 00       	nop
     314:	00 08       	sbc	r0, r0
     316:	7e 09       	sbc	r23, r14
     318:	02 00       	.word	0x0002	; ????
     31a:	00 00       	nop
     31c:	00 18       	sub	r0, r0
     31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     320:	a4 7c       	andi	r26, 0xC4	; 196
     322:	00 00       	nop
     324:	00 7f       	andi	r16, 0xF0	; 240
     326:	08 04       	cpc	r0, r8
     328:	04 78       	andi	r16, 0x84	; 132
     32a:	00 00       	nop
     32c:	00 00       	nop
     32e:	7d 00       	.word	0x007d	; ????
     330:	00 00       	nop
     332:	00 00       	nop
     334:	00 80       	ld	r0, Z
     336:	84 7d       	andi	r24, 0xD4	; 212
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	00 7f       	andi	r16, 0xF0	; 240
     33e:	10 28       	or	r1, r0
     340:	44 00       	.word	0x0044	; ????
     342:	00 00       	nop
     344:	00 41       	sbci	r16, 0x10	; 16
     346:	7f 40       	sbci	r23, 0x0F	; 15
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	00 7c       	andi	r16, 0xC0	; 192
     34e:	04 18       	sub	r0, r4
     350:	04 78       	andi	r16, 0x84	; 132
     352:	00 00       	nop
     354:	00 7c       	andi	r16, 0xC0	; 192
     356:	08 04       	cpc	r0, r8
     358:	7c 00       	.word	0x007c	; ????
     35a:	00 00       	nop
     35c:	00 38       	cpi	r16, 0x80	; 128
     35e:	44 44       	sbci	r20, 0x44	; 68
     360:	38 00       	.word	0x0038	; ????
     362:	00 00       	nop
     364:	00 fc       	sbrc	r0, 0
     366:	24 24       	eor	r2, r4
     368:	18 00       	.word	0x0018	; ????
     36a:	00 00       	nop
     36c:	00 18       	sub	r0, r0
     36e:	24 24       	eor	r2, r4
     370:	fc 00       	.word	0x00fc	; ????
     372:	00 00       	nop
     374:	00 00       	nop
     376:	7c 08       	sbc	r7, r12
     378:	04 00       	.word	0x0004	; ????
     37a:	00 00       	nop
     37c:	00 48       	sbci	r16, 0x80	; 128
     37e:	54 54       	subi	r21, 0x44	; 68
     380:	24 00       	.word	0x0024	; ????
     382:	00 00       	nop
     384:	00 04       	cpc	r0, r0
     386:	7f 44       	sbci	r23, 0x4F	; 79
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 3c       	cpi	r16, 0xC0	; 192
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	7c 00       	.word	0x007c	; ????
     392:	00 00       	nop
     394:	00 1c       	adc	r0, r0
     396:	20 40       	sbci	r18, 0x00	; 0
     398:	20 1c       	adc	r2, r0
     39a:	00 00       	nop
     39c:	00 3c       	cpi	r16, 0xC0	; 192
     39e:	40 30       	cpi	r20, 0x00	; 0
     3a0:	40 3c       	cpi	r20, 0xC0	; 192
     3a2:	00 00       	nop
     3a4:	00 44       	sbci	r16, 0x40	; 64
     3a6:	28 10       	cpse	r2, r8
     3a8:	28 44       	sbci	r18, 0x48	; 72
     3aa:	00 00       	nop
     3ac:	00 1c       	adc	r0, r0
     3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
     3b0:	7c 00       	.word	0x007c	; ????
     3b2:	00 00       	nop
     3b4:	00 44       	sbci	r16, 0x40	; 64
     3b6:	64 54       	subi	r22, 0x44	; 68
     3b8:	4c 44       	sbci	r20, 0x4C	; 76
     3ba:	00 00       	nop
     3bc:	00 08       	sbc	r0, r0
     3be:	36 41       	sbci	r19, 0x16	; 22
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 00       	nop
     3c6:	7f 00       	.word	0x007f	; ????
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	00 41       	sbci	r16, 0x10	; 16
     3ce:	36 08       	sbc	r3, r6
     3d0:	00 00       	nop
     3d2:	00 00       	nop
     3d4:	00 02       	muls	r16, r16
     3d6:	01 01       	movw	r0, r2
     3d8:	02 01       	movw	r0, r4
     3da:	00 00       	nop
     3dc:	00 02       	muls	r16, r16
     3de:	05 05       	cpc	r16, r5
     3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d1 e2       	ldi	r29, 0x21	; 33
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
     3f4:	12 e0       	ldi	r17, 0x02	; 2
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	e2 e0       	ldi	r30, 0x02	; 2
     3fc:	f7 e1       	ldi	r31, 0x17	; 23
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0b bf       	out	0x3b, r16	; 59
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	07 90       	elpm	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	a2 34       	cpi	r26, 0x42	; 66
     40a:	b1 07       	cpc	r27, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	a2 e4       	ldi	r26, 0x42	; 66
     412:	b2 e0       	ldi	r27, 0x02	; 2
     414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
     416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
     418:	a2 34       	cpi	r26, 0x42	; 66
     41a:	b2 07       	cpc	r27, r18
     41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
     41e:	82 d2       	rcall	.+1284   	; 0x924 <main>
     420:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <_exit>

00000424 <__bad_interrupt>:
     424:	ed cd       	rjmp	.-1062   	; 0x0 <__vectors>

00000426 <clock_init>:
#include <avr/interrupt.h>
#include "clock.h"


int clock_init(){
	CLOCK.second = 0;
     426:	e0 e0       	ldi	r30, 0x00	; 0
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	15 82       	std	Z+5, r1	; 0x05
     42c:	14 82       	std	Z+4, r1	; 0x04
	CLOCK.minute = 0;
     42e:	17 82       	std	Z+7, r1	; 0x07
     430:	16 82       	std	Z+6, r1	; 0x06
	CLOCK.hour = 0;
     432:	11 86       	std	Z+9, r1	; 0x09
     434:	10 86       	std	Z+8, r1	; 0x08
	CLOCK.counter = 0;
     436:	11 82       	std	Z+1, r1	; 0x01
     438:	10 82       	st	Z, r1
	CLOCK.interruptFlag = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	93 83       	std	Z+3, r25	; 0x03
     440:	82 83       	std	Z+2, r24	; 0x02
	return 1;
}
     442:	08 95       	ret

00000444 <clock_increment>:

int clock_increment(){
	if(CLOCK.second == 59){
     444:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__DATA_REGION_ORIGIN__+0x4>
     448:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__DATA_REGION_ORIGIN__+0x5>
     44c:	8b 33       	cpi	r24, 0x3B	; 59
     44e:	91 05       	cpc	r25, r1
     450:	39 f5       	brne	.+78     	; 0x4a0 <clock_increment+0x5c>
		if(CLOCK.minute == 59){
     452:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
     456:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
     45a:	8b 33       	cpi	r24, 0x3B	; 59
     45c:	91 05       	cpc	r25, r1
     45e:	b1 f4       	brne	.+44     	; 0x48c <clock_increment+0x48>
			if(CLOCK.hour == 23){
     460:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
     464:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__DATA_REGION_ORIGIN__+0x9>
     468:	87 31       	cpi	r24, 0x17	; 23
     46a:	91 05       	cpc	r25, r1
     46c:	29 f4       	brne	.+10     	; 0x478 <clock_increment+0x34>
				CLOCK.hour = 0;
     46e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__DATA_REGION_ORIGIN__+0x9>
     472:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
     476:	05 c0       	rjmp	.+10     	; 0x482 <clock_increment+0x3e>
			}
			else{
				CLOCK.hour += 1;
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__DATA_REGION_ORIGIN__+0x9>
     47e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
			}
			CLOCK.minute = 0;
     482:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
     486:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
     48a:	05 c0       	rjmp	.+10     	; 0x496 <clock_increment+0x52>
		}
		else{
			CLOCK.minute += 1;
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
     492:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
		}
		CLOCK.second = 0;
     496:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__DATA_REGION_ORIGIN__+0x5>
     49a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__DATA_REGION_ORIGIN__+0x4>
     49e:	05 c0       	rjmp	.+10     	; 0x4aa <clock_increment+0x66>
	}
	else{
		CLOCK.second += 1;
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__DATA_REGION_ORIGIN__+0x5>
     4a6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__DATA_REGION_ORIGIN__+0x4>
	}
	return 1;
}
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	08 95       	ret

000004b0 <initTimer0>:

int initTimer0(){
	TCCR0A = (1<<WGM01);	     //Sets mode to CTC
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02)|(1<<CS00);		//Sets prescaler to 1024
     4b4:	95 e0       	ldi	r25, 0x05	; 5
     4b6:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0x9b;				//Sets compare value to 15600
     4b8:	9b e9       	ldi	r25, 0x9B	; 155
     4ba:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0x9b;
     4bc:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
     4be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
     4c2:	85 bb       	out	0x15, r24	; 21
	return 1;
};
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	08 95       	ret

000004ca <initTimer1>:

int initTimer1(){
	TCCR1A = 0x00;	     //Sets mode to CTC
     4ca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = (1<<CS12)|(1<<CS10);		//Sets prescaler to 1024
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	OCR1AH = 0x00;
     4d4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	OCR1AL = 0x9b;				//Sets compare value to 15600
     4d8:	8b e9       	ldi	r24, 0x9B	; 155
     4da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B =	0x9b;
     4de:	8b e9       	ldi	r24, 0x9B	; 155
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     4e6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	OCR1C =	0x9b;
     4ea:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
     4ee:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
	TIMSK1 = (1<<OCIE1A);
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
	TIFR1 = (1<<OCF1A);
     4f8:	86 bb       	out	0x16, r24	; 22
	return 1;
};
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	08 95       	ret

00000500 <initTimer2>:

int initTimer2(){
	TCCR2A = (1<<WGM21);	     //Sets mode to CTC
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
	TCCR2B = (1<<CS22)|(1<<CS20);		//Sets prescaler to 1024
     506:	95 e0       	ldi	r25, 0x05	; 5
     508:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
	OCR2A =	0x9b;				//Sets compare value to 15600
     50c:	9b e9       	ldi	r25, 0x9B	; 155
     50e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
	OCR2B =	0x9b;
     512:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
	TIMSK2 = (1<<OCIE2A);
     516:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
	TIFR2 = (1<<OCF2A);
     51a:	87 bb       	out	0x17, r24	; 23
	return 1;
};
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	08 95       	ret

00000522 <initTimer3>:

int initTimer3(){
	TCCR3A = 0x00;	     //Sets mode to CTC
     522:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B = (1<<CS32)|(1<<CS30);		//Sets prescaler to 1024
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	OCR3A =	0x009b;				//Sets compare value to 15600
     52c:	8b e9       	ldi	r24, 0x9B	; 155
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     534:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	OCR3B =	0x009b;
     538:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
     53c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
	OCR3C =	0x009b;
     540:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
     544:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
	TIMSK3 = (1<<OCIE3A);
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
	TIFR3 = (1<<OCF3A);
     54e:	88 bb       	out	0x18, r24	; 24
	return 1;
};
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	08 95       	ret

00000556 <initTimer4>:

int initTimer4(){
	TCCR4A = 0x00;	     //Sets mode to CTC
     556:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = (1<<CS42)|(1<<CS40);		//Sets prescaler to 1024
     55a:	85 e0       	ldi	r24, 0x05	; 5
     55c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	OCR4A =	0x009b;				//Sets compare value to 15600
     560:	8b e9       	ldi	r24, 0x9B	; 155
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     568:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	OCR4B =	0x009b;
     56c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
     570:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
	OCR4C =	0x009b;
     574:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
     578:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
	TIMSK4 = (1<<OCIE4A);
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
	TIFR4 = (1<<OCF4A);
     582:	89 bb       	out	0x19, r24	; 25
	return 1;
};
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	08 95       	ret

0000058a <clock_enableTimerInterrupt>:

int clock_enableTimerInterrupt(int timerId){
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	2a 97       	sbiw	r28, 0x0a	; 10
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
	sei();
     59e:	78 94       	sei
	int (*clock_interruptInitFuncs[5])() = {initTimer0, initTimer1, initTimer2, initTimer3, initTimer4};
     5a0:	2a e0       	ldi	r18, 0x0A	; 10
     5a2:	ec e1       	ldi	r30, 0x1C	; 28
     5a4:	f2 e0       	ldi	r31, 0x02	; 2
     5a6:	de 01       	movw	r26, r28
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	01 90       	ld	r0, Z+
     5ac:	0d 92       	st	X+, r0
     5ae:	2a 95       	dec	r18
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <clock_enableTimerInterrupt+0x20>
	(*clock_interruptInitFuncs[timerId])();
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	e1 e0       	ldi	r30, 0x01	; 1
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	ec 0f       	add	r30, r28
     5bc:	fd 1f       	adc	r31, r29
     5be:	e8 0f       	add	r30, r24
     5c0:	f9 1f       	adc	r31, r25
     5c2:	01 90       	ld	r0, Z+
     5c4:	f0 81       	ld	r31, Z
     5c6:	e0 2d       	mov	r30, r0
     5c8:	19 95       	eicall
	return 1;
}
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	2a 96       	adiw	r28, 0x0a	; 10
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <__vector_21>:
	.clock_increment = clock_increment,
	.clock_enableTimerInterrupt = clock_enableTimerInterrupt
};


ISR(TIMER0_COMPA_vect){
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	0b b6       	in	r0, 0x3b	; 59
     5ec:	0f 92       	push	r0
     5ee:	2f 93       	push	r18
     5f0:	3f 93       	push	r19
     5f2:	4f 93       	push	r20
     5f4:	5f 93       	push	r21
     5f6:	6f 93       	push	r22
     5f8:	7f 93       	push	r23
     5fa:	8f 93       	push	r24
     5fc:	9f 93       	push	r25
     5fe:	af 93       	push	r26
     600:	bf 93       	push	r27
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
	CLOCK.counter += 1;
     60a:	e0 e0       	ldi	r30, 0x00	; 0
     60c:	f2 e0       	ldi	r31, 0x02	; 2
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	91 83       	std	Z+1, r25	; 0x01
     616:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	84 36       	cpi	r24, 0x64	; 100
     61e:	91 05       	cpc	r25, r1
     620:	59 f4       	brne	.+22     	; 0x638 <__vector_21+0x58>
		CLOCK.clock_increment();
     622:	ef 01       	movw	r28, r30
     624:	06 84       	ldd	r0, Z+14	; 0x0e
     626:	f7 85       	ldd	r31, Z+15	; 0x0f
     628:	e0 2d       	mov	r30, r0
     62a:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	9b 83       	std	Y+3, r25	; 0x03
     632:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     634:	19 82       	std	Y+1, r1	; 0x01
     636:	18 82       	st	Y, r1
	}
}
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	7f 91       	pop	r23
     64a:	6f 91       	pop	r22
     64c:	5f 91       	pop	r21
     64e:	4f 91       	pop	r20
     650:	3f 91       	pop	r19
     652:	2f 91       	pop	r18
     654:	0f 90       	pop	r0
     656:	0b be       	out	0x3b, r0	; 59
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <__vector_17>:

ISR(TIMER1_COMPA_vect){
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	0b b6       	in	r0, 0x3b	; 59
     66e:	0f 92       	push	r0
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	ef 93       	push	r30
     68a:	ff 93       	push	r31
	CLOCK.counter += 1;
     68c:	e0 e0       	ldi	r30, 0x00	; 0
     68e:	f2 e0       	ldi	r31, 0x02	; 2
     690:	80 81       	ld	r24, Z
     692:	91 81       	ldd	r25, Z+1	; 0x01
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	91 83       	std	Z+1, r25	; 0x01
     698:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     69a:	80 81       	ld	r24, Z
     69c:	91 81       	ldd	r25, Z+1	; 0x01
     69e:	84 36       	cpi	r24, 0x64	; 100
     6a0:	91 05       	cpc	r25, r1
     6a2:	59 f4       	brne	.+22     	; 0x6ba <__vector_17+0x58>
		CLOCK.clock_increment();
     6a4:	ef 01       	movw	r28, r30
     6a6:	06 84       	ldd	r0, Z+14	; 0x0e
     6a8:	f7 85       	ldd	r31, Z+15	; 0x0f
     6aa:	e0 2d       	mov	r30, r0
     6ac:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	9b 83       	std	Y+3, r25	; 0x03
     6b4:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     6b6:	19 82       	std	Y+1, r1	; 0x01
     6b8:	18 82       	st	Y, r1
	}
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	bf 91       	pop	r27
     6c4:	af 91       	pop	r26
     6c6:	9f 91       	pop	r25
     6c8:	8f 91       	pop	r24
     6ca:	7f 91       	pop	r23
     6cc:	6f 91       	pop	r22
     6ce:	5f 91       	pop	r21
     6d0:	4f 91       	pop	r20
     6d2:	3f 91       	pop	r19
     6d4:	2f 91       	pop	r18
     6d6:	0f 90       	pop	r0
     6d8:	0b be       	out	0x3b, r0	; 59
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	1f 90       	pop	r1
     6e2:	18 95       	reti

000006e4 <__vector_13>:

ISR(TIMER2_COMPA_vect){
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	0b b6       	in	r0, 0x3b	; 59
     6f0:	0f 92       	push	r0
     6f2:	2f 93       	push	r18
     6f4:	3f 93       	push	r19
     6f6:	4f 93       	push	r20
     6f8:	5f 93       	push	r21
     6fa:	6f 93       	push	r22
     6fc:	7f 93       	push	r23
     6fe:	8f 93       	push	r24
     700:	9f 93       	push	r25
     702:	af 93       	push	r26
     704:	bf 93       	push	r27
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
	CLOCK.counter += 1;
     70e:	e0 e0       	ldi	r30, 0x00	; 0
     710:	f2 e0       	ldi	r31, 0x02	; 2
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	91 83       	std	Z+1, r25	; 0x01
     71a:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     71c:	80 81       	ld	r24, Z
     71e:	91 81       	ldd	r25, Z+1	; 0x01
     720:	84 36       	cpi	r24, 0x64	; 100
     722:	91 05       	cpc	r25, r1
     724:	59 f4       	brne	.+22     	; 0x73c <__vector_13+0x58>
		CLOCK.clock_increment();
     726:	ef 01       	movw	r28, r30
     728:	06 84       	ldd	r0, Z+14	; 0x0e
     72a:	f7 85       	ldd	r31, Z+15	; 0x0f
     72c:	e0 2d       	mov	r30, r0
     72e:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	9b 83       	std	Y+3, r25	; 0x03
     736:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     738:	19 82       	std	Y+1, r1	; 0x01
     73a:	18 82       	st	Y, r1
	}
}
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <__vector_32>:

ISR(TIMER3_COMPA_vect){
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	0b b6       	in	r0, 0x3b	; 59
     772:	0f 92       	push	r0
     774:	2f 93       	push	r18
     776:	3f 93       	push	r19
     778:	4f 93       	push	r20
     77a:	5f 93       	push	r21
     77c:	6f 93       	push	r22
     77e:	7f 93       	push	r23
     780:	8f 93       	push	r24
     782:	9f 93       	push	r25
     784:	af 93       	push	r26
     786:	bf 93       	push	r27
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
	CLOCK.counter += 1;
     790:	e0 e0       	ldi	r30, 0x00	; 0
     792:	f2 e0       	ldi	r31, 0x02	; 2
     794:	80 81       	ld	r24, Z
     796:	91 81       	ldd	r25, Z+1	; 0x01
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	91 83       	std	Z+1, r25	; 0x01
     79c:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	84 36       	cpi	r24, 0x64	; 100
     7a4:	91 05       	cpc	r25, r1
     7a6:	59 f4       	brne	.+22     	; 0x7be <__vector_32+0x58>
		CLOCK.clock_increment();
     7a8:	ef 01       	movw	r28, r30
     7aa:	06 84       	ldd	r0, Z+14	; 0x0e
     7ac:	f7 85       	ldd	r31, Z+15	; 0x0f
     7ae:	e0 2d       	mov	r30, r0
     7b0:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	9b 83       	std	Y+3, r25	; 0x03
     7b8:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     7ba:	19 82       	std	Y+1, r1	; 0x01
     7bc:	18 82       	st	Y, r1
	}
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	bf 91       	pop	r27
     7c8:	af 91       	pop	r26
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	7f 91       	pop	r23
     7d0:	6f 91       	pop	r22
     7d2:	5f 91       	pop	r21
     7d4:	4f 91       	pop	r20
     7d6:	3f 91       	pop	r19
     7d8:	2f 91       	pop	r18
     7da:	0f 90       	pop	r0
     7dc:	0b be       	out	0x3b, r0	; 59
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <__vector_42>:

ISR(TIMER4_COMPA_vect){
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	0b b6       	in	r0, 0x3b	; 59
     7f4:	0f 92       	push	r0
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
	CLOCK.counter += 1;
     812:	e0 e0       	ldi	r30, 0x00	; 0
     814:	f2 e0       	ldi	r31, 0x02	; 2
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	91 83       	std	Z+1, r25	; 0x01
     81e:	80 83       	st	Z, r24
	if(CLOCK.counter == 100){
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	84 36       	cpi	r24, 0x64	; 100
     826:	91 05       	cpc	r25, r1
     828:	59 f4       	brne	.+22     	; 0x840 <__vector_42+0x58>
		CLOCK.clock_increment();
     82a:	ef 01       	movw	r28, r30
     82c:	06 84       	ldd	r0, Z+14	; 0x0e
     82e:	f7 85       	ldd	r31, Z+15	; 0x0f
     830:	e0 2d       	mov	r30, r0
     832:	19 95       	eicall
		CLOCK.interruptFlag = 1;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	9b 83       	std	Y+3, r25	; 0x03
     83a:	8a 83       	std	Y+2, r24	; 0x02
		CLOCK.counter = 0;
     83c:	19 82       	std	Y+1, r1	; 0x01
     83e:	18 82       	st	Y, r1
	}
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	0f 90       	pop	r0
     85e:	0b be       	out	0x3b, r0	; 59
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
     86a:	81 b1       	in	r24, 0x01	; 1
     86c:	81 60       	ori	r24, 0x01	; 1
     86e:	81 b9       	out	0x01, r24	; 1
     870:	82 b1       	in	r24, 0x02	; 2
     872:	81 60       	ori	r24, 0x01	; 1
     874:	82 b9       	out	0x02, r24	; 2
     876:	2f ef       	ldi	r18, 0xFF	; 255
     878:	83 ed       	ldi	r24, 0xD3	; 211
     87a:	90 e3       	ldi	r25, 0x30	; 48
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	80 40       	sbci	r24, 0x00	; 0
     880:	90 40       	sbci	r25, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <I2C_Init+0x12>
     884:	00 c0       	rjmp	.+0      	; 0x886 <I2C_Init+0x1c>
     886:	00 00       	nop
     888:	82 e1       	ldi	r24, 0x12	; 18
     88a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     88e:	e9 eb       	ldi	r30, 0xB9	; 185
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	8c 7f       	andi	r24, 0xFC	; 252
     896:	80 83       	st	Z, r24
     898:	85 e0       	ldi	r24, 0x05	; 5
     89a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     89e:	08 95       	ret

000008a0 <I2C_Start>:
     8a0:	94 ea       	ldi	r25, 0xA4	; 164
     8a2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8a6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8aa:	99 23       	and	r25, r25
     8ac:	e4 f7       	brge	.-8      	; 0x8a6 <I2C_Start+0x6>
     8ae:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     8b2:	98 7f       	andi	r25, 0xF8	; 248
     8b4:	98 30       	cpi	r25, 0x08	; 8
     8b6:	91 f4       	brne	.+36     	; 0x8dc <I2C_Start+0x3c>
     8b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     8bc:	84 e8       	ldi	r24, 0x84	; 132
     8be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8c6:	88 23       	and	r24, r24
     8c8:	e4 f7       	brge	.-8      	; 0x8c2 <I2C_Start+0x22>
     8ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     8ce:	88 7f       	andi	r24, 0xF8	; 248
     8d0:	88 31       	cpi	r24, 0x18	; 24
     8d2:	31 f0       	breq	.+12     	; 0x8e0 <I2C_Start+0x40>
     8d4:	80 32       	cpi	r24, 0x20	; 32
     8d6:	31 f4       	brne	.+12     	; 0x8e4 <I2C_Start+0x44>
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	08 95       	ret
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	08 95       	ret
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	08 95       	ret
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	08 95       	ret

000008e8 <I2C_Write>:
     8e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     8ec:	84 e8       	ldi	r24, 0x84	; 132
     8ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8f6:	88 23       	and	r24, r24
     8f8:	e4 f7       	brge	.-8      	; 0x8f2 <I2C_Write+0xa>
     8fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     8fe:	88 7f       	andi	r24, 0xF8	; 248
     900:	88 32       	cpi	r24, 0x28	; 40
     902:	21 f0       	breq	.+8      	; 0x90c <I2C_Write+0x24>
     904:	80 33       	cpi	r24, 0x30	; 48
     906:	21 f4       	brne	.+8      	; 0x910 <I2C_Write+0x28>
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	08 95       	ret
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	08 95       	ret
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	08 95       	ret

00000914 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     914:	84 e9       	ldi	r24, 0x94	; 148
     916:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     91a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     91e:	84 fd       	sbrc	r24, 4
     920:	fc cf       	rjmp	.-8      	; 0x91a <I2C_Stop+0x6>
     922:	08 95       	ret

00000924 <main>:
#include <stdlib.h>
#include "UARTLib.h"
#include "clock.h"
#include <util/delay.h>

int main(void){
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	2a 97       	sbiw	r28, 0x0a	; 10
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
	_i2c_address = 0X78;
     938:	88 e7       	ldi	r24, 0x78	; 120
     93a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <_i2c_address>
	I2C_Init();
     93e:	95 df       	rcall	.-214    	; 0x86a <I2C_Init>
	InitializeDisplay();
     940:	97 d0       	rcall	.+302    	; 0xa70 <InitializeDisplay>
	print_fonts();
     942:	51 d1       	rcall	.+674    	; 0xbe6 <print_fonts>
     944:	e7 d0       	rcall	.+462    	; 0xb14 <clear_display>
	clear_display();
     946:	00 e0       	ldi	r16, 0x00	; 0
     948:	12 e0       	ldi	r17, 0x02	; 2
	
	CLOCK.clock_init();
     94a:	d8 01       	movw	r26, r16
     94c:	1c 96       	adiw	r26, 0x0c	; 12
     94e:	8d 91       	ld	r24, X+
     950:	9c 91       	ld	r25, X
     952:	1d 97       	sbiw	r26, 0x0d	; 13
     954:	fc 01       	movw	r30, r24
     956:	19 95       	eicall
     958:	d8 01       	movw	r26, r16
     95a:	1a 96       	adiw	r26, 0x0a	; 10
	CLOCK.clock_enableTimerInterrupt(2);
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	1b 97       	sbiw	r26, 0x0b	; 11
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	19 95       	eicall
     968:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <UART+0x7>
	UART.UART_init(ASYNC, 19200, 1);
     96c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <UART+0x8>
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	7b e4       	ldi	r23, 0x4B	; 75
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	19 95       	eicall
     97e:	fe 01       	movw	r30, r28
     980:	31 96       	adiw	r30, 0x01	; 1
	
	char temp[10] = {' '};
     982:	8a e0       	ldi	r24, 0x0A	; 10
     984:	df 01       	movw	r26, r30
     986:	1d 92       	st	X+, r1
     988:	8a 95       	dec	r24
     98a:	e9 f7       	brne	.-6      	; 0x986 <main+0x62>
     98c:	80 e2       	ldi	r24, 0x20	; 32
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <UART+0x9>
    while (1){
		UART.UART_transmitChar('s');
     994:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <UART+0xa>
     998:	83 e7       	ldi	r24, 0x73	; 115
     99a:	19 95       	eicall
     99c:	00 e0       	ldi	r16, 0x00	; 0
     99e:	12 e0       	ldi	r17, 0x02	; 2
		
		sprintf(temp, "%d", CLOCK.hour);
     9a0:	f8 01       	movw	r30, r16
     9a2:	81 85       	ldd	r24, Z+9	; 0x09
     9a4:	8f 93       	push	r24
     9a6:	80 85       	ldd	r24, Z+8	; 0x08
     9a8:	8f 93       	push	r24
     9aa:	0f 2e       	mov	r0, r31
     9ac:	fe e3       	ldi	r31, 0x3E	; 62
     9ae:	cf 2e       	mov	r12, r31
     9b0:	f2 e0       	ldi	r31, 0x02	; 2
     9b2:	df 2e       	mov	r13, r31
     9b4:	f0 2d       	mov	r31, r0
     9b6:	df 92       	push	r13
     9b8:	cf 92       	push	r12
     9ba:	9e 01       	movw	r18, r28
     9bc:	2f 5f       	subi	r18, 0xFF	; 255
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	79 01       	movw	r14, r18
     9c2:	3f 93       	push	r19
     9c4:	2f 93       	push	r18
     9c6:	c0 d3       	rcall	.+1920   	; 0x1148 <sprintf>
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	50 e0       	ldi	r21, 0x00	; 0
		sendStrXY(temp, 0, 0);
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	c7 01       	movw	r24, r14
     9d2:	db d0       	rcall	.+438    	; 0xb8a <sendStrXY>
     9d4:	42 e0       	ldi	r20, 0x02	; 2
     9d6:	50 e0       	ldi	r21, 0x00	; 0
		sendCharXY(':', 0, 2);
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	8a e3       	ldi	r24, 0x3A	; 58
     9de:	ae d0       	rcall	.+348    	; 0xb3c <sendCharXY>
     9e0:	d8 01       	movw	r26, r16
     9e2:	17 96       	adiw	r26, 0x07	; 7
     9e4:	8c 91       	ld	r24, X
		sprintf(temp, "%d", CLOCK.minute);
     9e6:	17 97       	sbiw	r26, 0x07	; 7
     9e8:	8f 93       	push	r24
     9ea:	16 96       	adiw	r26, 0x06	; 6
     9ec:	8c 91       	ld	r24, X
     9ee:	8f 93       	push	r24
     9f0:	df 92       	push	r13
     9f2:	cf 92       	push	r12
     9f4:	ff 92       	push	r15
     9f6:	ef 92       	push	r14
     9f8:	a7 d3       	rcall	.+1870   	; 0x1148 <sprintf>
     9fa:	43 e0       	ldi	r20, 0x03	; 3
     9fc:	50 e0       	ldi	r21, 0x00	; 0
		sendStrXY(temp, 0, 3);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	c7 01       	movw	r24, r14
     a04:	c2 d0       	rcall	.+388    	; 0xb8a <sendStrXY>
     a06:	45 e0       	ldi	r20, 0x05	; 5
     a08:	50 e0       	ldi	r21, 0x00	; 0
		sendCharXY(':', 0, 5);
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	8a e3       	ldi	r24, 0x3A	; 58
     a10:	95 d0       	rcall	.+298    	; 0xb3c <sendCharXY>
     a12:	f8 01       	movw	r30, r16
     a14:	85 81       	ldd	r24, Z+5	; 0x05
		sprintf(temp, "%d", CLOCK.second);
     a16:	8f 93       	push	r24
     a18:	84 81       	ldd	r24, Z+4	; 0x04
     a1a:	8f 93       	push	r24
     a1c:	df 92       	push	r13
     a1e:	cf 92       	push	r12
     a20:	ff 92       	push	r15
     a22:	ef 92       	push	r14
     a24:	91 d3       	rcall	.+1826   	; 0x1148 <sprintf>
     a26:	46 e0       	ldi	r20, 0x06	; 6
     a28:	50 e0       	ldi	r21, 0x00	; 0
		sendStrXY(temp, 0, 6);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	c7 01       	movw	r24, r14
     a30:	ac d0       	rcall	.+344    	; 0xb8a <sendStrXY>
     a32:	d8 01       	movw	r26, r16
     a34:	12 96       	adiw	r26, 0x02	; 2
     a36:	8d 91       	ld	r24, X+
		if(CLOCK.interruptFlag){
     a38:	9c 91       	ld	r25, X
     a3a:	13 97       	sbiw	r26, 0x03	; 3
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	89 2b       	or	r24, r25
     a48:	09 f4       	brne	.+2      	; 0xa4c <main+0x128>
     a4a:	a2 cf       	rjmp	.-188    	; 0x990 <main+0x6c>
     a4c:	63 d0       	rcall	.+198    	; 0xb14 <clear_display>
     a4e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
			clear_display();
     a52:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
			CLOCK.interruptFlag = 0;
     a56:	9c cf       	rjmp	.-200    	; 0x990 <main+0x6c>

00000a58 <ssd1306_command>:
     a58:	cf 93       	push	r28
     a5a:	c8 2f       	mov	r28, r24
     a5c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_i2c_address>

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
     a60:	1f df       	rcall	.-450    	; 0x8a0 <I2C_Start>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	41 df       	rcall	.-382    	; 0x8e8 <I2C_Write>
     a66:	8c 2f       	mov	r24, r28
     a68:	3f df       	rcall	.-386    	; 0x8e8 <I2C_Write>
     a6a:	54 df       	rcall	.-344    	; 0x914 <I2C_Stop>
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <InitializeDisplay>:
     a70:	8e ea       	ldi	r24, 0xAE	; 174
     a72:	f2 df       	rcall	.-28     	; 0xa58 <ssd1306_command>
     a74:	85 ed       	ldi	r24, 0xD5	; 213
     a76:	f0 df       	rcall	.-32     	; 0xa58 <ssd1306_command>
     a78:	80 e8       	ldi	r24, 0x80	; 128
     a7a:	ee df       	rcall	.-36     	; 0xa58 <ssd1306_command>
     a7c:	88 ea       	ldi	r24, 0xA8	; 168
     a7e:	ec df       	rcall	.-40     	; 0xa58 <ssd1306_command>
     a80:	8f e3       	ldi	r24, 0x3F	; 63
     a82:	ea df       	rcall	.-44     	; 0xa58 <ssd1306_command>
     a84:	83 ed       	ldi	r24, 0xD3	; 211
     a86:	e8 df       	rcall	.-48     	; 0xa58 <ssd1306_command>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	e6 df       	rcall	.-52     	; 0xa58 <ssd1306_command>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	e4 df       	rcall	.-56     	; 0xa58 <ssd1306_command>
     a90:	8d e8       	ldi	r24, 0x8D	; 141
     a92:	e2 df       	rcall	.-60     	; 0xa58 <ssd1306_command>
     a94:	84 e1       	ldi	r24, 0x14	; 20
     a96:	e0 df       	rcall	.-64     	; 0xa58 <ssd1306_command>
     a98:	80 e2       	ldi	r24, 0x20	; 32
     a9a:	de df       	rcall	.-68     	; 0xa58 <ssd1306_command>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	dc df       	rcall	.-72     	; 0xa58 <ssd1306_command>
     aa0:	81 ea       	ldi	r24, 0xA1	; 161
     aa2:	da df       	rcall	.-76     	; 0xa58 <ssd1306_command>
     aa4:	88 ec       	ldi	r24, 0xC8	; 200
     aa6:	d8 df       	rcall	.-80     	; 0xa58 <ssd1306_command>
     aa8:	8a ed       	ldi	r24, 0xDA	; 218
     aaa:	d6 df       	rcall	.-84     	; 0xa58 <ssd1306_command>
     aac:	82 e1       	ldi	r24, 0x12	; 18
     aae:	d4 df       	rcall	.-88     	; 0xa58 <ssd1306_command>
     ab0:	81 e8       	ldi	r24, 0x81	; 129
     ab2:	d2 df       	rcall	.-92     	; 0xa58 <ssd1306_command>
     ab4:	8f ec       	ldi	r24, 0xCF	; 207
     ab6:	d0 df       	rcall	.-96     	; 0xa58 <ssd1306_command>
     ab8:	89 ed       	ldi	r24, 0xD9	; 217
     aba:	ce df       	rcall	.-100    	; 0xa58 <ssd1306_command>
     abc:	81 ef       	ldi	r24, 0xF1	; 241
     abe:	cc df       	rcall	.-104    	; 0xa58 <ssd1306_command>
     ac0:	8b ed       	ldi	r24, 0xDB	; 219
     ac2:	ca df       	rcall	.-108    	; 0xa58 <ssd1306_command>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	c8 df       	rcall	.-112    	; 0xa58 <ssd1306_command>
     ac8:	84 ea       	ldi	r24, 0xA4	; 164
     aca:	c6 df       	rcall	.-116    	; 0xa58 <ssd1306_command>
     acc:	86 ea       	ldi	r24, 0xA6	; 166
     ace:	c4 df       	rcall	.-120    	; 0xa58 <ssd1306_command>
     ad0:	8f ea       	ldi	r24, 0xAF	; 175
     ad2:	c2 cf       	rjmp	.-124    	; 0xa58 <ssd1306_command>
     ad4:	08 95       	ret

00000ad6 <SendChar>:
     ad6:	cf 93       	push	r28
     ad8:	c8 2f       	mov	r28, r24
     ada:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_i2c_address>
     ade:	e0 de       	rcall	.-576    	; 0x8a0 <I2C_Start>
     ae0:	80 e4       	ldi	r24, 0x40	; 64
     ae2:	02 df       	rcall	.-508    	; 0x8e8 <I2C_Write>
     ae4:	8c 2f       	mov	r24, r28
     ae6:	00 df       	rcall	.-512    	; 0x8e8 <I2C_Write>
     ae8:	15 df       	rcall	.-470    	; 0x914 <I2C_Stop>
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <setXY>:
     aee:	cf 93       	push	r28
     af0:	c6 2f       	mov	r28, r22
     af2:	80 55       	subi	r24, 0x50	; 80
     af4:	b1 df       	rcall	.-158    	; 0xa58 <ssd1306_command>
     af6:	8c 2f       	mov	r24, r28
     af8:	88 0f       	add	r24, r24
     afa:	88 0f       	add	r24, r24
     afc:	88 0f       	add	r24, r24
     afe:	88 70       	andi	r24, 0x08	; 8
     b00:	ab df       	rcall	.-170    	; 0xa58 <ssd1306_command>
     b02:	8c 2f       	mov	r24, r28
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	96 95       	lsr	r25
     b08:	87 95       	ror	r24
     b0a:	8f 70       	andi	r24, 0x0F	; 15
     b0c:	80 5f       	subi	r24, 0xF0	; 240
     b0e:	a4 df       	rcall	.-184    	; 0xa58 <ssd1306_command>
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <clear_display>:
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	d0 e0       	ldi	r29, 0x00	; 0
     b1a:	0b c0       	rjmp	.+22     	; 0xb32 <clear_display+0x1e>
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	8d 2f       	mov	r24, r29
     b20:	e6 df       	rcall	.-52     	; 0xaee <setXY>
     b22:	c0 e0       	ldi	r28, 0x00	; 0
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <clear_display+0x18>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	d6 df       	rcall	.-84     	; 0xad6 <SendChar>
     b2a:	cf 5f       	subi	r28, 0xFF	; 255
     b2c:	cc 23       	and	r28, r28
     b2e:	dc f7       	brge	.-10     	; 0xb26 <clear_display+0x12>
     b30:	df 5f       	subi	r29, 0xFF	; 255
     b32:	d8 30       	cpi	r29, 0x08	; 8
     b34:	98 f3       	brcs	.-26     	; 0xb1c <clear_display+0x8>
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <sendCharXY>:
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	18 2f       	mov	r17, r24
     b44:	86 2f       	mov	r24, r22
     b46:	64 2f       	mov	r22, r20
     b48:	d2 df       	rcall	.-92     	; 0xaee <setXY>
     b4a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_i2c_address>
     b4e:	a8 de       	rcall	.-688    	; 0x8a0 <I2C_Start>
     b50:	80 e4       	ldi	r24, 0x40	; 64
     b52:	ca de       	rcall	.-620    	; 0x8e8 <I2C_Write>
     b54:	c0 e0       	ldi	r28, 0x00	; 0
     b56:	d0 e0       	ldi	r29, 0x00	; 0
     b58:	10 c0       	rjmp	.+32     	; 0xb7a <sendCharXY+0x3e>
     b5a:	e1 2f       	mov	r30, r17
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	b0 97       	sbiw	r30, 0x20	; 32
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	ec 51       	subi	r30, 0x1C	; 28
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	ec 0f       	add	r30, r28
     b72:	fd 1f       	adc	r31, r29
     b74:	84 91       	lpm	r24, Z
     b76:	b8 de       	rcall	.-656    	; 0x8e8 <I2C_Write>
     b78:	21 96       	adiw	r28, 0x01	; 1
     b7a:	c8 30       	cpi	r28, 0x08	; 8
     b7c:	d1 05       	cpc	r29, r1
     b7e:	6c f3       	brlt	.-38     	; 0xb5a <sendCharXY+0x1e>
     b80:	c9 de       	rcall	.-622    	; 0x914 <I2C_Stop>
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	08 95       	ret

00000b8a <sendStrXY>:
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	ec 01       	movw	r28, r24
     b94:	86 2f       	mov	r24, r22
     b96:	06 2f       	mov	r16, r22
     b98:	64 2f       	mov	r22, r20
     b9a:	a9 df       	rcall	.-174    	; 0xaee <setXY>
     b9c:	1c c0       	rjmp	.+56     	; 0xbd6 <sendStrXY+0x4c>
     b9e:	8a 30       	cpi	r24, 0x0A	; 10
     ba0:	29 f4       	brne	.+10     	; 0xbac <sendStrXY+0x22>
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 0f       	add	r24, r16
     ba8:	a2 df       	rcall	.-188    	; 0xaee <setXY>
     baa:	21 96       	adiw	r28, 0x01	; 1
     bac:	10 e0       	ldi	r17, 0x00	; 0
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <sendStrXY+0x46>
     bb0:	e8 81       	ld	r30, Y
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	b0 97       	sbiw	r30, 0x20	; 32
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	ec 51       	subi	r30, 0x1C	; 28
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	e1 0f       	add	r30, r17
     bc8:	f1 1d       	adc	r31, r1
     bca:	84 91       	lpm	r24, Z
     bcc:	84 df       	rcall	.-248    	; 0xad6 <SendChar>
     bce:	1f 5f       	subi	r17, 0xFF	; 255
     bd0:	18 30       	cpi	r17, 0x08	; 8
     bd2:	70 f3       	brcs	.-36     	; 0xbb0 <sendStrXY+0x26>
     bd4:	21 96       	adiw	r28, 0x01	; 1
     bd6:	88 81       	ld	r24, Y
     bd8:	81 11       	cpse	r24, r1
     bda:	e1 cf       	rjmp	.-62     	; 0xb9e <sendStrXY+0x14>
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	08 95       	ret

00000be6 <print_fonts>:
void print_fonts(){
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
	clear_display();
     bf4:	8f df       	rcall	.-226    	; 0xb14 <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
     bf6:	e1 2c       	mov	r14, r1
     bf8:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
     bfa:	68 94       	set
     bfc:	dd 24       	eor	r13, r13
     bfe:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
     c00:	27 c0       	rjmp	.+78     	; 0xc50 <print_fonts+0x6a>
		setXY(k,0);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	8e 2d       	mov	r24, r14
     c06:	73 df       	rcall	.-282    	; 0xaee <setXY>

		for (int j=0;j<16;j++)
     c08:	00 e0       	ldi	r16, 0x00	; 0
     c0a:	10 e0       	ldi	r17, 0x00	; 0
     c0c:	19 c0       	rjmp	.+50     	; 0xc40 <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
     c0e:	f8 01       	movw	r30, r16
     c10:	ed 0d       	add	r30, r13
     c12:	f1 1d       	adc	r31, r1
     c14:	b0 97       	sbiw	r30, 0x20	; 32
     c16:	ee 0f       	add	r30, r30
     c18:	ff 1f       	adc	r31, r31
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	ec 51       	subi	r30, 0x1C	; 28
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	ec 0f       	add	r30, r28
     c28:	fd 1f       	adc	r31, r29
     c2a:	84 91       	lpm	r24, Z
     c2c:	54 df       	rcall	.-344    	; 0xad6 <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
     c2e:	21 96       	adiw	r28, 0x01	; 1
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <print_fonts+0x50>
     c32:	c0 e0       	ldi	r28, 0x00	; 0
     c34:	d0 e0       	ldi	r29, 0x00	; 0
     c36:	c8 30       	cpi	r28, 0x08	; 8
     c38:	d1 05       	cpc	r29, r1
     c3a:	4c f3       	brlt	.-46     	; 0xc0e <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	00 31       	cpi	r16, 0x10	; 16
     c42:	11 05       	cpc	r17, r1
     c44:	b4 f3       	brlt	.-20     	; 0xc32 <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
     c46:	80 e1       	ldi	r24, 0x10	; 16
     c48:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	e8 1a       	sub	r14, r24
     c4e:	f8 0a       	sbc	r15, r24
     c50:	86 e0       	ldi	r24, 0x06	; 6
     c52:	e8 16       	cp	r14, r24
     c54:	f1 04       	cpc	r15, r1
     c56:	ac f2       	brlt	.-86     	; 0xc02 <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	df 90       	pop	r13
     c66:	08 95       	ret

00000c68 <UART_initASYNC0>:
#include "I2C.h"  //include library for i2c driver
#include "ssd1306.h" //include display driver
#include <util/delay.h>

int UART_initASYNC0(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     c68:	82 95       	swap	r24
     c6a:	92 95       	swap	r25
     c6c:	90 7f       	andi	r25, 0xF0	; 240
     c6e:	98 27       	eor	r25, r24
     c70:	80 7f       	andi	r24, 0xF0	; 240
     c72:	98 27       	eor	r25, r24
     c74:	9c 01       	movw	r18, r24
     c76:	99 0f       	add	r25, r25
     c78:	44 0b       	sbc	r20, r20
     c7a:	55 0b       	sbc	r21, r21
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	74 e2       	ldi	r23, 0x24	; 36
     c80:	84 ef       	ldi	r24, 0xF4	; 244
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	3f d2       	rcall	.+1150   	; 0x1104 <__udivmodsi4>
     c86:	21 50       	subi	r18, 0x01	; 1
     c88:	31 09       	sbc	r19, r1
     c8a:	e1 e1       	ldi	r30, 0x11	; 17
     c8c:	f2 e0       	ldi	r31, 0x02	; 2
     c8e:	31 83       	std	Z+1, r19	; 0x01
     c90:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)(UART.ubrr>>8);
     c92:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H = (unsigned char)UART.ubrr;
     c96:	80 81       	ld	r24, Z
     c98:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UCSR0A |= (1<<RXC0);
     c9c:	e0 ec       	ldi	r30, 0xC0	; 192
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 68       	ori	r24, 0x80	; 128
     ca4:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(1<<UCSZ02);
     ca6:	e1 ec       	ldi	r30, 0xC1	; 193
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8c 69       	ori	r24, 0x9C	; 156
     cae:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     cb0:	e2 ec       	ldi	r30, 0xC2	; 194
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	86 60       	ori	r24, 0x06	; 6
     cb8:	80 83       	st	Z, r24
	return 1;
};
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	08 95       	ret

00000cc0 <UART_initASYNC1>:

int UART_initASYNC1(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     cc0:	82 95       	swap	r24
     cc2:	92 95       	swap	r25
     cc4:	90 7f       	andi	r25, 0xF0	; 240
     cc6:	98 27       	eor	r25, r24
     cc8:	80 7f       	andi	r24, 0xF0	; 240
     cca:	98 27       	eor	r25, r24
     ccc:	9c 01       	movw	r18, r24
     cce:	99 0f       	add	r25, r25
     cd0:	44 0b       	sbc	r20, r20
     cd2:	55 0b       	sbc	r21, r21
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	74 e2       	ldi	r23, 0x24	; 36
     cd8:	84 ef       	ldi	r24, 0xF4	; 244
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	13 d2       	rcall	.+1062   	; 0x1104 <__udivmodsi4>
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	31 09       	sbc	r19, r1
     ce2:	e1 e1       	ldi	r30, 0x11	; 17
     ce4:	f2 e0       	ldi	r31, 0x02	; 2
     ce6:	31 83       	std	Z+1, r19	; 0x01
     ce8:	20 83       	st	Z, r18
	UBRR1L = (unsigned char)(UART.ubrr>>8);
     cea:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	UBRR1H = (unsigned char)UART.ubrr;
     cee:	80 81       	ld	r24, Z
     cf0:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UCSR1A |= (1<<RXC1);
     cf4:	e8 ec       	ldi	r30, 0xC8	; 200
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 68       	ori	r24, 0x80	; 128
     cfc:	80 83       	st	Z, r24
	UCSR1B |= (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1)|(1<<UCSZ12);
     cfe:	e9 ec       	ldi	r30, 0xC9	; 201
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8c 69       	ori	r24, 0x9C	; 156
     d06:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
     d08:	ea ec       	ldi	r30, 0xCA	; 202
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	86 60       	ori	r24, 0x06	; 6
     d10:	80 83       	st	Z, r24
	return 1;
};
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	08 95       	ret

00000d18 <UART_initASYNC2>:

int UART_initASYNC2(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     d18:	82 95       	swap	r24
     d1a:	92 95       	swap	r25
     d1c:	90 7f       	andi	r25, 0xF0	; 240
     d1e:	98 27       	eor	r25, r24
     d20:	80 7f       	andi	r24, 0xF0	; 240
     d22:	98 27       	eor	r25, r24
     d24:	9c 01       	movw	r18, r24
     d26:	99 0f       	add	r25, r25
     d28:	44 0b       	sbc	r20, r20
     d2a:	55 0b       	sbc	r21, r21
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	74 e2       	ldi	r23, 0x24	; 36
     d30:	84 ef       	ldi	r24, 0xF4	; 244
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	e7 d1       	rcall	.+974    	; 0x1104 <__udivmodsi4>
     d36:	21 50       	subi	r18, 0x01	; 1
     d38:	31 09       	sbc	r19, r1
     d3a:	e1 e1       	ldi	r30, 0x11	; 17
     d3c:	f2 e0       	ldi	r31, 0x02	; 2
     d3e:	31 83       	std	Z+1, r19	; 0x01
     d40:	20 83       	st	Z, r18
	UBRR2L = (unsigned char)(UART.ubrr>>8);
     d42:	30 93 d4 00 	sts	0x00D4, r19	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UBRR2H = (unsigned char)UART.ubrr;
     d46:	80 81       	ld	r24, Z
     d48:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
	UCSR2A |= (1<<RXC2);
     d4c:	e0 ed       	ldi	r30, 0xD0	; 208
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	80 83       	st	Z, r24
	UCSR2B |= (1<<RXCIE2)|(1<<RXEN2)|(1<<TXEN2)|(1<<UCSZ22);
     d56:	e1 ed       	ldi	r30, 0xD1	; 209
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8c 69       	ori	r24, 0x9C	; 156
     d5e:	80 83       	st	Z, r24
	UCSR2C |= (1<<UCSZ21)|(1<<UCSZ20);
     d60:	e2 ed       	ldi	r30, 0xD2	; 210
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	86 60       	ori	r24, 0x06	; 6
     d68:	80 83       	st	Z, r24
	return 1;
};
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	08 95       	ret

00000d70 <UART_initASYNC3>:

int UART_initASYNC3(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
     d70:	82 95       	swap	r24
     d72:	92 95       	swap	r25
     d74:	90 7f       	andi	r25, 0xF0	; 240
     d76:	98 27       	eor	r25, r24
     d78:	80 7f       	andi	r24, 0xF0	; 240
     d7a:	98 27       	eor	r25, r24
     d7c:	9c 01       	movw	r18, r24
     d7e:	99 0f       	add	r25, r25
     d80:	44 0b       	sbc	r20, r20
     d82:	55 0b       	sbc	r21, r21
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	74 e2       	ldi	r23, 0x24	; 36
     d88:	84 ef       	ldi	r24, 0xF4	; 244
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	bb d1       	rcall	.+886    	; 0x1104 <__udivmodsi4>
     d8e:	21 50       	subi	r18, 0x01	; 1
     d90:	31 09       	sbc	r19, r1
     d92:	e1 e1       	ldi	r30, 0x11	; 17
     d94:	f2 e0       	ldi	r31, 0x02	; 2
     d96:	31 83       	std	Z+1, r19	; 0x01
     d98:	20 83       	st	Z, r18
	UBRR3L = (unsigned char)(UART.ubrr>>8);
     d9a:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	UBRR3H = (unsigned char)UART.ubrr;
     d9e:	80 81       	ld	r24, Z
     da0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	UCSR3A |= (1<<RXC1);
     da4:	e0 e3       	ldi	r30, 0x30	; 48
     da6:	f1 e0       	ldi	r31, 0x01	; 1
     da8:	80 81       	ld	r24, Z
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	80 83       	st	Z, r24
	UCSR3B |= (1<<RXCIE3)|(1<<RXEN3)|(1<<TXEN3)|(1<<UCSZ32);
     dae:	e1 e3       	ldi	r30, 0x31	; 49
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	80 81       	ld	r24, Z
     db4:	8c 69       	ori	r24, 0x9C	; 156
     db6:	80 83       	st	Z, r24
	UCSR3C |= (1<<UCSZ31)|(1<<UCSZ30);
     db8:	e2 e3       	ldi	r30, 0x32	; 50
     dba:	f1 e0       	ldi	r31, 0x01	; 1
     dbc:	80 81       	ld	r24, Z
     dbe:	86 60       	ori	r24, 0x06	; 6
     dc0:	80 83       	st	Z, r24
	return 1;
};
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	08 95       	ret

00000dc8 <UART_init>:

int initSLAVE(int rate, int UARTReg, int UARTBaudRegList[13][4][3]){
	return 1;
};*/

int UART_init(int mode, int baudRate, int UARTId){
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	28 97       	sbiw	r28, 0x08	; 8
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
	if(UARTId > 3){
     ddc:	44 30       	cpi	r20, 0x04	; 4
     dde:	51 05       	cpc	r21, r1
     de0:	f4 f4       	brge	.+60     	; 0xe1e <UART_init+0x56>
     de2:	cb 01       	movw	r24, r22
		return 0;
	}
	sei();
     de4:	78 94       	sei
	UART.UARTReg = UARTId;
     de6:	50 93 14 02 	sts	0x0214, r21	; 0x800214 <UART+0x3>
     dea:	40 93 13 02 	sts	0x0213, r20	; 0x800213 <UART+0x2>
	int (*UART_initAsyncFuncs[4])(int rate) = {UART_initASYNC0, UART_initASYNC1, UART_initASYNC2, UART_initASYNC3};
     dee:	28 e0       	ldi	r18, 0x08	; 8
     df0:	e6 e2       	ldi	r30, 0x26	; 38
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	de 01       	movw	r26, r28
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	01 90       	ld	r0, Z+
     dfa:	0d 92       	st	X+, r0
     dfc:	2a 95       	dec	r18
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <UART_init+0x30>
	(*UART_initAsyncFuncs[UARTId])(baudRate);
     e00:	44 0f       	add	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	e1 e0       	ldi	r30, 0x01	; 1
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ec 0f       	add	r30, r28
     e0a:	fd 1f       	adc	r31, r29
     e0c:	e4 0f       	add	r30, r20
     e0e:	f5 1f       	adc	r31, r21
     e10:	01 90       	ld	r0, Z+
     e12:	f0 81       	ld	r31, Z
     e14:	e0 2d       	mov	r30, r0
     e16:	19 95       	eicall
	return 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <UART_init+0x5a>
	return 1;
};*/

int UART_init(int mode, int baudRate, int UARTId){
	if(UARTId > 3){
		return 0;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
	sei();
	UART.UARTReg = UARTId;
	int (*UART_initAsyncFuncs[4])(int rate) = {UART_initASYNC0, UART_initASYNC1, UART_initASYNC2, UART_initASYNC3};
	(*UART_initAsyncFuncs[UARTId])(baudRate);
	return 1;
}
     e22:	28 96       	adiw	r28, 0x08	; 8
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <UART_transmitChar0>:

int UART_transmitChar0(char transmitionData){
	//while(~(UCSR0A & (1<<UDRE0))){}
	UCSR0B &= ~(1<<TXB80);
     e34:	e1 ec       	ldi	r30, 0xC1	; 193
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	90 81       	ld	r25, Z
     e3a:	9e 7f       	andi	r25, 0xFE	; 254
     e3c:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR0B |= (1<<TXB80);
	}
	UDR0 = transmitionData;
     e3e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 1;
};
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	08 95       	ret

00000e48 <UART_transmitChar1>:

int UART_transmitChar1(char transmitionData){
	//while(~(UCSR1A & (1<<UDRE1))){}
	UCSR1B &= ~(1<<TXB81);
     e48:	e9 ec       	ldi	r30, 0xC9	; 201
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	90 81       	ld	r25, Z
     e4e:	9e 7f       	andi	r25, 0xFE	; 254
     e50:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR1B |= (1<<TXB81);
	}
	UDR1 = transmitionData;
     e52:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	return 1;
};
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	08 95       	ret

00000e5c <UART_transmitChar2>:

int UART_transmitChar2(char transmitionData){
	//while(~(UCSR2A & (1<<UDRE2))){}
	UCSR2B &= ~(1<<TXB82);
     e5c:	e1 ed       	ldi	r30, 0xD1	; 209
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	90 81       	ld	r25, Z
     e62:	9e 7f       	andi	r25, 0xFE	; 254
     e64:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR2B |= (1<<TXB82);
	}
	UDR2 = transmitionData;
     e66:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	return 1;
};
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	08 95       	ret

00000e70 <UART_transmitChar3>:

int UART_transmitChar3(char transmitionData){
	//while(~(UCSR3A & (1<<UDRE3))){}
	UCSR3B &= ~(1<<TXB83);
     e70:	e1 e3       	ldi	r30, 0x31	; 49
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	90 81       	ld	r25, Z
     e76:	9e 7f       	andi	r25, 0xFE	; 254
     e78:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR3B |= (1<<TXB83);
	}
	UDR3 = transmitionData;
     e7a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
	return 1;
};
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	08 95       	ret

00000e84 <UART_transmitChar>:

int UART_transmitChar(char transmitionData){
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	28 97       	sbiw	r28, 0x08	; 8
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
	int (*UART_transmitCharFuncs[4])(char data) = {UART_transmitChar0, UART_transmitChar1, UART_transmitChar2, UART_transmitChar3};
     e98:	98 e0       	ldi	r25, 0x08	; 8
     e9a:	ee e2       	ldi	r30, 0x2E	; 46
     e9c:	f2 e0       	ldi	r31, 0x02	; 2
     e9e:	de 01       	movw	r26, r28
     ea0:	11 96       	adiw	r26, 0x01	; 1
     ea2:	01 90       	ld	r0, Z+
     ea4:	0d 92       	st	X+, r0
     ea6:	9a 95       	dec	r25
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <UART_transmitChar+0x1e>
	(*UART_transmitCharFuncs[UART.UARTReg])(transmitionData);
     eaa:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <UART+0x2>
     eae:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <UART+0x3>
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	21 e0       	ldi	r18, 0x01	; 1
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	2c 0f       	add	r18, r28
     ebc:	3d 1f       	adc	r19, r29
     ebe:	e2 0f       	add	r30, r18
     ec0:	f3 1f       	adc	r31, r19
     ec2:	01 90       	ld	r0, Z+
     ec4:	f0 81       	ld	r31, Z
     ec6:	e0 2d       	mov	r30, r0
     ec8:	19 95       	eicall
	return 1;
}
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	28 96       	adiw	r28, 0x08	; 8
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <UART_receiveChar0>:

int UART_receiveChar0(){
	UART.RXh = UCSR0B;
     ee0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     ee4:	e1 e1       	ldi	r30, 0x11	; 17
     ee6:	f2 e0       	ldi	r31, 0x02	; 2
     ee8:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR0;
     eea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     eee:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
     ef0:	84 81       	ldd	r24, Z+4	; 0x04
     ef2:	86 95       	lsr	r24
     ef4:	81 70       	andi	r24, 0x01	; 1
     ef6:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     ef8:	84 81       	ldd	r24, Z+4	; 0x04
     efa:	85 81       	ldd	r24, Z+5	; 0x05
     efc:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	08 95       	ret

00000f04 <UART_receiveChar1>:

int UART_receiveChar1(){
	UART.RXh = UCSR1B;
     f04:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
     f08:	e1 e1       	ldi	r30, 0x11	; 17
     f0a:	f2 e0       	ldi	r31, 0x02	; 2
     f0c:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR1;
     f0e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     f12:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
     f14:	84 81       	ldd	r24, Z+4	; 0x04
     f16:	86 95       	lsr	r24
     f18:	81 70       	andi	r24, 0x01	; 1
     f1a:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     f1c:	84 81       	ldd	r24, Z+4	; 0x04
     f1e:	85 81       	ldd	r24, Z+5	; 0x05
     f20:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	08 95       	ret

00000f28 <UART_receiveChar2>:

int UART_receiveChar2(){
	UART.RXh = UCSR2B;
     f28:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
     f2c:	e1 e1       	ldi	r30, 0x11	; 17
     f2e:	f2 e0       	ldi	r31, 0x02	; 2
     f30:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR2;
     f32:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     f36:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
     f38:	84 81       	ldd	r24, Z+4	; 0x04
     f3a:	86 95       	lsr	r24
     f3c:	81 70       	andi	r24, 0x01	; 1
     f3e:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     f40:	84 81       	ldd	r24, Z+4	; 0x04
     f42:	85 81       	ldd	r24, Z+5	; 0x05
     f44:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	08 95       	ret

00000f4c <UART_receiveChar3>:

int UART_receiveChar3(){
	UART.RXh = UCSR3B;
     f4c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
     f50:	e1 e1       	ldi	r30, 0x11	; 17
     f52:	f2 e0       	ldi	r31, 0x02	; 2
     f54:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR3;
     f56:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
     f5a:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
     f5c:	84 81       	ldd	r24, Z+4	; 0x04
     f5e:	86 95       	lsr	r24
     f60:	81 70       	andi	r24, 0x01	; 1
     f62:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
     f64:	84 81       	ldd	r24, Z+4	; 0x04
     f66:	85 81       	ldd	r24, Z+5	; 0x05
     f68:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	08 95       	ret

00000f70 <UART_receiveChar>:

int UART_receiveChar(){
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	28 97       	sbiw	r28, 0x08	; 8
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
	int(*UART_receiveCharFuncs[4])() = {UART_receiveChar0, UART_receiveChar1, UART_receiveChar2, UART_receiveChar3};
     f84:	88 e0       	ldi	r24, 0x08	; 8
     f86:	e6 e3       	ldi	r30, 0x36	; 54
     f88:	f2 e0       	ldi	r31, 0x02	; 2
     f8a:	de 01       	movw	r26, r28
     f8c:	11 96       	adiw	r26, 0x01	; 1
     f8e:	01 90       	ld	r0, Z+
     f90:	0d 92       	st	X+, r0
     f92:	8a 95       	dec	r24
     f94:	e1 f7       	brne	.-8      	; 0xf8e <UART_receiveChar+0x1e>
	(*UART_receiveCharFuncs[UART.UARTReg])();
     f96:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <UART+0x2>
     f9a:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <UART+0x3>
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	8c 0f       	add	r24, r28
     fa8:	9d 1f       	adc	r25, r29
     faa:	e8 0f       	add	r30, r24
     fac:	f9 1f       	adc	r31, r25
     fae:	01 90       	ld	r0, Z+
     fb0:	f0 81       	ld	r31, Z
     fb2:	e0 2d       	mov	r30, r0
     fb4:	19 95       	eicall
	return 1;
}
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	28 96       	adiw	r28, 0x08	; 8
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <__vector_25>:
struct uart UART = {
	.UART_init = UART_init,
	.UART_transmitChar = UART_transmitChar,
};

ISR(USART0_RX_vect){
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	0b b6       	in	r0, 0x3b	; 59
     fd8:	0f 92       	push	r0
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
	UART_receiveChar();
     ff2:	be df       	rcall	.-132    	; 0xf70 <UART_receiveChar>
};
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0b be       	out	0x3b, r0	; 59
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_36>:

ISR(USART1_RX_vect){
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	0b b6       	in	r0, 0x3b	; 59
    1026:	0f 92       	push	r0
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
	UART_receiveChar();
    1040:	97 df       	rcall	.-210    	; 0xf70 <UART_receiveChar>
};
    1042:	ff 91       	pop	r31
    1044:	ef 91       	pop	r30
    1046:	bf 91       	pop	r27
    1048:	af 91       	pop	r26
    104a:	9f 91       	pop	r25
    104c:	8f 91       	pop	r24
    104e:	7f 91       	pop	r23
    1050:	6f 91       	pop	r22
    1052:	5f 91       	pop	r21
    1054:	4f 91       	pop	r20
    1056:	3f 91       	pop	r19
    1058:	2f 91       	pop	r18
    105a:	0f 90       	pop	r0
    105c:	0b be       	out	0x3b, r0	; 59
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <__vector_51>:

ISR(USART2_RX_vect){
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	0b b6       	in	r0, 0x3b	; 59
    1074:	0f 92       	push	r0
    1076:	2f 93       	push	r18
    1078:	3f 93       	push	r19
    107a:	4f 93       	push	r20
    107c:	5f 93       	push	r21
    107e:	6f 93       	push	r22
    1080:	7f 93       	push	r23
    1082:	8f 93       	push	r24
    1084:	9f 93       	push	r25
    1086:	af 93       	push	r26
    1088:	bf 93       	push	r27
    108a:	ef 93       	push	r30
    108c:	ff 93       	push	r31
	UART_receiveChar();
    108e:	70 df       	rcall	.-288    	; 0xf70 <UART_receiveChar>
};
    1090:	ff 91       	pop	r31
    1092:	ef 91       	pop	r30
    1094:	bf 91       	pop	r27
    1096:	af 91       	pop	r26
    1098:	9f 91       	pop	r25
    109a:	8f 91       	pop	r24
    109c:	7f 91       	pop	r23
    109e:	6f 91       	pop	r22
    10a0:	5f 91       	pop	r21
    10a2:	4f 91       	pop	r20
    10a4:	3f 91       	pop	r19
    10a6:	2f 91       	pop	r18
    10a8:	0f 90       	pop	r0
    10aa:	0b be       	out	0x3b, r0	; 59
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <__vector_54>:

ISR(USART3_RX_vect){
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	0b b6       	in	r0, 0x3b	; 59
    10c2:	0f 92       	push	r0
    10c4:	2f 93       	push	r18
    10c6:	3f 93       	push	r19
    10c8:	4f 93       	push	r20
    10ca:	5f 93       	push	r21
    10cc:	6f 93       	push	r22
    10ce:	7f 93       	push	r23
    10d0:	8f 93       	push	r24
    10d2:	9f 93       	push	r25
    10d4:	af 93       	push	r26
    10d6:	bf 93       	push	r27
    10d8:	ef 93       	push	r30
    10da:	ff 93       	push	r31
	UART_receiveChar();
    10dc:	49 df       	rcall	.-366    	; 0xf70 <UART_receiveChar>
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	bf 91       	pop	r27
    10e4:	af 91       	pop	r26
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	7f 91       	pop	r23
    10ec:	6f 91       	pop	r22
    10ee:	5f 91       	pop	r21
    10f0:	4f 91       	pop	r20
    10f2:	3f 91       	pop	r19
    10f4:	2f 91       	pop	r18
    10f6:	0f 90       	pop	r0
    10f8:	0b be       	out	0x3b, r0	; 59
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <__udivmodsi4>:
    1104:	a1 e2       	ldi	r26, 0x21	; 33
    1106:	1a 2e       	mov	r1, r26
    1108:	aa 1b       	sub	r26, r26
    110a:	bb 1b       	sub	r27, r27
    110c:	fd 01       	movw	r30, r26
    110e:	0d c0       	rjmp	.+26     	; 0x112a <__udivmodsi4_ep>

00001110 <__udivmodsi4_loop>:
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	ee 1f       	adc	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	a2 17       	cp	r26, r18
    111a:	b3 07       	cpc	r27, r19
    111c:	e4 07       	cpc	r30, r20
    111e:	f5 07       	cpc	r31, r21
    1120:	20 f0       	brcs	.+8      	; 0x112a <__udivmodsi4_ep>
    1122:	a2 1b       	sub	r26, r18
    1124:	b3 0b       	sbc	r27, r19
    1126:	e4 0b       	sbc	r30, r20
    1128:	f5 0b       	sbc	r31, r21

0000112a <__udivmodsi4_ep>:
    112a:	66 1f       	adc	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	1a 94       	dec	r1
    1134:	69 f7       	brne	.-38     	; 0x1110 <__udivmodsi4_loop>
    1136:	60 95       	com	r22
    1138:	70 95       	com	r23
    113a:	80 95       	com	r24
    113c:	90 95       	com	r25
    113e:	9b 01       	movw	r18, r22
    1140:	ac 01       	movw	r20, r24
    1142:	bd 01       	movw	r22, r26
    1144:	cf 01       	movw	r24, r30
    1146:	08 95       	ret

00001148 <sprintf>:
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	2e 97       	sbiw	r28, 0x0e	; 14
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	0e 89       	ldd	r16, Y+22	; 0x16
    1162:	1f 89       	ldd	r17, Y+23	; 0x17
    1164:	86 e0       	ldi	r24, 0x06	; 6
    1166:	8c 83       	std	Y+4, r24	; 0x04
    1168:	1a 83       	std	Y+2, r17	; 0x02
    116a:	09 83       	std	Y+1, r16	; 0x01
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	9f e7       	ldi	r25, 0x7F	; 127
    1170:	9e 83       	std	Y+6, r25	; 0x06
    1172:	8d 83       	std	Y+5, r24	; 0x05
    1174:	ae 01       	movw	r20, r28
    1176:	46 5e       	subi	r20, 0xE6	; 230
    1178:	5f 4f       	sbci	r21, 0xFF	; 255
    117a:	68 8d       	ldd	r22, Y+24	; 0x18
    117c:	79 8d       	ldd	r23, Y+25	; 0x19
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	10 d0       	rcall	.+32     	; 0x11a4 <vfprintf>
    1184:	ef 81       	ldd	r30, Y+7	; 0x07
    1186:	f8 85       	ldd	r31, Y+8	; 0x08
    1188:	e0 0f       	add	r30, r16
    118a:	f1 1f       	adc	r31, r17
    118c:	10 82       	st	Z, r1
    118e:	2e 96       	adiw	r28, 0x0e	; 14
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	08 95       	ret

000011a4 <vfprintf>:
    11a4:	2f 92       	push	r2
    11a6:	3f 92       	push	r3
    11a8:	4f 92       	push	r4
    11aa:	5f 92       	push	r5
    11ac:	6f 92       	push	r6
    11ae:	7f 92       	push	r7
    11b0:	8f 92       	push	r8
    11b2:	9f 92       	push	r9
    11b4:	af 92       	push	r10
    11b6:	bf 92       	push	r11
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	2b 97       	sbiw	r28, 0x0b	; 11
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	6c 01       	movw	r12, r24
    11da:	7b 01       	movw	r14, r22
    11dc:	8a 01       	movw	r16, r20
    11de:	fc 01       	movw	r30, r24
    11e0:	17 82       	std	Z+7, r1	; 0x07
    11e2:	16 82       	std	Z+6, r1	; 0x06
    11e4:	83 81       	ldd	r24, Z+3	; 0x03
    11e6:	81 ff       	sbrs	r24, 1
    11e8:	bf c1       	rjmp	.+894    	; 0x1568 <vfprintf+0x3c4>
    11ea:	ce 01       	movw	r24, r28
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	3c 01       	movw	r6, r24
    11f0:	f6 01       	movw	r30, r12
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	f7 01       	movw	r30, r14
    11f6:	93 fd       	sbrc	r25, 3
    11f8:	85 91       	lpm	r24, Z+
    11fa:	93 ff       	sbrs	r25, 3
    11fc:	81 91       	ld	r24, Z+
    11fe:	7f 01       	movw	r14, r30
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <vfprintf+0x62>
    1204:	ad c1       	rjmp	.+858    	; 0x1560 <vfprintf+0x3bc>
    1206:	85 32       	cpi	r24, 0x25	; 37
    1208:	39 f4       	brne	.+14     	; 0x1218 <vfprintf+0x74>
    120a:	93 fd       	sbrc	r25, 3
    120c:	85 91       	lpm	r24, Z+
    120e:	93 ff       	sbrs	r25, 3
    1210:	81 91       	ld	r24, Z+
    1212:	7f 01       	movw	r14, r30
    1214:	85 32       	cpi	r24, 0x25	; 37
    1216:	21 f4       	brne	.+8      	; 0x1220 <vfprintf+0x7c>
    1218:	b6 01       	movw	r22, r12
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	d6 d1       	rcall	.+940    	; 0x15ca <fputc>
    121e:	e8 cf       	rjmp	.-48     	; 0x11f0 <vfprintf+0x4c>
    1220:	91 2c       	mov	r9, r1
    1222:	21 2c       	mov	r2, r1
    1224:	31 2c       	mov	r3, r1
    1226:	ff e1       	ldi	r31, 0x1F	; 31
    1228:	f3 15       	cp	r31, r3
    122a:	d8 f0       	brcs	.+54     	; 0x1262 <vfprintf+0xbe>
    122c:	8b 32       	cpi	r24, 0x2B	; 43
    122e:	79 f0       	breq	.+30     	; 0x124e <vfprintf+0xaa>
    1230:	38 f4       	brcc	.+14     	; 0x1240 <vfprintf+0x9c>
    1232:	80 32       	cpi	r24, 0x20	; 32
    1234:	79 f0       	breq	.+30     	; 0x1254 <vfprintf+0xb0>
    1236:	83 32       	cpi	r24, 0x23	; 35
    1238:	a1 f4       	brne	.+40     	; 0x1262 <vfprintf+0xbe>
    123a:	23 2d       	mov	r18, r3
    123c:	20 61       	ori	r18, 0x10	; 16
    123e:	1d c0       	rjmp	.+58     	; 0x127a <vfprintf+0xd6>
    1240:	8d 32       	cpi	r24, 0x2D	; 45
    1242:	61 f0       	breq	.+24     	; 0x125c <vfprintf+0xb8>
    1244:	80 33       	cpi	r24, 0x30	; 48
    1246:	69 f4       	brne	.+26     	; 0x1262 <vfprintf+0xbe>
    1248:	23 2d       	mov	r18, r3
    124a:	21 60       	ori	r18, 0x01	; 1
    124c:	16 c0       	rjmp	.+44     	; 0x127a <vfprintf+0xd6>
    124e:	83 2d       	mov	r24, r3
    1250:	82 60       	ori	r24, 0x02	; 2
    1252:	38 2e       	mov	r3, r24
    1254:	e3 2d       	mov	r30, r3
    1256:	e4 60       	ori	r30, 0x04	; 4
    1258:	3e 2e       	mov	r3, r30
    125a:	2a c0       	rjmp	.+84     	; 0x12b0 <vfprintf+0x10c>
    125c:	f3 2d       	mov	r31, r3
    125e:	f8 60       	ori	r31, 0x08	; 8
    1260:	1d c0       	rjmp	.+58     	; 0x129c <vfprintf+0xf8>
    1262:	37 fc       	sbrc	r3, 7
    1264:	2d c0       	rjmp	.+90     	; 0x12c0 <vfprintf+0x11c>
    1266:	20 ed       	ldi	r18, 0xD0	; 208
    1268:	28 0f       	add	r18, r24
    126a:	2a 30       	cpi	r18, 0x0A	; 10
    126c:	40 f0       	brcs	.+16     	; 0x127e <vfprintf+0xda>
    126e:	8e 32       	cpi	r24, 0x2E	; 46
    1270:	b9 f4       	brne	.+46     	; 0x12a0 <vfprintf+0xfc>
    1272:	36 fc       	sbrc	r3, 6
    1274:	75 c1       	rjmp	.+746    	; 0x1560 <vfprintf+0x3bc>
    1276:	23 2d       	mov	r18, r3
    1278:	20 64       	ori	r18, 0x40	; 64
    127a:	32 2e       	mov	r3, r18
    127c:	19 c0       	rjmp	.+50     	; 0x12b0 <vfprintf+0x10c>
    127e:	36 fe       	sbrs	r3, 6
    1280:	06 c0       	rjmp	.+12     	; 0x128e <vfprintf+0xea>
    1282:	8a e0       	ldi	r24, 0x0A	; 10
    1284:	98 9e       	mul	r9, r24
    1286:	20 0d       	add	r18, r0
    1288:	11 24       	eor	r1, r1
    128a:	92 2e       	mov	r9, r18
    128c:	11 c0       	rjmp	.+34     	; 0x12b0 <vfprintf+0x10c>
    128e:	ea e0       	ldi	r30, 0x0A	; 10
    1290:	2e 9e       	mul	r2, r30
    1292:	20 0d       	add	r18, r0
    1294:	11 24       	eor	r1, r1
    1296:	22 2e       	mov	r2, r18
    1298:	f3 2d       	mov	r31, r3
    129a:	f0 62       	ori	r31, 0x20	; 32
    129c:	3f 2e       	mov	r3, r31
    129e:	08 c0       	rjmp	.+16     	; 0x12b0 <vfprintf+0x10c>
    12a0:	8c 36       	cpi	r24, 0x6C	; 108
    12a2:	21 f4       	brne	.+8      	; 0x12ac <vfprintf+0x108>
    12a4:	83 2d       	mov	r24, r3
    12a6:	80 68       	ori	r24, 0x80	; 128
    12a8:	38 2e       	mov	r3, r24
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <vfprintf+0x10c>
    12ac:	88 36       	cpi	r24, 0x68	; 104
    12ae:	41 f4       	brne	.+16     	; 0x12c0 <vfprintf+0x11c>
    12b0:	f7 01       	movw	r30, r14
    12b2:	93 fd       	sbrc	r25, 3
    12b4:	85 91       	lpm	r24, Z+
    12b6:	93 ff       	sbrs	r25, 3
    12b8:	81 91       	ld	r24, Z+
    12ba:	7f 01       	movw	r14, r30
    12bc:	81 11       	cpse	r24, r1
    12be:	b3 cf       	rjmp	.-154    	; 0x1226 <vfprintf+0x82>
    12c0:	98 2f       	mov	r25, r24
    12c2:	9f 7d       	andi	r25, 0xDF	; 223
    12c4:	95 54       	subi	r25, 0x45	; 69
    12c6:	93 30       	cpi	r25, 0x03	; 3
    12c8:	28 f4       	brcc	.+10     	; 0x12d4 <vfprintf+0x130>
    12ca:	0c 5f       	subi	r16, 0xFC	; 252
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	9f e3       	ldi	r25, 0x3F	; 63
    12d0:	99 83       	std	Y+1, r25	; 0x01
    12d2:	0d c0       	rjmp	.+26     	; 0x12ee <vfprintf+0x14a>
    12d4:	83 36       	cpi	r24, 0x63	; 99
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <vfprintf+0x140>
    12d8:	83 37       	cpi	r24, 0x73	; 115
    12da:	71 f0       	breq	.+28     	; 0x12f8 <vfprintf+0x154>
    12dc:	83 35       	cpi	r24, 0x53	; 83
    12de:	09 f0       	breq	.+2      	; 0x12e2 <vfprintf+0x13e>
    12e0:	55 c0       	rjmp	.+170    	; 0x138c <vfprintf+0x1e8>
    12e2:	20 c0       	rjmp	.+64     	; 0x1324 <vfprintf+0x180>
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 81       	ld	r24, Z
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	0e 5f       	subi	r16, 0xFE	; 254
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	88 24       	eor	r8, r8
    12f0:	83 94       	inc	r8
    12f2:	91 2c       	mov	r9, r1
    12f4:	53 01       	movw	r10, r6
    12f6:	12 c0       	rjmp	.+36     	; 0x131c <vfprintf+0x178>
    12f8:	28 01       	movw	r4, r16
    12fa:	f2 e0       	ldi	r31, 0x02	; 2
    12fc:	4f 0e       	add	r4, r31
    12fe:	51 1c       	adc	r5, r1
    1300:	f8 01       	movw	r30, r16
    1302:	a0 80       	ld	r10, Z
    1304:	b1 80       	ldd	r11, Z+1	; 0x01
    1306:	36 fe       	sbrs	r3, 6
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <vfprintf+0x16c>
    130a:	69 2d       	mov	r22, r9
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <vfprintf+0x170>
    1310:	6f ef       	ldi	r22, 0xFF	; 255
    1312:	7f ef       	ldi	r23, 0xFF	; 255
    1314:	c5 01       	movw	r24, r10
    1316:	4e d1       	rcall	.+668    	; 0x15b4 <strnlen>
    1318:	4c 01       	movw	r8, r24
    131a:	82 01       	movw	r16, r4
    131c:	f3 2d       	mov	r31, r3
    131e:	ff 77       	andi	r31, 0x7F	; 127
    1320:	3f 2e       	mov	r3, r31
    1322:	15 c0       	rjmp	.+42     	; 0x134e <vfprintf+0x1aa>
    1324:	28 01       	movw	r4, r16
    1326:	22 e0       	ldi	r18, 0x02	; 2
    1328:	42 0e       	add	r4, r18
    132a:	51 1c       	adc	r5, r1
    132c:	f8 01       	movw	r30, r16
    132e:	a0 80       	ld	r10, Z
    1330:	b1 80       	ldd	r11, Z+1	; 0x01
    1332:	36 fe       	sbrs	r3, 6
    1334:	03 c0       	rjmp	.+6      	; 0x133c <vfprintf+0x198>
    1336:	69 2d       	mov	r22, r9
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <vfprintf+0x19c>
    133c:	6f ef       	ldi	r22, 0xFF	; 255
    133e:	7f ef       	ldi	r23, 0xFF	; 255
    1340:	c5 01       	movw	r24, r10
    1342:	2d d1       	rcall	.+602    	; 0x159e <strnlen_P>
    1344:	4c 01       	movw	r8, r24
    1346:	f3 2d       	mov	r31, r3
    1348:	f0 68       	ori	r31, 0x80	; 128
    134a:	3f 2e       	mov	r3, r31
    134c:	82 01       	movw	r16, r4
    134e:	33 fc       	sbrc	r3, 3
    1350:	19 c0       	rjmp	.+50     	; 0x1384 <vfprintf+0x1e0>
    1352:	82 2d       	mov	r24, r2
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	88 16       	cp	r8, r24
    1358:	99 06       	cpc	r9, r25
    135a:	a0 f4       	brcc	.+40     	; 0x1384 <vfprintf+0x1e0>
    135c:	b6 01       	movw	r22, r12
    135e:	80 e2       	ldi	r24, 0x20	; 32
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	33 d1       	rcall	.+614    	; 0x15ca <fputc>
    1364:	2a 94       	dec	r2
    1366:	f5 cf       	rjmp	.-22     	; 0x1352 <vfprintf+0x1ae>
    1368:	f5 01       	movw	r30, r10
    136a:	37 fc       	sbrc	r3, 7
    136c:	85 91       	lpm	r24, Z+
    136e:	37 fe       	sbrs	r3, 7
    1370:	81 91       	ld	r24, Z+
    1372:	5f 01       	movw	r10, r30
    1374:	b6 01       	movw	r22, r12
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	28 d1       	rcall	.+592    	; 0x15ca <fputc>
    137a:	21 10       	cpse	r2, r1
    137c:	2a 94       	dec	r2
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	82 1a       	sub	r8, r18
    1382:	91 08       	sbc	r9, r1
    1384:	81 14       	cp	r8, r1
    1386:	91 04       	cpc	r9, r1
    1388:	79 f7       	brne	.-34     	; 0x1368 <vfprintf+0x1c4>
    138a:	e1 c0       	rjmp	.+450    	; 0x154e <vfprintf+0x3aa>
    138c:	84 36       	cpi	r24, 0x64	; 100
    138e:	11 f0       	breq	.+4      	; 0x1394 <vfprintf+0x1f0>
    1390:	89 36       	cpi	r24, 0x69	; 105
    1392:	39 f5       	brne	.+78     	; 0x13e2 <vfprintf+0x23e>
    1394:	f8 01       	movw	r30, r16
    1396:	37 fe       	sbrs	r3, 7
    1398:	07 c0       	rjmp	.+14     	; 0x13a8 <vfprintf+0x204>
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	0c 5f       	subi	r16, 0xFC	; 252
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	08 c0       	rjmp	.+16     	; 0x13b8 <vfprintf+0x214>
    13a8:	60 81       	ld	r22, Z
    13aa:	71 81       	ldd	r23, Z+1	; 0x01
    13ac:	07 2e       	mov	r0, r23
    13ae:	00 0c       	add	r0, r0
    13b0:	88 0b       	sbc	r24, r24
    13b2:	99 0b       	sbc	r25, r25
    13b4:	0e 5f       	subi	r16, 0xFE	; 254
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	f3 2d       	mov	r31, r3
    13ba:	ff 76       	andi	r31, 0x6F	; 111
    13bc:	3f 2e       	mov	r3, r31
    13be:	97 ff       	sbrs	r25, 7
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <vfprintf+0x230>
    13c2:	90 95       	com	r25
    13c4:	80 95       	com	r24
    13c6:	70 95       	com	r23
    13c8:	61 95       	neg	r22
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	f0 68       	ori	r31, 0x80	; 128
    13d2:	3f 2e       	mov	r3, r31
    13d4:	2a e0       	ldi	r18, 0x0A	; 10
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	a3 01       	movw	r20, r6
    13da:	33 d1       	rcall	.+614    	; 0x1642 <__ultoa_invert>
    13dc:	88 2e       	mov	r8, r24
    13de:	86 18       	sub	r8, r6
    13e0:	44 c0       	rjmp	.+136    	; 0x146a <vfprintf+0x2c6>
    13e2:	85 37       	cpi	r24, 0x75	; 117
    13e4:	31 f4       	brne	.+12     	; 0x13f2 <vfprintf+0x24e>
    13e6:	23 2d       	mov	r18, r3
    13e8:	2f 7e       	andi	r18, 0xEF	; 239
    13ea:	b2 2e       	mov	r11, r18
    13ec:	2a e0       	ldi	r18, 0x0A	; 10
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	25 c0       	rjmp	.+74     	; 0x143c <vfprintf+0x298>
    13f2:	93 2d       	mov	r25, r3
    13f4:	99 7f       	andi	r25, 0xF9	; 249
    13f6:	b9 2e       	mov	r11, r25
    13f8:	8f 36       	cpi	r24, 0x6F	; 111
    13fa:	c1 f0       	breq	.+48     	; 0x142c <vfprintf+0x288>
    13fc:	18 f4       	brcc	.+6      	; 0x1404 <vfprintf+0x260>
    13fe:	88 35       	cpi	r24, 0x58	; 88
    1400:	79 f0       	breq	.+30     	; 0x1420 <vfprintf+0x27c>
    1402:	ae c0       	rjmp	.+348    	; 0x1560 <vfprintf+0x3bc>
    1404:	80 37       	cpi	r24, 0x70	; 112
    1406:	19 f0       	breq	.+6      	; 0x140e <vfprintf+0x26a>
    1408:	88 37       	cpi	r24, 0x78	; 120
    140a:	21 f0       	breq	.+8      	; 0x1414 <vfprintf+0x270>
    140c:	a9 c0       	rjmp	.+338    	; 0x1560 <vfprintf+0x3bc>
    140e:	e9 2f       	mov	r30, r25
    1410:	e0 61       	ori	r30, 0x10	; 16
    1412:	be 2e       	mov	r11, r30
    1414:	b4 fe       	sbrs	r11, 4
    1416:	0d c0       	rjmp	.+26     	; 0x1432 <vfprintf+0x28e>
    1418:	fb 2d       	mov	r31, r11
    141a:	f4 60       	ori	r31, 0x04	; 4
    141c:	bf 2e       	mov	r11, r31
    141e:	09 c0       	rjmp	.+18     	; 0x1432 <vfprintf+0x28e>
    1420:	34 fe       	sbrs	r3, 4
    1422:	0a c0       	rjmp	.+20     	; 0x1438 <vfprintf+0x294>
    1424:	29 2f       	mov	r18, r25
    1426:	26 60       	ori	r18, 0x06	; 6
    1428:	b2 2e       	mov	r11, r18
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <vfprintf+0x294>
    142c:	28 e0       	ldi	r18, 0x08	; 8
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	05 c0       	rjmp	.+10     	; 0x143c <vfprintf+0x298>
    1432:	20 e1       	ldi	r18, 0x10	; 16
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <vfprintf+0x298>
    1438:	20 e1       	ldi	r18, 0x10	; 16
    143a:	32 e0       	ldi	r19, 0x02	; 2
    143c:	f8 01       	movw	r30, r16
    143e:	b7 fe       	sbrs	r11, 7
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <vfprintf+0x2ac>
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	0c 5f       	subi	r16, 0xFC	; 252
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	06 c0       	rjmp	.+12     	; 0x145c <vfprintf+0x2b8>
    1450:	60 81       	ld	r22, Z
    1452:	71 81       	ldd	r23, Z+1	; 0x01
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 5f       	subi	r16, 0xFE	; 254
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	a3 01       	movw	r20, r6
    145e:	f1 d0       	rcall	.+482    	; 0x1642 <__ultoa_invert>
    1460:	88 2e       	mov	r8, r24
    1462:	86 18       	sub	r8, r6
    1464:	fb 2d       	mov	r31, r11
    1466:	ff 77       	andi	r31, 0x7F	; 127
    1468:	3f 2e       	mov	r3, r31
    146a:	36 fe       	sbrs	r3, 6
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <vfprintf+0x2e4>
    146e:	23 2d       	mov	r18, r3
    1470:	2e 7f       	andi	r18, 0xFE	; 254
    1472:	a2 2e       	mov	r10, r18
    1474:	89 14       	cp	r8, r9
    1476:	58 f4       	brcc	.+22     	; 0x148e <vfprintf+0x2ea>
    1478:	34 fe       	sbrs	r3, 4
    147a:	0b c0       	rjmp	.+22     	; 0x1492 <vfprintf+0x2ee>
    147c:	32 fc       	sbrc	r3, 2
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <vfprintf+0x2ee>
    1480:	83 2d       	mov	r24, r3
    1482:	8e 7e       	andi	r24, 0xEE	; 238
    1484:	a8 2e       	mov	r10, r24
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <vfprintf+0x2ee>
    1488:	b8 2c       	mov	r11, r8
    148a:	a3 2c       	mov	r10, r3
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <vfprintf+0x2f0>
    148e:	b8 2c       	mov	r11, r8
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <vfprintf+0x2f0>
    1492:	b9 2c       	mov	r11, r9
    1494:	a4 fe       	sbrs	r10, 4
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <vfprintf+0x312>
    1498:	fe 01       	movw	r30, r28
    149a:	e8 0d       	add	r30, r8
    149c:	f1 1d       	adc	r31, r1
    149e:	80 81       	ld	r24, Z
    14a0:	80 33       	cpi	r24, 0x30	; 48
    14a2:	21 f4       	brne	.+8      	; 0x14ac <vfprintf+0x308>
    14a4:	9a 2d       	mov	r25, r10
    14a6:	99 7e       	andi	r25, 0xE9	; 233
    14a8:	a9 2e       	mov	r10, r25
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <vfprintf+0x31a>
    14ac:	a2 fe       	sbrs	r10, 2
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <vfprintf+0x318>
    14b0:	b3 94       	inc	r11
    14b2:	b3 94       	inc	r11
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <vfprintf+0x31a>
    14b6:	8a 2d       	mov	r24, r10
    14b8:	86 78       	andi	r24, 0x86	; 134
    14ba:	09 f0       	breq	.+2      	; 0x14be <vfprintf+0x31a>
    14bc:	b3 94       	inc	r11
    14be:	a3 fc       	sbrc	r10, 3
    14c0:	10 c0       	rjmp	.+32     	; 0x14e2 <vfprintf+0x33e>
    14c2:	a0 fe       	sbrs	r10, 0
    14c4:	06 c0       	rjmp	.+12     	; 0x14d2 <vfprintf+0x32e>
    14c6:	b2 14       	cp	r11, r2
    14c8:	80 f4       	brcc	.+32     	; 0x14ea <vfprintf+0x346>
    14ca:	28 0c       	add	r2, r8
    14cc:	92 2c       	mov	r9, r2
    14ce:	9b 18       	sub	r9, r11
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <vfprintf+0x348>
    14d2:	b2 14       	cp	r11, r2
    14d4:	58 f4       	brcc	.+22     	; 0x14ec <vfprintf+0x348>
    14d6:	b6 01       	movw	r22, r12
    14d8:	80 e2       	ldi	r24, 0x20	; 32
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	76 d0       	rcall	.+236    	; 0x15ca <fputc>
    14de:	b3 94       	inc	r11
    14e0:	f8 cf       	rjmp	.-16     	; 0x14d2 <vfprintf+0x32e>
    14e2:	b2 14       	cp	r11, r2
    14e4:	18 f4       	brcc	.+6      	; 0x14ec <vfprintf+0x348>
    14e6:	2b 18       	sub	r2, r11
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <vfprintf+0x34a>
    14ea:	98 2c       	mov	r9, r8
    14ec:	21 2c       	mov	r2, r1
    14ee:	a4 fe       	sbrs	r10, 4
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <vfprintf+0x36c>
    14f2:	b6 01       	movw	r22, r12
    14f4:	80 e3       	ldi	r24, 0x30	; 48
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	68 d0       	rcall	.+208    	; 0x15ca <fputc>
    14fa:	a2 fe       	sbrs	r10, 2
    14fc:	16 c0       	rjmp	.+44     	; 0x152a <vfprintf+0x386>
    14fe:	a1 fc       	sbrc	r10, 1
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <vfprintf+0x364>
    1502:	88 e7       	ldi	r24, 0x78	; 120
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 c0       	rjmp	.+4      	; 0x150c <vfprintf+0x368>
    1508:	88 e5       	ldi	r24, 0x58	; 88
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	b6 01       	movw	r22, r12
    150e:	0c c0       	rjmp	.+24     	; 0x1528 <vfprintf+0x384>
    1510:	8a 2d       	mov	r24, r10
    1512:	86 78       	andi	r24, 0x86	; 134
    1514:	51 f0       	breq	.+20     	; 0x152a <vfprintf+0x386>
    1516:	a1 fe       	sbrs	r10, 1
    1518:	02 c0       	rjmp	.+4      	; 0x151e <vfprintf+0x37a>
    151a:	8b e2       	ldi	r24, 0x2B	; 43
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <vfprintf+0x37c>
    151e:	80 e2       	ldi	r24, 0x20	; 32
    1520:	a7 fc       	sbrc	r10, 7
    1522:	8d e2       	ldi	r24, 0x2D	; 45
    1524:	b6 01       	movw	r22, r12
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	50 d0       	rcall	.+160    	; 0x15ca <fputc>
    152a:	89 14       	cp	r8, r9
    152c:	30 f4       	brcc	.+12     	; 0x153a <vfprintf+0x396>
    152e:	b6 01       	movw	r22, r12
    1530:	80 e3       	ldi	r24, 0x30	; 48
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	4a d0       	rcall	.+148    	; 0x15ca <fputc>
    1536:	9a 94       	dec	r9
    1538:	f8 cf       	rjmp	.-16     	; 0x152a <vfprintf+0x386>
    153a:	8a 94       	dec	r8
    153c:	f3 01       	movw	r30, r6
    153e:	e8 0d       	add	r30, r8
    1540:	f1 1d       	adc	r31, r1
    1542:	80 81       	ld	r24, Z
    1544:	b6 01       	movw	r22, r12
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	40 d0       	rcall	.+128    	; 0x15ca <fputc>
    154a:	81 10       	cpse	r8, r1
    154c:	f6 cf       	rjmp	.-20     	; 0x153a <vfprintf+0x396>
    154e:	22 20       	and	r2, r2
    1550:	09 f4       	brne	.+2      	; 0x1554 <vfprintf+0x3b0>
    1552:	4e ce       	rjmp	.-868    	; 0x11f0 <vfprintf+0x4c>
    1554:	b6 01       	movw	r22, r12
    1556:	80 e2       	ldi	r24, 0x20	; 32
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	37 d0       	rcall	.+110    	; 0x15ca <fputc>
    155c:	2a 94       	dec	r2
    155e:	f7 cf       	rjmp	.-18     	; 0x154e <vfprintf+0x3aa>
    1560:	f6 01       	movw	r30, r12
    1562:	86 81       	ldd	r24, Z+6	; 0x06
    1564:	97 81       	ldd	r25, Z+7	; 0x07
    1566:	02 c0       	rjmp	.+4      	; 0x156c <vfprintf+0x3c8>
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    156c:	2b 96       	adiw	r28, 0x0b	; 11
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	bf 90       	pop	r11
    158a:	af 90       	pop	r10
    158c:	9f 90       	pop	r9
    158e:	8f 90       	pop	r8
    1590:	7f 90       	pop	r7
    1592:	6f 90       	pop	r6
    1594:	5f 90       	pop	r5
    1596:	4f 90       	pop	r4
    1598:	3f 90       	pop	r3
    159a:	2f 90       	pop	r2
    159c:	08 95       	ret

0000159e <strnlen_P>:
    159e:	fc 01       	movw	r30, r24
    15a0:	05 90       	lpm	r0, Z+
    15a2:	61 50       	subi	r22, 0x01	; 1
    15a4:	70 40       	sbci	r23, 0x00	; 0
    15a6:	01 10       	cpse	r0, r1
    15a8:	d8 f7       	brcc	.-10     	; 0x15a0 <strnlen_P+0x2>
    15aa:	80 95       	com	r24
    15ac:	90 95       	com	r25
    15ae:	8e 0f       	add	r24, r30
    15b0:	9f 1f       	adc	r25, r31
    15b2:	08 95       	ret

000015b4 <strnlen>:
    15b4:	fc 01       	movw	r30, r24
    15b6:	61 50       	subi	r22, 0x01	; 1
    15b8:	70 40       	sbci	r23, 0x00	; 0
    15ba:	01 90       	ld	r0, Z+
    15bc:	01 10       	cpse	r0, r1
    15be:	d8 f7       	brcc	.-10     	; 0x15b6 <strnlen+0x2>
    15c0:	80 95       	com	r24
    15c2:	90 95       	com	r25
    15c4:	8e 0f       	add	r24, r30
    15c6:	9f 1f       	adc	r25, r31
    15c8:	08 95       	ret

000015ca <fputc>:
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	fb 01       	movw	r30, r22
    15d4:	23 81       	ldd	r18, Z+3	; 0x03
    15d6:	21 fd       	sbrc	r18, 1
    15d8:	03 c0       	rjmp	.+6      	; 0x15e0 <fputc+0x16>
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	9f ef       	ldi	r25, 0xFF	; 255
    15de:	2c c0       	rjmp	.+88     	; 0x1638 <fputc+0x6e>
    15e0:	22 ff       	sbrs	r18, 2
    15e2:	16 c0       	rjmp	.+44     	; 0x1610 <fputc+0x46>
    15e4:	46 81       	ldd	r20, Z+6	; 0x06
    15e6:	57 81       	ldd	r21, Z+7	; 0x07
    15e8:	24 81       	ldd	r18, Z+4	; 0x04
    15ea:	35 81       	ldd	r19, Z+5	; 0x05
    15ec:	42 17       	cp	r20, r18
    15ee:	53 07       	cpc	r21, r19
    15f0:	44 f4       	brge	.+16     	; 0x1602 <fputc+0x38>
    15f2:	a0 81       	ld	r26, Z
    15f4:	b1 81       	ldd	r27, Z+1	; 0x01
    15f6:	9d 01       	movw	r18, r26
    15f8:	2f 5f       	subi	r18, 0xFF	; 255
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	31 83       	std	Z+1, r19	; 0x01
    15fe:	20 83       	st	Z, r18
    1600:	8c 93       	st	X, r24
    1602:	26 81       	ldd	r18, Z+6	; 0x06
    1604:	37 81       	ldd	r19, Z+7	; 0x07
    1606:	2f 5f       	subi	r18, 0xFF	; 255
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	37 83       	std	Z+7, r19	; 0x07
    160c:	26 83       	std	Z+6, r18	; 0x06
    160e:	14 c0       	rjmp	.+40     	; 0x1638 <fputc+0x6e>
    1610:	8b 01       	movw	r16, r22
    1612:	ec 01       	movw	r28, r24
    1614:	fb 01       	movw	r30, r22
    1616:	00 84       	ldd	r0, Z+8	; 0x08
    1618:	f1 85       	ldd	r31, Z+9	; 0x09
    161a:	e0 2d       	mov	r30, r0
    161c:	19 95       	eicall
    161e:	89 2b       	or	r24, r25
    1620:	e1 f6       	brne	.-72     	; 0x15da <fputc+0x10>
    1622:	d8 01       	movw	r26, r16
    1624:	16 96       	adiw	r26, 0x06	; 6
    1626:	8d 91       	ld	r24, X+
    1628:	9c 91       	ld	r25, X
    162a:	17 97       	sbiw	r26, 0x07	; 7
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	17 96       	adiw	r26, 0x07	; 7
    1630:	9c 93       	st	X, r25
    1632:	8e 93       	st	-X, r24
    1634:	16 97       	sbiw	r26, 0x06	; 6
    1636:	ce 01       	movw	r24, r28
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret

00001642 <__ultoa_invert>:
    1642:	fa 01       	movw	r30, r20
    1644:	aa 27       	eor	r26, r26
    1646:	28 30       	cpi	r18, 0x08	; 8
    1648:	51 f1       	breq	.+84     	; 0x169e <__ultoa_invert+0x5c>
    164a:	20 31       	cpi	r18, 0x10	; 16
    164c:	81 f1       	breq	.+96     	; 0x16ae <__ultoa_invert+0x6c>
    164e:	e8 94       	clt
    1650:	6f 93       	push	r22
    1652:	6e 7f       	andi	r22, 0xFE	; 254
    1654:	6e 5f       	subi	r22, 0xFE	; 254
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	8f 4f       	sbci	r24, 0xFF	; 255
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	af 4f       	sbci	r26, 0xFF	; 255
    165e:	b1 e0       	ldi	r27, 0x01	; 1
    1660:	3e d0       	rcall	.+124    	; 0x16de <__ultoa_invert+0x9c>
    1662:	b4 e0       	ldi	r27, 0x04	; 4
    1664:	3c d0       	rcall	.+120    	; 0x16de <__ultoa_invert+0x9c>
    1666:	67 0f       	add	r22, r23
    1668:	78 1f       	adc	r23, r24
    166a:	89 1f       	adc	r24, r25
    166c:	9a 1f       	adc	r25, r26
    166e:	a1 1d       	adc	r26, r1
    1670:	68 0f       	add	r22, r24
    1672:	79 1f       	adc	r23, r25
    1674:	8a 1f       	adc	r24, r26
    1676:	91 1d       	adc	r25, r1
    1678:	a1 1d       	adc	r26, r1
    167a:	6a 0f       	add	r22, r26
    167c:	71 1d       	adc	r23, r1
    167e:	81 1d       	adc	r24, r1
    1680:	91 1d       	adc	r25, r1
    1682:	a1 1d       	adc	r26, r1
    1684:	20 d0       	rcall	.+64     	; 0x16c6 <__ultoa_invert+0x84>
    1686:	09 f4       	brne	.+2      	; 0x168a <__ultoa_invert+0x48>
    1688:	68 94       	set
    168a:	3f 91       	pop	r19
    168c:	2a e0       	ldi	r18, 0x0A	; 10
    168e:	26 9f       	mul	r18, r22
    1690:	11 24       	eor	r1, r1
    1692:	30 19       	sub	r19, r0
    1694:	30 5d       	subi	r19, 0xD0	; 208
    1696:	31 93       	st	Z+, r19
    1698:	de f6       	brtc	.-74     	; 0x1650 <__ultoa_invert+0xe>
    169a:	cf 01       	movw	r24, r30
    169c:	08 95       	ret
    169e:	46 2f       	mov	r20, r22
    16a0:	47 70       	andi	r20, 0x07	; 7
    16a2:	40 5d       	subi	r20, 0xD0	; 208
    16a4:	41 93       	st	Z+, r20
    16a6:	b3 e0       	ldi	r27, 0x03	; 3
    16a8:	0f d0       	rcall	.+30     	; 0x16c8 <__ultoa_invert+0x86>
    16aa:	c9 f7       	brne	.-14     	; 0x169e <__ultoa_invert+0x5c>
    16ac:	f6 cf       	rjmp	.-20     	; 0x169a <__ultoa_invert+0x58>
    16ae:	46 2f       	mov	r20, r22
    16b0:	4f 70       	andi	r20, 0x0F	; 15
    16b2:	40 5d       	subi	r20, 0xD0	; 208
    16b4:	4a 33       	cpi	r20, 0x3A	; 58
    16b6:	18 f0       	brcs	.+6      	; 0x16be <__ultoa_invert+0x7c>
    16b8:	49 5d       	subi	r20, 0xD9	; 217
    16ba:	31 fd       	sbrc	r19, 1
    16bc:	40 52       	subi	r20, 0x20	; 32
    16be:	41 93       	st	Z+, r20
    16c0:	02 d0       	rcall	.+4      	; 0x16c6 <__ultoa_invert+0x84>
    16c2:	a9 f7       	brne	.-22     	; 0x16ae <__ultoa_invert+0x6c>
    16c4:	ea cf       	rjmp	.-44     	; 0x169a <__ultoa_invert+0x58>
    16c6:	b4 e0       	ldi	r27, 0x04	; 4
    16c8:	a6 95       	lsr	r26
    16ca:	97 95       	ror	r25
    16cc:	87 95       	ror	r24
    16ce:	77 95       	ror	r23
    16d0:	67 95       	ror	r22
    16d2:	ba 95       	dec	r27
    16d4:	c9 f7       	brne	.-14     	; 0x16c8 <__ultoa_invert+0x86>
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	61 05       	cpc	r22, r1
    16da:	71 05       	cpc	r23, r1
    16dc:	08 95       	ret
    16de:	9b 01       	movw	r18, r22
    16e0:	ac 01       	movw	r20, r24
    16e2:	0a 2e       	mov	r0, r26
    16e4:	06 94       	lsr	r0
    16e6:	57 95       	ror	r21
    16e8:	47 95       	ror	r20
    16ea:	37 95       	ror	r19
    16ec:	27 95       	ror	r18
    16ee:	ba 95       	dec	r27
    16f0:	c9 f7       	brne	.-14     	; 0x16e4 <__ultoa_invert+0xa2>
    16f2:	62 0f       	add	r22, r18
    16f4:	73 1f       	adc	r23, r19
    16f6:	84 1f       	adc	r24, r20
    16f8:	95 1f       	adc	r25, r21
    16fa:	a0 1d       	adc	r26, r0
    16fc:	08 95       	ret

000016fe <_exit>:
    16fe:	f8 94       	cli

00001700 <__stop_program>:
    1700:	ff cf       	rjmp	.-2      	; 0x1700 <__stop_program>
