
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  00000bc8  00000c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026c3  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000115a  00000000  00000000  0000359b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011c4  00000000  00000000  000046f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000062c  00000000  00000000  000058bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000094e  00000000  00000000  00005ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001564  00000000  00000000  00006836  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00007d9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c2       	rjmp	.+1036   	; 0x422 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c1       	rjmp	.+1004   	; 0x422 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
  42:	00 00       	nop
  44:	ee c1       	rjmp	.+988    	; 0x422 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c1       	rjmp	.+984    	; 0x422 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 c1       	rjmp	.+972    	; 0x422 <__bad_interrupt>
  56:	00 00       	nop
  58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e0 c1       	rjmp	.+960    	; 0x422 <__bad_interrupt>
  62:	00 00       	nop
  64:	f1 c4       	rjmp	.+2530   	; 0xa48 <__vector_25>
  66:	00 00       	nop
  68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c1       	rjmp	.+948    	; 0x422 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
  72:	00 00       	nop
  74:	d6 c1       	rjmp	.+940    	; 0x422 <__bad_interrupt>
  76:	00 00       	nop
  78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d0 c1       	rjmp	.+928    	; 0x422 <__bad_interrupt>
  82:	00 00       	nop
  84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
  8e:	00 00       	nop
  90:	02 c5       	rjmp	.+2564   	; 0xa96 <__vector_36>
  92:	00 00       	nop
  94:	c6 c1       	rjmp	.+908    	; 0x422 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c1       	rjmp	.+888    	; 0x422 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	0b c5       	rjmp	.+2582   	; 0xae4 <__vector_51>
  ce:	00 00       	nop
  d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2c c5       	rjmp	.+2648   	; 0xb32 <__vector_54>
  da:	00 00       	nop
  dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
  ec:	00 00       	nop
  ee:	5f 00       	.word	0x005f	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	07 00       	.word	0x0007	; ????
  f8:	07 00       	.word	0x0007	; ????
  fa:	00 00       	nop
  fc:	00 14       	cp	r0, r0
  fe:	7f 14       	cp	r7, r15
 100:	7f 14       	cp	r7, r15
 102:	00 00       	nop
 104:	00 24       	eor	r0, r0
 106:	2a 7f       	andi	r18, 0xFA	; 250
 108:	2a 12       	cpse	r2, r26
 10a:	00 00       	nop
 10c:	00 23       	and	r16, r16
 10e:	13 08       	sbc	r1, r3
 110:	64 62       	ori	r22, 0x24	; 36
 112:	00 00       	nop
 114:	00 36       	cpi	r16, 0x60	; 96
 116:	49 55       	subi	r20, 0x59	; 89
 118:	22 50       	subi	r18, 0x02	; 2
 11a:	00 00       	nop
 11c:	00 00       	nop
 11e:	05 03       	mulsu	r16, r21
 120:	00 00       	nop
 122:	00 00       	nop
 124:	00 1c       	adc	r0, r0
 126:	22 41       	sbci	r18, 0x12	; 18
 128:	00 00       	nop
 12a:	00 00       	nop
 12c:	00 41       	sbci	r16, 0x10	; 16
 12e:	22 1c       	adc	r2, r2
 130:	00 00       	nop
 132:	00 00       	nop
 134:	00 08       	sbc	r0, r0
 136:	2a 1c       	adc	r2, r10
 138:	2a 08       	sbc	r2, r10
 13a:	00 00       	nop
 13c:	00 08       	sbc	r0, r0
 13e:	08 3e       	cpi	r16, 0xE8	; 232
 140:	08 08       	sbc	r0, r8
 142:	00 00       	nop
 144:	00 a0       	ldd	r0, Z+32	; 0x20
 146:	60 00       	.word	0x0060	; ????
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	00 08       	sbc	r0, r0
 14e:	08 08       	sbc	r0, r8
 150:	08 08       	sbc	r0, r8
 152:	00 00       	nop
 154:	00 60       	ori	r16, 0x00	; 0
 156:	60 00       	.word	0x0060	; ????
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	00 20       	and	r0, r0
 15e:	10 08       	sbc	r1, r0
 160:	04 02       	muls	r16, r20
 162:	00 00       	nop
 164:	00 3e       	cpi	r16, 0xE0	; 224
 166:	51 49       	sbci	r21, 0x91	; 145
 168:	45 3e       	cpi	r20, 0xE5	; 229
 16a:	00 00       	nop
 16c:	00 00       	nop
 16e:	42 7f       	andi	r20, 0xF2	; 242
 170:	40 00       	.word	0x0040	; ????
 172:	00 00       	nop
 174:	00 62       	ori	r16, 0x20	; 32
 176:	51 49       	sbci	r21, 0x91	; 145
 178:	49 46       	sbci	r20, 0x69	; 105
 17a:	00 00       	nop
 17c:	00 22       	and	r0, r16
 17e:	41 49       	sbci	r20, 0x91	; 145
 180:	49 36       	cpi	r20, 0x69	; 105
 182:	00 00       	nop
 184:	00 18       	sub	r0, r0
 186:	14 12       	cpse	r1, r20
 188:	7f 10       	cpse	r7, r15
 18a:	00 00       	nop
 18c:	00 27       	eor	r16, r16
 18e:	45 45       	sbci	r20, 0x55	; 85
 190:	45 39       	cpi	r20, 0x95	; 149
 192:	00 00       	nop
 194:	00 3c       	cpi	r16, 0xC0	; 192
 196:	4a 49       	sbci	r20, 0x9A	; 154
 198:	49 30       	cpi	r20, 0x09	; 9
 19a:	00 00       	nop
 19c:	00 01       	movw	r0, r0
 19e:	71 09       	sbc	r23, r1
 1a0:	05 03       	mulsu	r16, r21
 1a2:	00 00       	nop
 1a4:	00 36       	cpi	r16, 0x60	; 96
 1a6:	49 49       	sbci	r20, 0x99	; 153
 1a8:	49 36       	cpi	r20, 0x69	; 105
 1aa:	00 00       	nop
 1ac:	00 06       	cpc	r0, r16
 1ae:	49 49       	sbci	r20, 0x99	; 153
 1b0:	29 1e       	adc	r2, r25
 1b2:	00 00       	nop
 1b4:	00 00       	nop
 1b6:	36 36       	cpi	r19, 0x66	; 102
 1b8:	00 00       	nop
 1ba:	00 00       	nop
 1bc:	00 00       	nop
 1be:	ac 6c       	ori	r26, 0xCC	; 204
 1c0:	00 00       	nop
 1c2:	00 00       	nop
 1c4:	00 08       	sbc	r0, r0
 1c6:	14 22       	and	r1, r20
 1c8:	41 00       	.word	0x0041	; ????
 1ca:	00 00       	nop
 1cc:	00 14       	cp	r0, r0
 1ce:	14 14       	cp	r1, r4
 1d0:	14 14       	cp	r1, r4
 1d2:	00 00       	nop
 1d4:	00 41       	sbci	r16, 0x10	; 16
 1d6:	22 14       	cp	r2, r2
 1d8:	08 00       	.word	0x0008	; ????
 1da:	00 00       	nop
 1dc:	00 02       	muls	r16, r16
 1de:	01 51       	subi	r16, 0x11	; 17
 1e0:	09 06       	cpc	r0, r25
 1e2:	00 00       	nop
 1e4:	00 32       	cpi	r16, 0x20	; 32
 1e6:	49 79       	andi	r20, 0x99	; 153
 1e8:	41 3e       	cpi	r20, 0xE1	; 225
 1ea:	00 00       	nop
 1ec:	00 7e       	andi	r16, 0xE0	; 224
 1ee:	09 09       	sbc	r16, r9
 1f0:	09 7e       	andi	r16, 0xE9	; 233
 1f2:	00 00       	nop
 1f4:	00 7f       	andi	r16, 0xF0	; 240
 1f6:	49 49       	sbci	r20, 0x99	; 153
 1f8:	49 36       	cpi	r20, 0x69	; 105
 1fa:	00 00       	nop
 1fc:	00 3e       	cpi	r16, 0xE0	; 224
 1fe:	41 41       	sbci	r20, 0x11	; 17
 200:	41 22       	and	r4, r17
 202:	00 00       	nop
 204:	00 7f       	andi	r16, 0xF0	; 240
 206:	41 41       	sbci	r20, 0x11	; 17
 208:	22 1c       	adc	r2, r2
 20a:	00 00       	nop
 20c:	00 7f       	andi	r16, 0xF0	; 240
 20e:	49 49       	sbci	r20, 0x99	; 153
 210:	49 41       	sbci	r20, 0x19	; 25
 212:	00 00       	nop
 214:	00 7f       	andi	r16, 0xF0	; 240
 216:	09 09       	sbc	r16, r9
 218:	09 01       	movw	r0, r18
 21a:	00 00       	nop
 21c:	00 3e       	cpi	r16, 0xE0	; 224
 21e:	41 41       	sbci	r20, 0x11	; 17
 220:	51 72       	andi	r21, 0x21	; 33
 222:	00 00       	nop
 224:	00 7f       	andi	r16, 0xF0	; 240
 226:	08 08       	sbc	r0, r8
 228:	08 7f       	andi	r16, 0xF8	; 248
 22a:	00 00       	nop
 22c:	00 41       	sbci	r16, 0x10	; 16
 22e:	7f 41       	sbci	r23, 0x1F	; 31
 230:	00 00       	nop
 232:	00 00       	nop
 234:	00 20       	and	r0, r0
 236:	40 41       	sbci	r20, 0x10	; 16
 238:	3f 01       	movw	r6, r30
 23a:	00 00       	nop
 23c:	00 7f       	andi	r16, 0xF0	; 240
 23e:	08 14       	cp	r0, r8
 240:	22 41       	sbci	r18, 0x12	; 18
 242:	00 00       	nop
 244:	00 7f       	andi	r16, 0xF0	; 240
 246:	40 40       	sbci	r20, 0x00	; 0
 248:	40 40       	sbci	r20, 0x00	; 0
 24a:	00 00       	nop
 24c:	00 7f       	andi	r16, 0xF0	; 240
 24e:	02 0c       	add	r0, r2
 250:	02 7f       	andi	r16, 0xF2	; 242
 252:	00 00       	nop
 254:	00 7f       	andi	r16, 0xF0	; 240
 256:	04 08       	sbc	r0, r4
 258:	10 7f       	andi	r17, 0xF0	; 240
 25a:	00 00       	nop
 25c:	00 3e       	cpi	r16, 0xE0	; 224
 25e:	41 41       	sbci	r20, 0x11	; 17
 260:	41 3e       	cpi	r20, 0xE1	; 225
 262:	00 00       	nop
 264:	00 7f       	andi	r16, 0xF0	; 240
 266:	09 09       	sbc	r16, r9
 268:	09 06       	cpc	r0, r25
 26a:	00 00       	nop
 26c:	00 3e       	cpi	r16, 0xE0	; 224
 26e:	41 51       	subi	r20, 0x11	; 17
 270:	21 5e       	subi	r18, 0xE1	; 225
 272:	00 00       	nop
 274:	00 7f       	andi	r16, 0xF0	; 240
 276:	09 19       	sub	r16, r9
 278:	29 46       	sbci	r18, 0x69	; 105
 27a:	00 00       	nop
 27c:	00 26       	eor	r0, r16
 27e:	49 49       	sbci	r20, 0x99	; 153
 280:	49 32       	cpi	r20, 0x29	; 41
 282:	00 00       	nop
 284:	00 01       	movw	r0, r0
 286:	01 7f       	andi	r16, 0xF1	; 241
 288:	01 01       	movw	r0, r2
 28a:	00 00       	nop
 28c:	00 3f       	cpi	r16, 0xF0	; 240
 28e:	40 40       	sbci	r20, 0x00	; 0
 290:	40 3f       	cpi	r20, 0xF0	; 240
 292:	00 00       	nop
 294:	00 1f       	adc	r16, r16
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	20 1f       	adc	r18, r16
 29a:	00 00       	nop
 29c:	00 3f       	cpi	r16, 0xF0	; 240
 29e:	40 38       	cpi	r20, 0x80	; 128
 2a0:	40 3f       	cpi	r20, 0xF0	; 240
 2a2:	00 00       	nop
 2a4:	00 63       	ori	r16, 0x30	; 48
 2a6:	14 08       	sbc	r1, r4
 2a8:	14 63       	ori	r17, 0x34	; 52
 2aa:	00 00       	nop
 2ac:	00 03       	mulsu	r16, r16
 2ae:	04 78       	andi	r16, 0x84	; 132
 2b0:	04 03       	mulsu	r16, r20
 2b2:	00 00       	nop
 2b4:	00 61       	ori	r16, 0x10	; 16
 2b6:	51 49       	sbci	r21, 0x91	; 145
 2b8:	45 43       	sbci	r20, 0x35	; 53
 2ba:	00 00       	nop
 2bc:	00 7f       	andi	r16, 0xF0	; 240
 2be:	41 41       	sbci	r20, 0x11	; 17
 2c0:	00 00       	nop
 2c2:	00 00       	nop
 2c4:	00 02       	muls	r16, r16
 2c6:	04 08       	sbc	r0, r4
 2c8:	10 20       	and	r1, r0
 2ca:	00 00       	nop
 2cc:	00 41       	sbci	r16, 0x10	; 16
 2ce:	41 7f       	andi	r20, 0xF1	; 241
 2d0:	00 00       	nop
 2d2:	00 00       	nop
 2d4:	00 04       	cpc	r0, r0
 2d6:	02 01       	movw	r0, r4
 2d8:	02 04       	cpc	r0, r2
 2da:	00 00       	nop
 2dc:	00 80       	ld	r0, Z
 2de:	80 80       	ld	r8, Z
 2e0:	80 80       	ld	r8, Z
 2e2:	00 00       	nop
 2e4:	00 01       	movw	r0, r0
 2e6:	02 04       	cpc	r0, r2
 2e8:	00 00       	nop
 2ea:	00 00       	nop
 2ec:	00 20       	and	r0, r0
 2ee:	54 54       	subi	r21, 0x44	; 68
 2f0:	54 78       	andi	r21, 0x84	; 132
 2f2:	00 00       	nop
 2f4:	00 7f       	andi	r16, 0xF0	; 240
 2f6:	48 44       	sbci	r20, 0x48	; 72
 2f8:	44 38       	cpi	r20, 0x84	; 132
 2fa:	00 00       	nop
 2fc:	00 38       	cpi	r16, 0x80	; 128
 2fe:	44 44       	sbci	r20, 0x44	; 68
 300:	28 00       	.word	0x0028	; ????
 302:	00 00       	nop
 304:	00 38       	cpi	r16, 0x80	; 128
 306:	44 44       	sbci	r20, 0x44	; 68
 308:	48 7f       	andi	r20, 0xF8	; 248
 30a:	00 00       	nop
 30c:	00 38       	cpi	r16, 0x80	; 128
 30e:	54 54       	subi	r21, 0x44	; 68
 310:	54 18       	sub	r5, r4
 312:	00 00       	nop
 314:	00 08       	sbc	r0, r0
 316:	7e 09       	sbc	r23, r14
 318:	02 00       	.word	0x0002	; ????
 31a:	00 00       	nop
 31c:	00 18       	sub	r0, r0
 31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
 320:	a4 7c       	andi	r26, 0xC4	; 196
 322:	00 00       	nop
 324:	00 7f       	andi	r16, 0xF0	; 240
 326:	08 04       	cpc	r0, r8
 328:	04 78       	andi	r16, 0x84	; 132
 32a:	00 00       	nop
 32c:	00 00       	nop
 32e:	7d 00       	.word	0x007d	; ????
 330:	00 00       	nop
 332:	00 00       	nop
 334:	00 80       	ld	r0, Z
 336:	84 7d       	andi	r24, 0xD4	; 212
 338:	00 00       	nop
 33a:	00 00       	nop
 33c:	00 7f       	andi	r16, 0xF0	; 240
 33e:	10 28       	or	r1, r0
 340:	44 00       	.word	0x0044	; ????
 342:	00 00       	nop
 344:	00 41       	sbci	r16, 0x10	; 16
 346:	7f 40       	sbci	r23, 0x0F	; 15
 348:	00 00       	nop
 34a:	00 00       	nop
 34c:	00 7c       	andi	r16, 0xC0	; 192
 34e:	04 18       	sub	r0, r4
 350:	04 78       	andi	r16, 0x84	; 132
 352:	00 00       	nop
 354:	00 7c       	andi	r16, 0xC0	; 192
 356:	08 04       	cpc	r0, r8
 358:	7c 00       	.word	0x007c	; ????
 35a:	00 00       	nop
 35c:	00 38       	cpi	r16, 0x80	; 128
 35e:	44 44       	sbci	r20, 0x44	; 68
 360:	38 00       	.word	0x0038	; ????
 362:	00 00       	nop
 364:	00 fc       	sbrc	r0, 0
 366:	24 24       	eor	r2, r4
 368:	18 00       	.word	0x0018	; ????
 36a:	00 00       	nop
 36c:	00 18       	sub	r0, r0
 36e:	24 24       	eor	r2, r4
 370:	fc 00       	.word	0x00fc	; ????
 372:	00 00       	nop
 374:	00 00       	nop
 376:	7c 08       	sbc	r7, r12
 378:	04 00       	.word	0x0004	; ????
 37a:	00 00       	nop
 37c:	00 48       	sbci	r16, 0x80	; 128
 37e:	54 54       	subi	r21, 0x44	; 68
 380:	24 00       	.word	0x0024	; ????
 382:	00 00       	nop
 384:	00 04       	cpc	r0, r0
 386:	7f 44       	sbci	r23, 0x4F	; 79
 388:	00 00       	nop
 38a:	00 00       	nop
 38c:	00 3c       	cpi	r16, 0xC0	; 192
 38e:	40 40       	sbci	r20, 0x00	; 0
 390:	7c 00       	.word	0x007c	; ????
 392:	00 00       	nop
 394:	00 1c       	adc	r0, r0
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	20 1c       	adc	r2, r0
 39a:	00 00       	nop
 39c:	00 3c       	cpi	r16, 0xC0	; 192
 39e:	40 30       	cpi	r20, 0x00	; 0
 3a0:	40 3c       	cpi	r20, 0xC0	; 192
 3a2:	00 00       	nop
 3a4:	00 44       	sbci	r16, 0x40	; 64
 3a6:	28 10       	cpse	r2, r8
 3a8:	28 44       	sbci	r18, 0x48	; 72
 3aa:	00 00       	nop
 3ac:	00 1c       	adc	r0, r0
 3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
 3b0:	7c 00       	.word	0x007c	; ????
 3b2:	00 00       	nop
 3b4:	00 44       	sbci	r16, 0x40	; 64
 3b6:	64 54       	subi	r22, 0x44	; 68
 3b8:	4c 44       	sbci	r20, 0x4C	; 76
 3ba:	00 00       	nop
 3bc:	00 08       	sbc	r0, r0
 3be:	36 41       	sbci	r19, 0x16	; 22
 3c0:	00 00       	nop
 3c2:	00 00       	nop
 3c4:	00 00       	nop
 3c6:	7f 00       	.word	0x007f	; ????
 3c8:	00 00       	nop
 3ca:	00 00       	nop
 3cc:	00 41       	sbci	r16, 0x10	; 16
 3ce:	36 08       	sbc	r3, r6
 3d0:	00 00       	nop
 3d2:	00 00       	nop
 3d4:	00 02       	muls	r16, r16
 3d6:	01 01       	movw	r0, r2
 3d8:	02 01       	movw	r0, r4
 3da:	00 00       	nop
 3dc:	00 02       	muls	r16, r16
 3de:	05 05       	cpc	r16, r5
 3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
 3e4:	11 24       	eor	r1, r1
 3e6:	1f be       	out	0x3f, r1	; 63
 3e8:	cf ef       	ldi	r28, 0xFF	; 255
 3ea:	d1 e2       	ldi	r29, 0x21	; 33
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	00 e0       	ldi	r16, 0x00	; 0
 3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
 3f4:	12 e0       	ldi	r17, 0x02	; 2
 3f6:	a0 e0       	ldi	r26, 0x00	; 0
 3f8:	b2 e0       	ldi	r27, 0x02	; 2
 3fa:	e8 ec       	ldi	r30, 0xC8	; 200
 3fc:	fb e0       	ldi	r31, 0x0B	; 11
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	0b bf       	out	0x3b, r16	; 59
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	07 90       	elpm	r0, Z+
 406:	0d 92       	st	X+, r0
 408:	a4 32       	cpi	r26, 0x24	; 36
 40a:	b1 07       	cpc	r27, r17
 40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
 40e:	22 e0       	ldi	r18, 0x02	; 2
 410:	a4 e2       	ldi	r26, 0x24	; 36
 412:	b2 e0       	ldi	r27, 0x02	; 2
 414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
 416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
 418:	a4 32       	cpi	r26, 0x24	; 36
 41a:	b2 07       	cpc	r27, r18
 41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
 41e:	5f d0       	rcall	.+190    	; 0x4de <main>
 420:	d1 c3       	rjmp	.+1954   	; 0xbc4 <_exit>

00000422 <__bad_interrupt>:
 422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
 424:	81 b1       	in	r24, 0x01	; 1
 426:	81 60       	ori	r24, 0x01	; 1
 428:	81 b9       	out	0x01, r24	; 1
 42a:	82 b1       	in	r24, 0x02	; 2
 42c:	81 60       	ori	r24, 0x01	; 1
 42e:	82 b9       	out	0x02, r24	; 2
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	83 ed       	ldi	r24, 0xD3	; 211
 434:	90 e3       	ldi	r25, 0x30	; 48
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <I2C_Init+0x12>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <I2C_Init+0x1c>
 440:	00 00       	nop
 442:	82 e1       	ldi	r24, 0x12	; 18
 444:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 448:	e9 eb       	ldi	r30, 0xB9	; 185
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	8c 7f       	andi	r24, 0xFC	; 252
 450:	80 83       	st	Z, r24
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 458:	08 95       	ret

0000045a <I2C_Start>:
 45a:	94 ea       	ldi	r25, 0xA4	; 164
 45c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 460:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 464:	99 23       	and	r25, r25
 466:	e4 f7       	brge	.-8      	; 0x460 <I2C_Start+0x6>
 468:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 46c:	98 7f       	andi	r25, 0xF8	; 248
 46e:	98 30       	cpi	r25, 0x08	; 8
 470:	91 f4       	brne	.+36     	; 0x496 <I2C_Start+0x3c>
 472:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 476:	84 e8       	ldi	r24, 0x84	; 132
 478:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 47c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 480:	88 23       	and	r24, r24
 482:	e4 f7       	brge	.-8      	; 0x47c <I2C_Start+0x22>
 484:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 488:	88 7f       	andi	r24, 0xF8	; 248
 48a:	88 31       	cpi	r24, 0x18	; 24
 48c:	31 f0       	breq	.+12     	; 0x49a <I2C_Start+0x40>
 48e:	80 32       	cpi	r24, 0x20	; 32
 490:	31 f4       	brne	.+12     	; 0x49e <I2C_Start+0x44>
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	08 95       	ret
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	08 95       	ret
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	08 95       	ret

000004a2 <I2C_Write>:
 4a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 4a6:	84 e8       	ldi	r24, 0x84	; 132
 4a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4b0:	88 23       	and	r24, r24
 4b2:	e4 f7       	brge	.-8      	; 0x4ac <I2C_Write+0xa>
 4b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 4b8:	88 7f       	andi	r24, 0xF8	; 248
 4ba:	88 32       	cpi	r24, 0x28	; 40
 4bc:	21 f0       	breq	.+8      	; 0x4c6 <I2C_Write+0x24>
 4be:	80 33       	cpi	r24, 0x30	; 48
 4c0:	21 f4       	brne	.+8      	; 0x4ca <I2C_Write+0x28>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	08 95       	ret
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	08 95       	ret

000004ce <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
 4ce:	84 e9       	ldi	r24, 0x94	; 148
 4d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
 4d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4d8:	84 fd       	sbrc	r24, 4
 4da:	fc cf       	rjmp	.-8      	; 0x4d4 <I2C_Stop+0x6>
 4dc:	08 95       	ret

000004de <main>:
#include "ssd1306.h" //include display driver
#include <util/delay.h>

int main(void)
{
	_i2c_address = 0X78;
 4de:	88 e7       	ldi	r24, 0x78	; 120
 4e0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	I2C_Init();
 4e4:	9f df       	rcall	.-194    	; 0x424 <I2C_Init>
	InitializeDisplay();
 4e6:	30 d0       	rcall	.+96     	; 0x548 <InitializeDisplay>
	print_fonts();
 4e8:	bc d0       	rcall	.+376    	; 0x662 <print_fonts>
 4ea:	80 d0       	rcall	.+256    	; 0x5ec <clear_display>
	clear_display();
 4ec:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <UART+0x7>
	UART.init(ASYNC, 19200, 1);
 4f0:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <UART+0x8>
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	7b e4       	ldi	r23, 0x4B	; 75
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	19 95       	eicall
 502:	c1 e0       	ldi	r28, 0x01	; 1
 504:	d2 e0       	ldi	r29, 0x02	; 2
    while (1){
		UART.transmitChar('s');
 506:	e9 85       	ldd	r30, Y+9	; 0x09
 508:	fa 85       	ldd	r31, Y+10	; 0x0a
 50a:	83 e7       	ldi	r24, 0x73	; 115
 50c:	19 95       	eicall
 50e:	6e d0       	rcall	.+220    	; 0x5ec <clear_display>
		clear_display();
 510:	8e 81       	ldd	r24, Y+6	; 0x06
 512:	40 e0       	ldi	r20, 0x00	; 0
		sendCharXY(UART.RX, 0, 0);
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	7c d0       	rcall	.+248    	; 0x614 <sendCharXY>
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 520:	90 e3       	ldi	r25, 0x30	; 48
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x44>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x4e>
 52c:	00 00       	nop
 52e:	e9 cf       	rjmp	.-46     	; 0x502 <main+0x24>

00000530 <ssd1306_command>:
 530:	cf 93       	push	r28
 532:	c8 2f       	mov	r28, r24

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
 534:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 538:	90 df       	rcall	.-224    	; 0x45a <I2C_Start>
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	b2 df       	rcall	.-156    	; 0x4a2 <I2C_Write>
 53e:	8c 2f       	mov	r24, r28
 540:	b0 df       	rcall	.-160    	; 0x4a2 <I2C_Write>
 542:	c5 df       	rcall	.-118    	; 0x4ce <I2C_Stop>
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <InitializeDisplay>:
 548:	8e ea       	ldi	r24, 0xAE	; 174
 54a:	f2 df       	rcall	.-28     	; 0x530 <ssd1306_command>
 54c:	85 ed       	ldi	r24, 0xD5	; 213
 54e:	f0 df       	rcall	.-32     	; 0x530 <ssd1306_command>
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	ee df       	rcall	.-36     	; 0x530 <ssd1306_command>
 554:	88 ea       	ldi	r24, 0xA8	; 168
 556:	ec df       	rcall	.-40     	; 0x530 <ssd1306_command>
 558:	8f e3       	ldi	r24, 0x3F	; 63
 55a:	ea df       	rcall	.-44     	; 0x530 <ssd1306_command>
 55c:	83 ed       	ldi	r24, 0xD3	; 211
 55e:	e8 df       	rcall	.-48     	; 0x530 <ssd1306_command>
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	e6 df       	rcall	.-52     	; 0x530 <ssd1306_command>
 564:	80 e4       	ldi	r24, 0x40	; 64
 566:	e4 df       	rcall	.-56     	; 0x530 <ssd1306_command>
 568:	8d e8       	ldi	r24, 0x8D	; 141
 56a:	e2 df       	rcall	.-60     	; 0x530 <ssd1306_command>
 56c:	84 e1       	ldi	r24, 0x14	; 20
 56e:	e0 df       	rcall	.-64     	; 0x530 <ssd1306_command>
 570:	80 e2       	ldi	r24, 0x20	; 32
 572:	de df       	rcall	.-68     	; 0x530 <ssd1306_command>
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	dc df       	rcall	.-72     	; 0x530 <ssd1306_command>
 578:	81 ea       	ldi	r24, 0xA1	; 161
 57a:	da df       	rcall	.-76     	; 0x530 <ssd1306_command>
 57c:	88 ec       	ldi	r24, 0xC8	; 200
 57e:	d8 df       	rcall	.-80     	; 0x530 <ssd1306_command>
 580:	8a ed       	ldi	r24, 0xDA	; 218
 582:	d6 df       	rcall	.-84     	; 0x530 <ssd1306_command>
 584:	82 e1       	ldi	r24, 0x12	; 18
 586:	d4 df       	rcall	.-88     	; 0x530 <ssd1306_command>
 588:	81 e8       	ldi	r24, 0x81	; 129
 58a:	d2 df       	rcall	.-92     	; 0x530 <ssd1306_command>
 58c:	8f ec       	ldi	r24, 0xCF	; 207
 58e:	d0 df       	rcall	.-96     	; 0x530 <ssd1306_command>
 590:	89 ed       	ldi	r24, 0xD9	; 217
 592:	ce df       	rcall	.-100    	; 0x530 <ssd1306_command>
 594:	81 ef       	ldi	r24, 0xF1	; 241
 596:	cc df       	rcall	.-104    	; 0x530 <ssd1306_command>
 598:	8b ed       	ldi	r24, 0xDB	; 219
 59a:	ca df       	rcall	.-108    	; 0x530 <ssd1306_command>
 59c:	80 e4       	ldi	r24, 0x40	; 64
 59e:	c8 df       	rcall	.-112    	; 0x530 <ssd1306_command>
 5a0:	84 ea       	ldi	r24, 0xA4	; 164
 5a2:	c6 df       	rcall	.-116    	; 0x530 <ssd1306_command>
 5a4:	86 ea       	ldi	r24, 0xA6	; 166
 5a6:	c4 df       	rcall	.-120    	; 0x530 <ssd1306_command>
 5a8:	8f ea       	ldi	r24, 0xAF	; 175
 5aa:	c2 cf       	rjmp	.-124    	; 0x530 <ssd1306_command>
 5ac:	08 95       	ret

000005ae <SendChar>:
 5ae:	cf 93       	push	r28
 5b0:	c8 2f       	mov	r28, r24
 5b2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 5b6:	51 df       	rcall	.-350    	; 0x45a <I2C_Start>
 5b8:	80 e4       	ldi	r24, 0x40	; 64
 5ba:	73 df       	rcall	.-282    	; 0x4a2 <I2C_Write>
 5bc:	8c 2f       	mov	r24, r28
 5be:	71 df       	rcall	.-286    	; 0x4a2 <I2C_Write>
 5c0:	86 df       	rcall	.-244    	; 0x4ce <I2C_Stop>
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <setXY>:
 5c6:	cf 93       	push	r28
 5c8:	c6 2f       	mov	r28, r22
 5ca:	80 55       	subi	r24, 0x50	; 80
 5cc:	b1 df       	rcall	.-158    	; 0x530 <ssd1306_command>
 5ce:	8c 2f       	mov	r24, r28
 5d0:	88 0f       	add	r24, r24
 5d2:	88 0f       	add	r24, r24
 5d4:	88 0f       	add	r24, r24
 5d6:	88 70       	andi	r24, 0x08	; 8
 5d8:	ab df       	rcall	.-170    	; 0x530 <ssd1306_command>
 5da:	8c 2f       	mov	r24, r28
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	96 95       	lsr	r25
 5e0:	87 95       	ror	r24
 5e2:	8f 70       	andi	r24, 0x0F	; 15
 5e4:	80 5f       	subi	r24, 0xF0	; 240
 5e6:	a4 df       	rcall	.-184    	; 0x530 <ssd1306_command>
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <clear_display>:
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
 5f2:	0b c0       	rjmp	.+22     	; 0x60a <clear_display+0x1e>
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	8d 2f       	mov	r24, r29
 5f8:	e6 df       	rcall	.-52     	; 0x5c6 <setXY>
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <clear_display+0x18>
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	d6 df       	rcall	.-84     	; 0x5ae <SendChar>
 602:	cf 5f       	subi	r28, 0xFF	; 255
 604:	cc 23       	and	r28, r28
 606:	dc f7       	brge	.-10     	; 0x5fe <clear_display+0x12>
 608:	df 5f       	subi	r29, 0xFF	; 255
 60a:	d8 30       	cpi	r29, 0x08	; 8
 60c:	98 f3       	brcs	.-26     	; 0x5f4 <clear_display+0x8>
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <sendCharXY>:
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	18 2f       	mov	r17, r24
 61c:	86 2f       	mov	r24, r22
 61e:	64 2f       	mov	r22, r20
 620:	d2 df       	rcall	.-92     	; 0x5c6 <setXY>
 622:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 626:	19 df       	rcall	.-462    	; 0x45a <I2C_Start>
 628:	80 e4       	ldi	r24, 0x40	; 64
 62a:	3b df       	rcall	.-394    	; 0x4a2 <I2C_Write>
 62c:	c0 e0       	ldi	r28, 0x00	; 0
 62e:	d0 e0       	ldi	r29, 0x00	; 0
 630:	10 c0       	rjmp	.+32     	; 0x652 <sendCharXY+0x3e>
 632:	e1 2f       	mov	r30, r17
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	b0 97       	sbiw	r30, 0x20	; 32
 638:	ee 0f       	add	r30, r30
 63a:	ff 1f       	adc	r31, r31
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	ec 51       	subi	r30, 0x1C	; 28
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	ec 0f       	add	r30, r28
 64a:	fd 1f       	adc	r31, r29
 64c:	84 91       	lpm	r24, Z
 64e:	29 df       	rcall	.-430    	; 0x4a2 <I2C_Write>
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	c8 30       	cpi	r28, 0x08	; 8
 654:	d1 05       	cpc	r29, r1
 656:	6c f3       	brlt	.-38     	; 0x632 <sendCharXY+0x1e>
 658:	3a df       	rcall	.-396    	; 0x4ce <I2C_Stop>
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	08 95       	ret

00000662 <print_fonts>:
void print_fonts(){
 662:	df 92       	push	r13
 664:	ef 92       	push	r14
 666:	ff 92       	push	r15
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
	clear_display();
 670:	bd df       	rcall	.-134    	; 0x5ec <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
 672:	e1 2c       	mov	r14, r1
 674:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
 676:	68 94       	set
 678:	dd 24       	eor	r13, r13
 67a:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
 67c:	27 c0       	rjmp	.+78     	; 0x6cc <print_fonts+0x6a>
		setXY(k,0);
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	8e 2d       	mov	r24, r14
 682:	a1 df       	rcall	.-190    	; 0x5c6 <setXY>

		for (int j=0;j<16;j++)
 684:	00 e0       	ldi	r16, 0x00	; 0
 686:	10 e0       	ldi	r17, 0x00	; 0
 688:	19 c0       	rjmp	.+50     	; 0x6bc <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
 68a:	f8 01       	movw	r30, r16
 68c:	ed 0d       	add	r30, r13
 68e:	f1 1d       	adc	r31, r1
 690:	b0 97       	sbiw	r30, 0x20	; 32
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	ec 51       	subi	r30, 0x1C	; 28
 6a0:	ff 4f       	sbci	r31, 0xFF	; 255
 6a2:	ec 0f       	add	r30, r28
 6a4:	fd 1f       	adc	r31, r29
 6a6:	84 91       	lpm	r24, Z
 6a8:	82 df       	rcall	.-252    	; 0x5ae <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
 6aa:	21 96       	adiw	r28, 0x01	; 1
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <print_fonts+0x50>
 6ae:	c0 e0       	ldi	r28, 0x00	; 0
 6b0:	d0 e0       	ldi	r29, 0x00	; 0
 6b2:	c8 30       	cpi	r28, 0x08	; 8
 6b4:	d1 05       	cpc	r29, r1
 6b6:	4c f3       	brlt	.-46     	; 0x68a <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
 6b8:	0f 5f       	subi	r16, 0xFF	; 255
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	00 31       	cpi	r16, 0x10	; 16
 6be:	11 05       	cpc	r17, r1
 6c0:	b4 f3       	brlt	.-20     	; 0x6ae <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
 6c2:	80 e1       	ldi	r24, 0x10	; 16
 6c4:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
 6c6:	8f ef       	ldi	r24, 0xFF	; 255
 6c8:	e8 1a       	sub	r14, r24
 6ca:	f8 0a       	sbc	r15, r24
 6cc:	86 e0       	ldi	r24, 0x06	; 6
 6ce:	e8 16       	cp	r14, r24
 6d0:	f1 04       	cpc	r15, r1
 6d2:	ac f2       	brlt	.-86     	; 0x67e <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	1f 91       	pop	r17
 6da:	0f 91       	pop	r16
 6dc:	ff 90       	pop	r15
 6de:	ef 90       	pop	r14
 6e0:	df 90       	pop	r13
 6e2:	08 95       	ret

000006e4 <initASYNC0>:
#include "I2C.h"  //include library for i2c driver
#include "ssd1306.h" //include display driver
#include <util/delay.h>

int initASYNC0(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
 6e4:	82 95       	swap	r24
 6e6:	92 95       	swap	r25
 6e8:	90 7f       	andi	r25, 0xF0	; 240
 6ea:	98 27       	eor	r25, r24
 6ec:	80 7f       	andi	r24, 0xF0	; 240
 6ee:	98 27       	eor	r25, r24
 6f0:	9c 01       	movw	r18, r24
 6f2:	99 0f       	add	r25, r25
 6f4:	44 0b       	sbc	r20, r20
 6f6:	55 0b       	sbc	r21, r21
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	74 e2       	ldi	r23, 0x24	; 36
 6fc:	84 ef       	ldi	r24, 0xF4	; 244
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	3f d2       	rcall	.+1150   	; 0xb80 <__udivmodsi4>
 702:	21 50       	subi	r18, 0x01	; 1
 704:	31 09       	sbc	r19, r1
 706:	e1 e0       	ldi	r30, 0x01	; 1
 708:	f2 e0       	ldi	r31, 0x02	; 2
 70a:	31 83       	std	Z+1, r19	; 0x01
 70c:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)(UART.ubrr>>8);
 70e:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H = (unsigned char)UART.ubrr;
 712:	80 81       	ld	r24, Z
 714:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UCSR0A |= (1<<RXC0);
 718:	e0 ec       	ldi	r30, 0xC0	; 192
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	80 68       	ori	r24, 0x80	; 128
 720:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(1<<UCSZ02);
 722:	e1 ec       	ldi	r30, 0xC1	; 193
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	8c 69       	ori	r24, 0x9C	; 156
 72a:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 72c:	e2 ec       	ldi	r30, 0xC2	; 194
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	86 60       	ori	r24, 0x06	; 6
 734:	80 83       	st	Z, r24
	return 1;
};
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	08 95       	ret

0000073c <initASYNC1>:

int initASYNC1(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
 73c:	82 95       	swap	r24
 73e:	92 95       	swap	r25
 740:	90 7f       	andi	r25, 0xF0	; 240
 742:	98 27       	eor	r25, r24
 744:	80 7f       	andi	r24, 0xF0	; 240
 746:	98 27       	eor	r25, r24
 748:	9c 01       	movw	r18, r24
 74a:	99 0f       	add	r25, r25
 74c:	44 0b       	sbc	r20, r20
 74e:	55 0b       	sbc	r21, r21
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	74 e2       	ldi	r23, 0x24	; 36
 754:	84 ef       	ldi	r24, 0xF4	; 244
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	13 d2       	rcall	.+1062   	; 0xb80 <__udivmodsi4>
 75a:	21 50       	subi	r18, 0x01	; 1
 75c:	31 09       	sbc	r19, r1
 75e:	e1 e0       	ldi	r30, 0x01	; 1
 760:	f2 e0       	ldi	r31, 0x02	; 2
 762:	31 83       	std	Z+1, r19	; 0x01
 764:	20 83       	st	Z, r18
	UBRR1L = (unsigned char)(UART.ubrr>>8);
 766:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	UBRR1H = (unsigned char)UART.ubrr;
 76a:	80 81       	ld	r24, Z
 76c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UCSR1A |= (1<<RXC1);
 770:	e8 ec       	ldi	r30, 0xC8	; 200
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	80 68       	ori	r24, 0x80	; 128
 778:	80 83       	st	Z, r24
	UCSR1B |= (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1)|(1<<UCSZ12);
 77a:	e9 ec       	ldi	r30, 0xC9	; 201
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	8c 69       	ori	r24, 0x9C	; 156
 782:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
 784:	ea ec       	ldi	r30, 0xCA	; 202
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	86 60       	ori	r24, 0x06	; 6
 78c:	80 83       	st	Z, r24
	return 1;
};
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	08 95       	ret

00000794 <initASYNC2>:

int initASYNC2(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
 794:	82 95       	swap	r24
 796:	92 95       	swap	r25
 798:	90 7f       	andi	r25, 0xF0	; 240
 79a:	98 27       	eor	r25, r24
 79c:	80 7f       	andi	r24, 0xF0	; 240
 79e:	98 27       	eor	r25, r24
 7a0:	9c 01       	movw	r18, r24
 7a2:	99 0f       	add	r25, r25
 7a4:	44 0b       	sbc	r20, r20
 7a6:	55 0b       	sbc	r21, r21
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	74 e2       	ldi	r23, 0x24	; 36
 7ac:	84 ef       	ldi	r24, 0xF4	; 244
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	e7 d1       	rcall	.+974    	; 0xb80 <__udivmodsi4>
 7b2:	21 50       	subi	r18, 0x01	; 1
 7b4:	31 09       	sbc	r19, r1
 7b6:	e1 e0       	ldi	r30, 0x01	; 1
 7b8:	f2 e0       	ldi	r31, 0x02	; 2
 7ba:	31 83       	std	Z+1, r19	; 0x01
 7bc:	20 83       	st	Z, r18
	UBRR2L = (unsigned char)(UART.ubrr>>8);
 7be:	30 93 d4 00 	sts	0x00D4, r19	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UBRR2H = (unsigned char)UART.ubrr;
 7c2:	80 81       	ld	r24, Z
 7c4:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
	UCSR2A |= (1<<RXC2);
 7c8:	e0 ed       	ldi	r30, 0xD0	; 208
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	80 68       	ori	r24, 0x80	; 128
 7d0:	80 83       	st	Z, r24
	UCSR2B |= (1<<RXCIE2)|(1<<RXEN2)|(1<<TXEN2)|(1<<UCSZ22);
 7d2:	e1 ed       	ldi	r30, 0xD1	; 209
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	8c 69       	ori	r24, 0x9C	; 156
 7da:	80 83       	st	Z, r24
	UCSR2C |= (1<<UCSZ21)|(1<<UCSZ20);
 7dc:	e2 ed       	ldi	r30, 0xD2	; 210
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	86 60       	ori	r24, 0x06	; 6
 7e4:	80 83       	st	Z, r24
	return 1;
};
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	08 95       	ret

000007ec <initASYNC3>:

int initASYNC3(int rate){ //UARTBaudRegList is a list of register, see define.c and define.h
	UART.ubrr = F_CPU/(16*rate)-1;
 7ec:	82 95       	swap	r24
 7ee:	92 95       	swap	r25
 7f0:	90 7f       	andi	r25, 0xF0	; 240
 7f2:	98 27       	eor	r25, r24
 7f4:	80 7f       	andi	r24, 0xF0	; 240
 7f6:	98 27       	eor	r25, r24
 7f8:	9c 01       	movw	r18, r24
 7fa:	99 0f       	add	r25, r25
 7fc:	44 0b       	sbc	r20, r20
 7fe:	55 0b       	sbc	r21, r21
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	74 e2       	ldi	r23, 0x24	; 36
 804:	84 ef       	ldi	r24, 0xF4	; 244
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	bb d1       	rcall	.+886    	; 0xb80 <__udivmodsi4>
 80a:	21 50       	subi	r18, 0x01	; 1
 80c:	31 09       	sbc	r19, r1
 80e:	e1 e0       	ldi	r30, 0x01	; 1
 810:	f2 e0       	ldi	r31, 0x02	; 2
 812:	31 83       	std	Z+1, r19	; 0x01
 814:	20 83       	st	Z, r18
	UBRR3L = (unsigned char)(UART.ubrr>>8);
 816:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	UBRR3H = (unsigned char)UART.ubrr;
 81a:	80 81       	ld	r24, Z
 81c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	UCSR3A |= (1<<RXC1);
 820:	e0 e3       	ldi	r30, 0x30	; 48
 822:	f1 e0       	ldi	r31, 0x01	; 1
 824:	80 81       	ld	r24, Z
 826:	80 68       	ori	r24, 0x80	; 128
 828:	80 83       	st	Z, r24
	UCSR3B |= (1<<RXCIE3)|(1<<RXEN3)|(1<<TXEN3)|(1<<UCSZ32);
 82a:	e1 e3       	ldi	r30, 0x31	; 49
 82c:	f1 e0       	ldi	r31, 0x01	; 1
 82e:	80 81       	ld	r24, Z
 830:	8c 69       	ori	r24, 0x9C	; 156
 832:	80 83       	st	Z, r24
	UCSR3C |= (1<<UCSZ31)|(1<<UCSZ30);
 834:	e2 e3       	ldi	r30, 0x32	; 50
 836:	f1 e0       	ldi	r31, 0x01	; 1
 838:	80 81       	ld	r24, Z
 83a:	86 60       	ori	r24, 0x06	; 6
 83c:	80 83       	st	Z, r24
	return 1;
};
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	08 95       	ret

00000844 <init>:

int initSLAVE(int rate, int UARTReg, int UARTBaudRegList[13][4][3]){
	return 1;
};*/

int init(int mode, int baudRate, int UARTId){
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	28 97       	sbiw	r28, 0x08	; 8
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	f8 94       	cli
 852:	de bf       	out	0x3e, r29	; 62
 854:	0f be       	out	0x3f, r0	; 63
 856:	cd bf       	out	0x3d, r28	; 61
	if(UARTId > 3){
 858:	44 30       	cpi	r20, 0x04	; 4
 85a:	51 05       	cpc	r21, r1
 85c:	f4 f4       	brge	.+60     	; 0x89a <init+0x56>
 85e:	cb 01       	movw	r24, r22
		return 0;
	}
	sei();
 860:	78 94       	sei
	UART.UARTReg = UARTId;
 862:	50 93 04 02 	sts	0x0204, r21	; 0x800204 <UART+0x3>
 866:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <UART+0x2>
	int (*initAsyncFuncs[4])(int rate) = {initASYNC0, initASYNC1, initASYNC2, initASYNC3};
 86a:	28 e0       	ldi	r18, 0x08	; 8
 86c:	ec e0       	ldi	r30, 0x0C	; 12
 86e:	f2 e0       	ldi	r31, 0x02	; 2
 870:	de 01       	movw	r26, r28
 872:	11 96       	adiw	r26, 0x01	; 1
 874:	01 90       	ld	r0, Z+
 876:	0d 92       	st	X+, r0
 878:	2a 95       	dec	r18
 87a:	e1 f7       	brne	.-8      	; 0x874 <init+0x30>
	(*initAsyncFuncs[UARTId])(baudRate);
 87c:	44 0f       	add	r20, r20
 87e:	55 1f       	adc	r21, r21
 880:	e1 e0       	ldi	r30, 0x01	; 1
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	ec 0f       	add	r30, r28
 886:	fd 1f       	adc	r31, r29
 888:	e4 0f       	add	r30, r20
 88a:	f5 1f       	adc	r31, r21
 88c:	01 90       	ld	r0, Z+
 88e:	f0 81       	ld	r31, Z
 890:	e0 2d       	mov	r30, r0
 892:	19 95       	eicall
	return 1;
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <init+0x5a>
	return 1;
};*/

int init(int mode, int baudRate, int UARTId){
	if(UARTId > 3){
		return 0;
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	90 e0       	ldi	r25, 0x00	; 0
	sei();
	UART.UARTReg = UARTId;
	int (*initAsyncFuncs[4])(int rate) = {initASYNC0, initASYNC1, initASYNC2, initASYNC3};
	(*initAsyncFuncs[UARTId])(baudRate);
	return 1;
}
 89e:	28 96       	adiw	r28, 0x08	; 8
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	08 95       	ret

000008b0 <transmitChar0>:

int transmitChar0(char transmitionData){
	//while(~(UCSR0A & (1<<UDRE0))){}
	UCSR0B &= ~(1<<TXB80);
 8b0:	e1 ec       	ldi	r30, 0xC1	; 193
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	90 81       	ld	r25, Z
 8b6:	9e 7f       	andi	r25, 0xFE	; 254
 8b8:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR0B |= (1<<TXB80);
	}
	UDR0 = transmitionData;
 8ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 1;
};
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	08 95       	ret

000008c4 <transmitChar1>:

int transmitChar1(char transmitionData){
	//while(~(UCSR1A & (1<<UDRE1))){}
	UCSR1B &= ~(1<<TXB81);
 8c4:	e9 ec       	ldi	r30, 0xC9	; 201
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	90 81       	ld	r25, Z
 8ca:	9e 7f       	andi	r25, 0xFE	; 254
 8cc:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR1B |= (1<<TXB81);
	}
	UDR1 = transmitionData;
 8ce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	return 1;
};
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	08 95       	ret

000008d8 <transmitChar2>:

int transmitChar2(char transmitionData){
	//while(~(UCSR2A & (1<<UDRE2))){}
	UCSR2B &= ~(1<<TXB82);
 8d8:	e1 ed       	ldi	r30, 0xD1	; 209
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	90 81       	ld	r25, Z
 8de:	9e 7f       	andi	r25, 0xFE	; 254
 8e0:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR2B |= (1<<TXB82);
	}
	UDR2 = transmitionData;
 8e2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	return 1;
};
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	08 95       	ret

000008ec <transmitChar3>:

int transmitChar3(char transmitionData){
	//while(~(UCSR3A & (1<<UDRE3))){}
	UCSR3B &= ~(1<<TXB83);
 8ec:	e1 e3       	ldi	r30, 0x31	; 49
 8ee:	f1 e0       	ldi	r31, 0x01	; 1
 8f0:	90 81       	ld	r25, Z
 8f2:	9e 7f       	andi	r25, 0xFE	; 254
 8f4:	90 83       	st	Z, r25
	if(transmitionData & 0x0100){
		UCSR3B |= (1<<TXB83);
	}
	UDR3 = transmitionData;
 8f6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
	return 1;
};
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	08 95       	ret

00000900 <transmitChar>:

int transmitChar(char transmitionData){
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
 908:	28 97       	sbiw	r28, 0x08	; 8
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	de bf       	out	0x3e, r29	; 62
 910:	0f be       	out	0x3f, r0	; 63
 912:	cd bf       	out	0x3d, r28	; 61
	int (*transmitCharFuncs[4])(char data) = {transmitChar0, transmitChar1, transmitChar2, transmitChar3};
 914:	98 e0       	ldi	r25, 0x08	; 8
 916:	e4 e1       	ldi	r30, 0x14	; 20
 918:	f2 e0       	ldi	r31, 0x02	; 2
 91a:	de 01       	movw	r26, r28
 91c:	11 96       	adiw	r26, 0x01	; 1
 91e:	01 90       	ld	r0, Z+
 920:	0d 92       	st	X+, r0
 922:	9a 95       	dec	r25
 924:	e1 f7       	brne	.-8      	; 0x91e <transmitChar+0x1e>
	(*transmitCharFuncs[UART.UARTReg])(transmitionData);
 926:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <UART+0x2>
 92a:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <UART+0x3>
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	21 e0       	ldi	r18, 0x01	; 1
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	2c 0f       	add	r18, r28
 938:	3d 1f       	adc	r19, r29
 93a:	e2 0f       	add	r30, r18
 93c:	f3 1f       	adc	r31, r19
 93e:	01 90       	ld	r0, Z+
 940:	f0 81       	ld	r31, Z
 942:	e0 2d       	mov	r30, r0
 944:	19 95       	eicall
	return 1;
}
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	28 96       	adiw	r28, 0x08	; 8
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	f8 94       	cli
 950:	de bf       	out	0x3e, r29	; 62
 952:	0f be       	out	0x3f, r0	; 63
 954:	cd bf       	out	0x3d, r28	; 61
 956:	df 91       	pop	r29
 958:	cf 91       	pop	r28
 95a:	08 95       	ret

0000095c <receiveChar0>:

int receiveChar0(){
	UART.RXh = UCSR0B;
 95c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 960:	e1 e0       	ldi	r30, 0x01	; 1
 962:	f2 e0       	ldi	r31, 0x02	; 2
 964:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR0;
 966:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 96a:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
 96c:	84 81       	ldd	r24, Z+4	; 0x04
 96e:	86 95       	lsr	r24
 970:	81 70       	andi	r24, 0x01	; 1
 972:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
 974:	84 81       	ldd	r24, Z+4	; 0x04
 976:	85 81       	ldd	r24, Z+5	; 0x05
 978:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	08 95       	ret

00000980 <receiveChar1>:

int receiveChar1(){
	UART.RXh = UCSR1B;
 980:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 984:	e1 e0       	ldi	r30, 0x01	; 1
 986:	f2 e0       	ldi	r31, 0x02	; 2
 988:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR1;
 98a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 98e:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
 990:	84 81       	ldd	r24, Z+4	; 0x04
 992:	86 95       	lsr	r24
 994:	81 70       	andi	r24, 0x01	; 1
 996:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
 998:	84 81       	ldd	r24, Z+4	; 0x04
 99a:	85 81       	ldd	r24, Z+5	; 0x05
 99c:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	08 95       	ret

000009a4 <receiveChar2>:

int receiveChar2(){
	UART.RXh = UCSR2B;
 9a4:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 9a8:	e1 e0       	ldi	r30, 0x01	; 1
 9aa:	f2 e0       	ldi	r31, 0x02	; 2
 9ac:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR2;
 9ae:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 9b2:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
 9b4:	84 81       	ldd	r24, Z+4	; 0x04
 9b6:	86 95       	lsr	r24
 9b8:	81 70       	andi	r24, 0x01	; 1
 9ba:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
 9bc:	84 81       	ldd	r24, Z+4	; 0x04
 9be:	85 81       	ldd	r24, Z+5	; 0x05
 9c0:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	08 95       	ret

000009c8 <receiveChar3>:

int receiveChar3(){
	UART.RXh = UCSR3B;
 9c8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
 9cc:	e1 e0       	ldi	r30, 0x01	; 1
 9ce:	f2 e0       	ldi	r31, 0x02	; 2
 9d0:	84 83       	std	Z+4, r24	; 0x04
	UART.RXl = UDR3;
 9d2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 9d6:	85 83       	std	Z+5, r24	; 0x05
	UART.RXh = (UART.RXh >> 1) & 0x01;
 9d8:	84 81       	ldd	r24, Z+4	; 0x04
 9da:	86 95       	lsr	r24
 9dc:	81 70       	andi	r24, 0x01	; 1
 9de:	84 83       	std	Z+4, r24	; 0x04
	UART.RX = ((UART.RXh << 8) | UART.RXl);
 9e0:	84 81       	ldd	r24, Z+4	; 0x04
 9e2:	85 81       	ldd	r24, Z+5	; 0x05
 9e4:	86 83       	std	Z+6, r24	; 0x06
	return 1;
}
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	08 95       	ret

000009ec <receiveChar>:

int receiveChar(){
 9ec:	cf 93       	push	r28
 9ee:	df 93       	push	r29
 9f0:	cd b7       	in	r28, 0x3d	; 61
 9f2:	de b7       	in	r29, 0x3e	; 62
 9f4:	28 97       	sbiw	r28, 0x08	; 8
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	f8 94       	cli
 9fa:	de bf       	out	0x3e, r29	; 62
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	cd bf       	out	0x3d, r28	; 61
	int(*receiveCharFuncs[4])() = {receiveChar0, receiveChar1, receiveChar2, receiveChar3};
 a00:	88 e0       	ldi	r24, 0x08	; 8
 a02:	ec e1       	ldi	r30, 0x1C	; 28
 a04:	f2 e0       	ldi	r31, 0x02	; 2
 a06:	de 01       	movw	r26, r28
 a08:	11 96       	adiw	r26, 0x01	; 1
 a0a:	01 90       	ld	r0, Z+
 a0c:	0d 92       	st	X+, r0
 a0e:	8a 95       	dec	r24
 a10:	e1 f7       	brne	.-8      	; 0xa0a <receiveChar+0x1e>
	(*receiveCharFuncs[UART.UARTReg])();
 a12:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <UART+0x2>
 a16:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <UART+0x3>
 a1a:	ee 0f       	add	r30, r30
 a1c:	ff 1f       	adc	r31, r31
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	8c 0f       	add	r24, r28
 a24:	9d 1f       	adc	r25, r29
 a26:	e8 0f       	add	r30, r24
 a28:	f9 1f       	adc	r31, r25
 a2a:	01 90       	ld	r0, Z+
 a2c:	f0 81       	ld	r31, Z
 a2e:	e0 2d       	mov	r30, r0
 a30:	19 95       	eicall
	return 1;
}
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	28 96       	adiw	r28, 0x08	; 8
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	08 95       	ret

00000a48 <__vector_25>:
struct uart UART = {
	.init = init,
	.transmitChar = transmitChar,
};

ISR(USART0_RX_vect){
 a48:	1f 92       	push	r1
 a4a:	0f 92       	push	r0
 a4c:	0f b6       	in	r0, 0x3f	; 63
 a4e:	0f 92       	push	r0
 a50:	11 24       	eor	r1, r1
 a52:	0b b6       	in	r0, 0x3b	; 59
 a54:	0f 92       	push	r0
 a56:	2f 93       	push	r18
 a58:	3f 93       	push	r19
 a5a:	4f 93       	push	r20
 a5c:	5f 93       	push	r21
 a5e:	6f 93       	push	r22
 a60:	7f 93       	push	r23
 a62:	8f 93       	push	r24
 a64:	9f 93       	push	r25
 a66:	af 93       	push	r26
 a68:	bf 93       	push	r27
 a6a:	ef 93       	push	r30
 a6c:	ff 93       	push	r31
	receiveChar();
 a6e:	be df       	rcall	.-132    	; 0x9ec <receiveChar>
};
 a70:	ff 91       	pop	r31
 a72:	ef 91       	pop	r30
 a74:	bf 91       	pop	r27
 a76:	af 91       	pop	r26
 a78:	9f 91       	pop	r25
 a7a:	8f 91       	pop	r24
 a7c:	7f 91       	pop	r23
 a7e:	6f 91       	pop	r22
 a80:	5f 91       	pop	r21
 a82:	4f 91       	pop	r20
 a84:	3f 91       	pop	r19
 a86:	2f 91       	pop	r18
 a88:	0f 90       	pop	r0
 a8a:	0b be       	out	0x3b, r0	; 59
 a8c:	0f 90       	pop	r0
 a8e:	0f be       	out	0x3f, r0	; 63
 a90:	0f 90       	pop	r0
 a92:	1f 90       	pop	r1
 a94:	18 95       	reti

00000a96 <__vector_36>:

ISR(USART1_RX_vect){
 a96:	1f 92       	push	r1
 a98:	0f 92       	push	r0
 a9a:	0f b6       	in	r0, 0x3f	; 63
 a9c:	0f 92       	push	r0
 a9e:	11 24       	eor	r1, r1
 aa0:	0b b6       	in	r0, 0x3b	; 59
 aa2:	0f 92       	push	r0
 aa4:	2f 93       	push	r18
 aa6:	3f 93       	push	r19
 aa8:	4f 93       	push	r20
 aaa:	5f 93       	push	r21
 aac:	6f 93       	push	r22
 aae:	7f 93       	push	r23
 ab0:	8f 93       	push	r24
 ab2:	9f 93       	push	r25
 ab4:	af 93       	push	r26
 ab6:	bf 93       	push	r27
 ab8:	ef 93       	push	r30
 aba:	ff 93       	push	r31
	receiveChar();
 abc:	97 df       	rcall	.-210    	; 0x9ec <receiveChar>
};
 abe:	ff 91       	pop	r31
 ac0:	ef 91       	pop	r30
 ac2:	bf 91       	pop	r27
 ac4:	af 91       	pop	r26
 ac6:	9f 91       	pop	r25
 ac8:	8f 91       	pop	r24
 aca:	7f 91       	pop	r23
 acc:	6f 91       	pop	r22
 ace:	5f 91       	pop	r21
 ad0:	4f 91       	pop	r20
 ad2:	3f 91       	pop	r19
 ad4:	2f 91       	pop	r18
 ad6:	0f 90       	pop	r0
 ad8:	0b be       	out	0x3b, r0	; 59
 ada:	0f 90       	pop	r0
 adc:	0f be       	out	0x3f, r0	; 63
 ade:	0f 90       	pop	r0
 ae0:	1f 90       	pop	r1
 ae2:	18 95       	reti

00000ae4 <__vector_51>:

ISR(USART2_RX_vect){
 ae4:	1f 92       	push	r1
 ae6:	0f 92       	push	r0
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	0f 92       	push	r0
 aec:	11 24       	eor	r1, r1
 aee:	0b b6       	in	r0, 0x3b	; 59
 af0:	0f 92       	push	r0
 af2:	2f 93       	push	r18
 af4:	3f 93       	push	r19
 af6:	4f 93       	push	r20
 af8:	5f 93       	push	r21
 afa:	6f 93       	push	r22
 afc:	7f 93       	push	r23
 afe:	8f 93       	push	r24
 b00:	9f 93       	push	r25
 b02:	af 93       	push	r26
 b04:	bf 93       	push	r27
 b06:	ef 93       	push	r30
 b08:	ff 93       	push	r31
	receiveChar();
 b0a:	70 df       	rcall	.-288    	; 0x9ec <receiveChar>
};
 b0c:	ff 91       	pop	r31
 b0e:	ef 91       	pop	r30
 b10:	bf 91       	pop	r27
 b12:	af 91       	pop	r26
 b14:	9f 91       	pop	r25
 b16:	8f 91       	pop	r24
 b18:	7f 91       	pop	r23
 b1a:	6f 91       	pop	r22
 b1c:	5f 91       	pop	r21
 b1e:	4f 91       	pop	r20
 b20:	3f 91       	pop	r19
 b22:	2f 91       	pop	r18
 b24:	0f 90       	pop	r0
 b26:	0b be       	out	0x3b, r0	; 59
 b28:	0f 90       	pop	r0
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	0f 90       	pop	r0
 b2e:	1f 90       	pop	r1
 b30:	18 95       	reti

00000b32 <__vector_54>:

ISR(USART3_RX_vect){
 b32:	1f 92       	push	r1
 b34:	0f 92       	push	r0
 b36:	0f b6       	in	r0, 0x3f	; 63
 b38:	0f 92       	push	r0
 b3a:	11 24       	eor	r1, r1
 b3c:	0b b6       	in	r0, 0x3b	; 59
 b3e:	0f 92       	push	r0
 b40:	2f 93       	push	r18
 b42:	3f 93       	push	r19
 b44:	4f 93       	push	r20
 b46:	5f 93       	push	r21
 b48:	6f 93       	push	r22
 b4a:	7f 93       	push	r23
 b4c:	8f 93       	push	r24
 b4e:	9f 93       	push	r25
 b50:	af 93       	push	r26
 b52:	bf 93       	push	r27
 b54:	ef 93       	push	r30
 b56:	ff 93       	push	r31
	receiveChar();
 b58:	49 df       	rcall	.-366    	; 0x9ec <receiveChar>
 b5a:	ff 91       	pop	r31
 b5c:	ef 91       	pop	r30
 b5e:	bf 91       	pop	r27
 b60:	af 91       	pop	r26
 b62:	9f 91       	pop	r25
 b64:	8f 91       	pop	r24
 b66:	7f 91       	pop	r23
 b68:	6f 91       	pop	r22
 b6a:	5f 91       	pop	r21
 b6c:	4f 91       	pop	r20
 b6e:	3f 91       	pop	r19
 b70:	2f 91       	pop	r18
 b72:	0f 90       	pop	r0
 b74:	0b be       	out	0x3b, r0	; 59
 b76:	0f 90       	pop	r0
 b78:	0f be       	out	0x3f, r0	; 63
 b7a:	0f 90       	pop	r0
 b7c:	1f 90       	pop	r1
 b7e:	18 95       	reti

00000b80 <__udivmodsi4>:
 b80:	a1 e2       	ldi	r26, 0x21	; 33
 b82:	1a 2e       	mov	r1, r26
 b84:	aa 1b       	sub	r26, r26
 b86:	bb 1b       	sub	r27, r27
 b88:	fd 01       	movw	r30, r26
 b8a:	0d c0       	rjmp	.+26     	; 0xba6 <__udivmodsi4_ep>

00000b8c <__udivmodsi4_loop>:
 b8c:	aa 1f       	adc	r26, r26
 b8e:	bb 1f       	adc	r27, r27
 b90:	ee 1f       	adc	r30, r30
 b92:	ff 1f       	adc	r31, r31
 b94:	a2 17       	cp	r26, r18
 b96:	b3 07       	cpc	r27, r19
 b98:	e4 07       	cpc	r30, r20
 b9a:	f5 07       	cpc	r31, r21
 b9c:	20 f0       	brcs	.+8      	; 0xba6 <__udivmodsi4_ep>
 b9e:	a2 1b       	sub	r26, r18
 ba0:	b3 0b       	sbc	r27, r19
 ba2:	e4 0b       	sbc	r30, r20
 ba4:	f5 0b       	sbc	r31, r21

00000ba6 <__udivmodsi4_ep>:
 ba6:	66 1f       	adc	r22, r22
 ba8:	77 1f       	adc	r23, r23
 baa:	88 1f       	adc	r24, r24
 bac:	99 1f       	adc	r25, r25
 bae:	1a 94       	dec	r1
 bb0:	69 f7       	brne	.-38     	; 0xb8c <__udivmodsi4_loop>
 bb2:	60 95       	com	r22
 bb4:	70 95       	com	r23
 bb6:	80 95       	com	r24
 bb8:	90 95       	com	r25
 bba:	9b 01       	movw	r18, r22
 bbc:	ac 01       	movw	r20, r24
 bbe:	bd 01       	movw	r22, r26
 bc0:	cf 01       	movw	r24, r30
 bc2:	08 95       	ret

00000bc4 <_exit>:
 bc4:	f8 94       	cli

00000bc6 <__stop_program>:
 bc6:	ff cf       	rjmp	.-2      	; 0xbc6 <__stop_program>
